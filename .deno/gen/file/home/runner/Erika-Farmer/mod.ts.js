import { startBot } from "./deps.ts";
import log from "./src/utils/logger.ts";
import { fileLoader, importDirectory } from "./src/utils/loader.ts";
import { updateApplicationCommands } from "./src/utils/updateCommands.ts";
import { Bot } from "./bot.ts";
log.info("Starting bot...");
await Promise.all([
    "./src/commands",
    "./src/events",
].map((path) => importDirectory(Deno.realPathSync(path))));
await fileLoader();
try {
    await updateApplicationCommands();
}
catch (error) {
    if (error.message ==
        `[599] Internal Proxy Error
SyntaxError: Unexpected token < in JSON at position 0
undefined`) {
        Deno.kill(1, "SIGINT");
    }
    else {
        console.error("Updating failed:");
        console.error(error.message);
        console.error("Stack:");
        console.error(error.stack);
    }
}
await startBot(Bot);
const server = Deno.listen({ port: 8080 });
for await (const conn of server) {
    handleHttp(conn).catch(console.error);
}
async function handleHttp(conn) {
    const httpConn = Deno.serveHttp(conn);
    for await (const requestEvent of httpConn) {
        let file;
        try {
            file = await Deno.open("erika.gif", { read: true });
        }
        catch {
            const notFoundResponse = new Response("404 Not Found", { status: 404 });
            await requestEvent.respondWith(notFoundResponse);
            return;
        }
        const readableStream = file.readable;
        const response = new Response(readableStream);
        await requestEvent.respondWith(response);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHckMsT0FBTyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRy9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUc1QixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2Y7SUFDRSxnQkFBZ0I7SUFDaEIsY0FBYztDQUVmLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQzFELENBQUM7QUFDRixNQUFNLFVBQVUsRUFBRSxDQUFDO0FBSW5CLElBQUk7SUFDRixNQUFNLHlCQUF5QixFQUFFLENBQUM7Q0FDbkM7QUFBQyxPQUFPLEtBQUssRUFBRTtJQUNkLElBRUUsS0FBSyxDQUFDLE9BQU87UUFDWDs7VUFFSSxFQUNOO1FBRUEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDeEI7U0FBTTtRQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVCO0NBQ0Y7QUFNRCxNQUFNLFFBQVEsQ0FBQyxHQUE2QixDQUFDLENBQUM7QUFHOUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRTNDLElBQUksS0FBSyxFQUFFLE1BQU0sSUFBSSxJQUFJLE1BQU0sRUFBRTtJQUMvQixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN2QztBQUVELEtBQUssVUFBVSxVQUFVLENBQUMsSUFBZTtJQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLElBQUksS0FBSyxFQUFFLE1BQU0sWUFBWSxJQUFJLFFBQVEsRUFBRTtRQUV6QyxJQUFJLElBQUksQ0FBQztRQUNULElBQUk7WUFDRixJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3JEO1FBQUMsTUFBTTtZQUVOLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxRQUFRLENBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDeEUsTUFBTSxZQUFZLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDakQsT0FBTztTQUNSO1FBSUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUdyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM5QyxNQUFNLFlBQVksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RhcnRCb3QgfSBmcm9tIFwiLi9kZXBzLnRzXCI7XG4vLyBiYWNrIGFsbGV5IG1vdmVcbmltcG9ydCB7IEJvdCBhcyBCb3RUeXBlIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IGxvZyBmcm9tIFwiLi9zcmMvdXRpbHMvbG9nZ2VyLnRzXCI7XG5pbXBvcnQgeyBmaWxlTG9hZGVyLCBpbXBvcnREaXJlY3RvcnkgfSBmcm9tIFwiLi9zcmMvdXRpbHMvbG9hZGVyLnRzXCI7XG5pbXBvcnQgeyB1cGRhdGVBcHBsaWNhdGlvbkNvbW1hbmRzIH0gZnJvbSBcIi4vc3JjL3V0aWxzL3VwZGF0ZUNvbW1hbmRzLnRzXCI7XG4vLyBzZXR1cCBkYlxuaW1wb3J0IHsgQm90IH0gZnJvbSBcIi4vYm90LnRzXCI7XG5pbXBvcnQge3VwZGF0ZUd1aWxkc30gZnJvbSBcIi4vc3JjL3V0aWxzL3NoYXJlZEZ1bmN0aW9ucy50c1wiXG5cbmxvZy5pbmZvKFwiU3RhcnRpbmcgYm90Li4uXCIpO1xuXG4vLyBGb3JjZXMgZGVubyB0byByZWFkIGFsbCB0aGUgZmlsZXMgd2hpY2ggd2lsbCBmaWxsIHRoZSBjb21tYW5kcy9pbmhpYml0b3JzIGNhY2hlIGV0Yy5cbmF3YWl0IFByb21pc2UuYWxsKFxuICBbXG4gICAgXCIuL3NyYy9jb21tYW5kc1wiLFxuICAgIFwiLi9zcmMvZXZlbnRzXCIsXG4gICAgLy8gXCIuL3NyYy90YXNrc1wiLFxuICBdLm1hcCgocGF0aCkgPT4gaW1wb3J0RGlyZWN0b3J5KERlbm8ucmVhbFBhdGhTeW5jKHBhdGgpKSksXG4pO1xuYXdhaXQgZmlsZUxvYWRlcigpO1xuXG4vLyBVUERBVEVTIFlPVVIgQ09NTUFORFMgVE8gTEFURVNUIENPTU1BTkRTXG5cbnRyeSB7XG4gIGF3YWl0IHVwZGF0ZUFwcGxpY2F0aW9uQ29tbWFuZHMoKTtcbn0gY2F0Y2ggKGVycm9yKSB7XG4gIGlmIChcbiAgICAvLyBub3QgZm9uZCBvZiBob3cgdGhpcyBpcyBmb3JtYXR0ZWQgYnV0IGJlc3QgSSBjYW4gcmVhbGx5IGRvIHVudGlsIHRoZSBsaWJyYXJ5IHVwZGF0ZXNcbiAgICBlcnJvci5tZXNzYWdlID09XG4gICAgICBgWzU5OV0gSW50ZXJuYWwgUHJveHkgRXJyb3JcblN5bnRheEVycm9yOiBVbmV4cGVjdGVkIHRva2VuIDwgaW4gSlNPTiBhdCBwb3NpdGlvbiAwXG51bmRlZmluZWRgXG4gICkge1xuICAgIC8vIGtpbGwgcmVwbFxuICAgIERlbm8ua2lsbCgxLCBcIlNJR0lOVFwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRpbmcgZmFpbGVkOlwiKVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgY29uc29sZS5lcnJvcihcIlN0YWNrOlwiKVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xuICB9XG59XG5cbi8vIHNob3VsZCBiZSBmaXhlZCBub3dcbi8vYXdhaXQgdXBkYXRlQXBwbGljYXRpb25Db21tYW5kcygpO1xuLy8gU1RBUlRTIFRIRSBDT05ORUNUSU9OIFRPIERJU0NPUkRcblxuYXdhaXQgc3RhcnRCb3QoQm90IC8qYmFjayBhbGxleSovIGFzIEJvdFR5cGUpO1xuXG4vLyB3b29vb28gaSBsb3ZlIGFsd2F5cyBvblxuY29uc3Qgc2VydmVyID0gRGVuby5saXN0ZW4oeyBwb3J0OiA4MDgwIH0pO1xuXG5mb3IgYXdhaXQgKGNvbnN0IGNvbm4gb2Ygc2VydmVyKSB7XG4gIGhhbmRsZUh0dHAoY29ubikuY2F0Y2goY29uc29sZS5lcnJvcik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUh0dHAoY29ubjogRGVuby5Db25uKSB7XG4gIGNvbnN0IGh0dHBDb25uID0gRGVuby5zZXJ2ZUh0dHAoY29ubik7XG4gIGZvciBhd2FpdCAoY29uc3QgcmVxdWVzdEV2ZW50IG9mIGh0dHBDb25uKSB7XG4gICAgLy8gVHJ5IG9wZW5pbmcgdGhlIGZpbGVcbiAgICBsZXQgZmlsZTtcbiAgICB0cnkge1xuICAgICAgZmlsZSA9IGF3YWl0IERlbm8ub3BlbihcImVyaWthLmdpZlwiLCB7IHJlYWQ6IHRydWUgfSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBJZiB0aGUgZmlsZSBjYW5ub3QgYmUgb3BlbmVkLCByZXR1cm4gYSBcIjQwNCBOb3QgRm91bmRcIiByZXNwb25zZVxuICAgICAgY29uc3Qgbm90Rm91bmRSZXNwb25zZSA9IG5ldyBSZXNwb25zZShcIjQwNCBOb3QgRm91bmRcIiwgeyBzdGF0dXM6IDQwNCB9KTtcbiAgICAgIGF3YWl0IHJlcXVlc3RFdmVudC5yZXNwb25kV2l0aChub3RGb3VuZFJlc3BvbnNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBCdWlsZCBhIHJlYWRhYmxlIHN0cmVhbSBzbyB0aGUgZmlsZSBkb2Vzbid0IGhhdmUgdG8gYmUgZnVsbHkgbG9hZGVkIGludG9cbiAgICAvLyBtZW1vcnkgd2hpbGUgd2Ugc2VuZCBpdFxuICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gZmlsZS5yZWFkYWJsZTtcblxuICAgIC8vIEJ1aWxkIGFuZCBzZW5kIHRoZSByZXNwb25zZVxuICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKHJlYWRhYmxlU3RyZWFtKTtcbiAgICBhd2FpdCByZXF1ZXN0RXZlbnQucmVzcG9uZFdpdGgocmVzcG9uc2UpO1xuICB9XG59Il19