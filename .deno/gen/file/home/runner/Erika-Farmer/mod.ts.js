import { startBot } from "./deps.ts";
import log from "./src/utils/logger.ts";
import { fileLoader, importDirectory } from "./src/utils/loader.ts";
import { updateApplicationCommands } from "./src/utils/updateCommands.ts";
import { Bot } from "./bot.ts";
import { initialize } from "./src/database/mod.ts";
log.info("Starting bot...");
await Promise.all([
    "./src/commands",
    "./src/events",
    "./src/database",
].map((path) => importDirectory(Deno.realPathSync(path))));
await fileLoader();
await initialize();
try {
    await updateApplicationCommands();
}
catch (error) {
    if (error.message ==
        `[599] Internal Proxy Error
SyntaxError: Unexpected token < in JSON at position 0
undefined`) {
        Deno.kill(1, "SIGINT");
    }
    else {
        log.error("Updating failed:");
        log.error(error.message);
        log.error("Stack:");
        log.error(error.stack);
    }
}
await startBot(Bot);
const server = Deno.listen({ port: 8080 });
const emptyResponse = new Response("gaming", { status: 200 });
async function handleHttp(conn) {
    const httpConn = Deno.serveHttp(conn);
    for await (const requestEvent of httpConn) {
        await requestEvent.respondWith(emptyResponse);
        return;
    }
}
for await (const conn of server) {
    handleHttp(conn).catch(log.error);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHckMsT0FBTyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUduRCxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFHNUIsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmO0lBQ0UsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxnQkFBZ0I7Q0FFakIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDMUQsQ0FBQztBQUNGLE1BQU0sVUFBVSxFQUFFLENBQUM7QUFDbkIsTUFBTSxVQUFVLEVBQUUsQ0FBQztBQUduQixJQUFJO0lBQ0YsTUFBTSx5QkFBeUIsRUFBRSxDQUFDO0NBQ25DO0FBQUMsT0FBTyxLQUFLLEVBQUU7SUFDZCxJQUVFLEtBQUssQ0FBQyxPQUFPO1FBQ1g7O1VBRUksRUFDTjtRQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3hCO1NBQU07UUFDTCxHQUFHLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4QjtDQUNGO0FBTUQsTUFBTSxRQUFRLENBQUMsR0FBNkIsQ0FBQyxDQUFDO0FBSzlDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUUzQyxNQUFNLGFBQWEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQTtBQUU1RCxLQUFLLFVBQVUsVUFBVSxDQUFDLElBQWU7SUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxJQUFJLEtBQUssRUFBRSxNQUFNLFlBQVksSUFBSSxRQUFRLEVBQUU7UUFFekMsTUFBTSxZQUFZLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlDLE9BQU87S0FDUjtBQUNILENBQUM7QUFFRCxJQUFJLEtBQUssRUFBRSxNQUFNLElBQUksSUFBSSxNQUFNLEVBQUU7SUFDL0IsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdGFydEJvdCB9IGZyb20gXCIuL2RlcHMudHNcIjtcbi8vIGJhY2sgYWxsZXkgbW92ZVxuaW1wb3J0IHsgQm90IGFzIEJvdFR5cGUgfSBmcm9tIFwiLi9kZXBzLnRzXCI7XG5pbXBvcnQgbG9nIGZyb20gXCIuL3NyYy91dGlscy9sb2dnZXIudHNcIjtcbmltcG9ydCB7IGZpbGVMb2FkZXIsIGltcG9ydERpcmVjdG9yeSB9IGZyb20gXCIuL3NyYy91dGlscy9sb2FkZXIudHNcIjtcbmltcG9ydCB7IHVwZGF0ZUFwcGxpY2F0aW9uQ29tbWFuZHMgfSBmcm9tIFwiLi9zcmMvdXRpbHMvdXBkYXRlQ29tbWFuZHMudHNcIjtcbi8vIHNldHVwIGRiXG5pbXBvcnQgeyBCb3QgfSBmcm9tIFwiLi9ib3QudHNcIjtcbmltcG9ydCB7IGluaXRpYWxpemUgfSBmcm9tIFwiLi9zcmMvZGF0YWJhc2UvbW9kLnRzXCI7XG4vL2ltcG9ydCB7dXBkYXRlR3VpbGRzfSBmcm9tIFwiLi9zcmMvdXRpbHMvc2hhcmVkRnVuY3Rpb25zLnRzXCJcblxubG9nLmluZm8oXCJTdGFydGluZyBib3QuLi5cIik7XG5cbi8vIEZvcmNlcyBkZW5vIHRvIHJlYWQgYWxsIHRoZSBmaWxlcyB3aGljaCB3aWxsIGZpbGwgdGhlIGNvbW1hbmRzL2luaGliaXRvcnMgY2FjaGUgZXRjLlxuYXdhaXQgUHJvbWlzZS5hbGwoXG4gIFtcbiAgICBcIi4vc3JjL2NvbW1hbmRzXCIsXG4gICAgXCIuL3NyYy9ldmVudHNcIixcbiAgICBcIi4vc3JjL2RhdGFiYXNlXCIsXG4gICAgLy8gXCIuL3NyYy90YXNrc1wiLFxuICBdLm1hcCgocGF0aCkgPT4gaW1wb3J0RGlyZWN0b3J5KERlbm8ucmVhbFBhdGhTeW5jKHBhdGgpKSksXG4pO1xuYXdhaXQgZmlsZUxvYWRlcigpO1xuYXdhaXQgaW5pdGlhbGl6ZSgpO1xuLy8gVVBEQVRFUyBZT1VSIENPTU1BTkRTIFRPIExBVEVTVCBDT01NQU5EU1xuXG50cnkge1xuICBhd2FpdCB1cGRhdGVBcHBsaWNhdGlvbkNvbW1hbmRzKCk7XG59IGNhdGNoIChlcnJvcikge1xuICBpZiAoXG4gICAgLy8gbm90IGZvbmQgb2YgaG93IHRoaXMgaXMgZm9ybWF0dGVkIGJ1dCBiZXN0IEkgY2FuIHJlYWxseSBkbyB1bnRpbCB0aGUgbGlicmFyeSB1cGRhdGVzXG4gICAgZXJyb3IubWVzc2FnZSA9PVxuICAgICAgYFs1OTldIEludGVybmFsIFByb3h5IEVycm9yXG5TeW50YXhFcnJvcjogVW5leHBlY3RlZCB0b2tlbiA8IGluIEpTT04gYXQgcG9zaXRpb24gMFxudW5kZWZpbmVkYFxuICApIHtcbiAgICAvLyBraWxsIHJlcGxcbiAgICBEZW5vLmtpbGwoMSwgXCJTSUdJTlRcIik7XG4gIH0gZWxzZSB7XG4gICAgbG9nLmVycm9yKFwiVXBkYXRpbmcgZmFpbGVkOlwiKTtcbiAgICBsb2cuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgbG9nLmVycm9yKFwiU3RhY2s6XCIpO1xuICAgIGxvZy5lcnJvcihlcnJvci5zdGFjayk7XG4gIH1cbn1cblxuLy8gc2hvdWxkIGJlIGZpeGVkIG5vd1xuLy9hd2FpdCB1cGRhdGVBcHBsaWNhdGlvbkNvbW1hbmRzKCk7XG4vLyBTVEFSVFMgVEhFIENPTk5FQ1RJT04gVE8gRElTQ09SRFxuXG5hd2FpdCBzdGFydEJvdChCb3QgLypiYWNrIGFsbGV5Ki8gYXMgQm90VHlwZSk7XG4vL2xvZy5pbmZvKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEJvdC5jYWNoZSkpO1xuXG4vLyB3b29vb28gaSBsb3ZlIGFsd2F5cyBvblxuXG5jb25zdCBzZXJ2ZXIgPSBEZW5vLmxpc3Rlbih7IHBvcnQ6IDgwODAgfSk7XG5cbmNvbnN0IGVtcHR5UmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoXCJnYW1pbmdcIiwgeyBzdGF0dXM6IDIwMH0pXG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUh0dHAoY29ubjogRGVuby5Db25uKSB7XG4gIGNvbnN0IGh0dHBDb25uID0gRGVuby5zZXJ2ZUh0dHAoY29ubik7XG4gIGZvciBhd2FpdCAoY29uc3QgcmVxdWVzdEV2ZW50IG9mIGh0dHBDb25uKSB7XG4gICAgLy8gVHJ5IG9wZW5pbmcgdGhlIGZpbGUgICBcbiAgICBhd2FpdCByZXF1ZXN0RXZlbnQucmVzcG9uZFdpdGgoZW1wdHlSZXNwb25zZSk7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbmZvciBhd2FpdCAoY29uc3QgY29ubiBvZiBzZXJ2ZXIpIHtcbiAgaGFuZGxlSHR0cChjb25uKS5jYXRjaChsb2cuZXJyb3IpO1xufSJdfQ==