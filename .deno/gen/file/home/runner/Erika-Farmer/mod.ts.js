import { startBot } from "./deps.ts";
import log from "./src/utils/logger.ts";
import { fileLoader, importDirectory } from "./src/utils/loader.ts";
import { updateApplicationCommands } from "./src/utils/updateCommands.ts";
import { Bot } from "./bot.ts";
import { initialize } from "./src/database/mod.ts";
log.info("Starting bot...");
await Promise.all([
    "./src/commands",
    "./src/events",
    "./src/database",
].map((path) => importDirectory(Deno.realPathSync(path))));
await fileLoader();
await initialize();
try {
    await updateApplicationCommands();
}
catch (error) {
    if (error.message ==
        `[599] Internal Proxy Error
SyntaxError: Unexpected token < in JSON at position 0
undefined`) {
        Deno.kill(1, "SIGINT");
    }
    else {
        console.error("Updating failed:");
        console.error(error.message);
        console.error("Stack:");
        console.error(error.stack);
    }
}
await startBot(Bot);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHckMsT0FBTyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUduRCxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFHNUIsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmO0lBQ0UsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxnQkFBZ0I7Q0FFakIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDMUQsQ0FBQztBQUNGLE1BQU0sVUFBVSxFQUFFLENBQUM7QUFDbkIsTUFBTSxVQUFVLEVBQUUsQ0FBQztBQUduQixJQUFJO0lBQ0YsTUFBTSx5QkFBeUIsRUFBRSxDQUFDO0NBQ25DO0FBQUMsT0FBTyxLQUFLLEVBQUU7SUFDZCxJQUVFLEtBQUssQ0FBQyxPQUFPO1FBQ1g7O1VBRUksRUFDTjtRQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3hCO1NBQU07UUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM1QjtDQUNGO0FBTUQsTUFBTSxRQUFRLENBQUMsR0FBNkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RhcnRCb3QgfSBmcm9tIFwiLi9kZXBzLnRzXCI7XG4vLyBiYWNrIGFsbGV5IG1vdmVcbmltcG9ydCB7IEJvdCBhcyBCb3RUeXBlIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IGxvZyBmcm9tIFwiLi9zcmMvdXRpbHMvbG9nZ2VyLnRzXCI7XG5pbXBvcnQgeyBmaWxlTG9hZGVyLCBpbXBvcnREaXJlY3RvcnkgfSBmcm9tIFwiLi9zcmMvdXRpbHMvbG9hZGVyLnRzXCI7XG5pbXBvcnQgeyB1cGRhdGVBcHBsaWNhdGlvbkNvbW1hbmRzIH0gZnJvbSBcIi4vc3JjL3V0aWxzL3VwZGF0ZUNvbW1hbmRzLnRzXCI7XG4vLyBzZXR1cCBkYlxuaW1wb3J0IHsgQm90IH0gZnJvbSBcIi4vYm90LnRzXCI7XG5pbXBvcnQgeyBpbml0aWFsaXplIH0gZnJvbSBcIi4vc3JjL2RhdGFiYXNlL21vZC50c1wiO1xuLy9pbXBvcnQge3VwZGF0ZUd1aWxkc30gZnJvbSBcIi4vc3JjL3V0aWxzL3NoYXJlZEZ1bmN0aW9ucy50c1wiXG5cbmxvZy5pbmZvKFwiU3RhcnRpbmcgYm90Li4uXCIpO1xuXG4vLyBGb3JjZXMgZGVubyB0byByZWFkIGFsbCB0aGUgZmlsZXMgd2hpY2ggd2lsbCBmaWxsIHRoZSBjb21tYW5kcy9pbmhpYml0b3JzIGNhY2hlIGV0Yy5cbmF3YWl0IFByb21pc2UuYWxsKFxuICBbXG4gICAgXCIuL3NyYy9jb21tYW5kc1wiLFxuICAgIFwiLi9zcmMvZXZlbnRzXCIsXG4gICAgXCIuL3NyYy9kYXRhYmFzZVwiLFxuICAgIC8vIFwiLi9zcmMvdGFza3NcIixcbiAgXS5tYXAoKHBhdGgpID0+IGltcG9ydERpcmVjdG9yeShEZW5vLnJlYWxQYXRoU3luYyhwYXRoKSkpLFxuKTtcbmF3YWl0IGZpbGVMb2FkZXIoKTtcbmF3YWl0IGluaXRpYWxpemUoKTtcbi8vIFVQREFURVMgWU9VUiBDT01NQU5EUyBUTyBMQVRFU1QgQ09NTUFORFNcblxudHJ5IHtcbiAgYXdhaXQgdXBkYXRlQXBwbGljYXRpb25Db21tYW5kcygpO1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgaWYgKFxuICAgIC8vIG5vdCBmb25kIG9mIGhvdyB0aGlzIGlzIGZvcm1hdHRlZCBidXQgYmVzdCBJIGNhbiByZWFsbHkgZG8gdW50aWwgdGhlIGxpYnJhcnkgdXBkYXRlc1xuICAgIGVycm9yLm1lc3NhZ2UgPT1cbiAgICAgIGBbNTk5XSBJbnRlcm5hbCBQcm94eSBFcnJvclxuU3ludGF4RXJyb3I6IFVuZXhwZWN0ZWQgdG9rZW4gPCBpbiBKU09OIGF0IHBvc2l0aW9uIDBcbnVuZGVmaW5lZGBcbiAgKSB7XG4gICAgLy8ga2lsbCByZXBsXG4gICAgRGVuby5raWxsKDEsIFwiU0lHSU5UXCIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGluZyBmYWlsZWQ6XCIpO1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgY29uc29sZS5lcnJvcihcIlN0YWNrOlwiKTtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcbiAgfVxufVxuXG4vLyBzaG91bGQgYmUgZml4ZWQgbm93XG4vL2F3YWl0IHVwZGF0ZUFwcGxpY2F0aW9uQ29tbWFuZHMoKTtcbi8vIFNUQVJUUyBUSEUgQ09OTkVDVElPTiBUTyBESVNDT1JEXG5cbmF3YWl0IHN0YXJ0Qm90KEJvdCAvKmJhY2sgYWxsZXkqLyBhcyBCb3RUeXBlKTtcbi8vbG9nLmluZm8oT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoQm90LmNhY2hlKSk7XG5cbi8qXG4vLyB3b29vb28gaSBsb3ZlIGFsd2F5cyBvbi8qY29uc3Qgc2VydmVyID0gRGVuby5saXN0ZW4oeyBwb3J0OiA4MDgwIH0pO1xuXG5mb3IgYXdhaXQgKGNvbnN0IGNvbm4gb2Ygc2VydmVyKSB7XG4gIGhhbmRsZUh0dHAoY29ubikuY2F0Y2goY29uc29sZS5lcnJvcik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUh0dHAoY29ubjogRGVuby5Db25uKSB7XG4gIGNvbnN0IGh0dHBDb25uID0gRGVuby5zZXJ2ZUh0dHAoY29ubik7XG4gIGZvciBhd2FpdCAoY29uc3QgcmVxdWVzdEV2ZW50IG9mIGh0dHBDb25uKSB7XG4gICAgLy8gVHJ5IG9wZW5pbmcgdGhlIGZpbGVcbiAgICBsZXQgZmlsZTtcbiAgICB0cnkge1xuICAgICAgZmlsZSA9IGF3YWl0IERlbm8ub3BlbihcImVyaWthLmdpZlwiLCB7IHJlYWQ6IHRydWUgfSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBJZiB0aGUgZmlsZSBjYW5ub3QgYmUgb3BlbmVkLCByZXR1cm4gYSBcIjQwNCBOb3QgRm91bmRcIiByZXNwb25zZVxuICAgICAgY29uc3Qgbm90Rm91bmRSZXNwb25zZSA9IG5ldyBSZXNwb25zZShcIjQwNCBOb3QgRm91bmRcIiwgeyBzdGF0dXM6IDQwNCB9KTtcbiAgICAgIGF3YWl0IHJlcXVlc3RFdmVudC5yZXNwb25kV2l0aChub3RGb3VuZFJlc3BvbnNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBCdWlsZCBhIHJlYWRhYmxlIHN0cmVhbSBzbyB0aGUgZmlsZSBkb2Vzbid0IGhhdmUgdG8gYmUgZnVsbHkgbG9hZGVkIGludG9cbiAgICAvLyBtZW1vcnkgd2hpbGUgd2Ugc2VuZCBpdFxuICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gZmlsZS5yZWFkYWJsZTtcblxuICAgIC8vIEJ1aWxkIGFuZCBzZW5kIHRoZSByZXNwb25zZVxuICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKHJlYWRhYmxlU3RyZWFtKTtcbiAgICBhd2FpdCByZXF1ZXN0RXZlbnQucmVzcG9uZFdpdGgocmVzcG9uc2UpO1xuICB9XG59XG4qL1xuIl19