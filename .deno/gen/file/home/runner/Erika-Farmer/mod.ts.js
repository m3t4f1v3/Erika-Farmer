import { startBot } from "./deps.ts";
import log from "./src/utils/logger.ts";
import { fileLoader, importDirectory } from "./src/utils/loader.ts";
import { updateApplicationCommands } from "./src/utils/updateCommands.ts";
import { Bot } from "./bot.ts";
log.info("Starting bot...");
await Promise.all([
    "./src/commands",
    "./src/events",
].map((path) => importDirectory(Deno.realPathSync(path))));
await fileLoader();
try {
    await updateApplicationCommands();
}
catch (error) {
    if (error.message ==
        "[429] The request was rate limited and it maxed out the retries limit.") {
        Deno.kill(1, "SIGINT");
    }
    else {
        console.error(error);
    }
}
await startBot(Bot);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRS9CLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUc1QixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2Y7SUFDRSxnQkFBZ0I7SUFDaEIsY0FBYztDQUVmLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQzFELENBQUM7QUFDRixNQUFNLFVBQVUsRUFBRSxDQUFDO0FBR25CLElBQUk7SUFDRixNQUFNLHlCQUF5QixFQUFFLENBQUM7Q0FDbkM7QUFBQyxPQUFPLEtBQUssRUFBRTtJQUNkLElBRUUsS0FBSyxDQUFDLE9BQU87UUFDWCx3RUFBd0UsRUFDMUU7UUFFQSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN4QjtTQUFNO1FBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN0QjtDQUNGO0FBR0QsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdGFydEJvdCB9IGZyb20gXCIuL2RlcHMudHNcIjtcbmltcG9ydCBsb2cgZnJvbSBcIi4vc3JjL3V0aWxzL2xvZ2dlci50c1wiO1xuaW1wb3J0IHsgZmlsZUxvYWRlciwgaW1wb3J0RGlyZWN0b3J5IH0gZnJvbSBcIi4vc3JjL3V0aWxzL2xvYWRlci50c1wiO1xuaW1wb3J0IHsgdXBkYXRlQXBwbGljYXRpb25Db21tYW5kcyB9IGZyb20gXCIuL3NyYy91dGlscy91cGRhdGVDb21tYW5kcy50c1wiO1xuLy8gc2V0dXAgZGJcbmltcG9ydCB7IEJvdCB9IGZyb20gXCIuL2JvdC50c1wiO1xuXG5sb2cuaW5mbyhcIlN0YXJ0aW5nIGJvdC4uLlwiKTtcblxuLy8gRm9yY2VzIGRlbm8gdG8gcmVhZCBhbGwgdGhlIGZpbGVzIHdoaWNoIHdpbGwgZmlsbCB0aGUgY29tbWFuZHMvaW5oaWJpdG9ycyBjYWNoZSBldGMuXG5hd2FpdCBQcm9taXNlLmFsbChcbiAgW1xuICAgIFwiLi9zcmMvY29tbWFuZHNcIixcbiAgICBcIi4vc3JjL2V2ZW50c1wiLFxuICAgIC8vIFwiLi9zcmMvdGFza3NcIixcbiAgXS5tYXAoKHBhdGgpID0+IGltcG9ydERpcmVjdG9yeShEZW5vLnJlYWxQYXRoU3luYyhwYXRoKSkpLFxuKTtcbmF3YWl0IGZpbGVMb2FkZXIoKTtcblxuLy8gVVBEQVRFUyBZT1VSIENPTU1BTkRTIFRPIExBVEVTVCBDT01NQU5EU1xudHJ5IHtcbiAgYXdhaXQgdXBkYXRlQXBwbGljYXRpb25Db21tYW5kcygpO1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgaWYgKFxuICAgIC8vIG5vdCBmb25kIG9mIGhvdyB0aGlzIGlzIGZvcm1hdHRlZCBidXQgYmVzdCBJIGNhbiByZWFsbHkgZG8gdW50aWwgdGhlIGFwaSB1cGRhdGVzXG4gICAgZXJyb3IubWVzc2FnZSA9PVxuICAgICAgXCJbNDI5XSBUaGUgcmVxdWVzdCB3YXMgcmF0ZSBsaW1pdGVkIGFuZCBpdCBtYXhlZCBvdXQgdGhlIHJldHJpZXMgbGltaXQuXCIgXG4gICkge1xuICAgIC8va2lsbCByZXBsXG4gICAgRGVuby5raWxsKDEsIFwiU0lHSU5UXCIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbi8vIFNUQVJUUyBUSEUgQ09OTkVDVElPTiBUTyBESVNDT1JEXG5hd2FpdCBzdGFydEJvdChCb3QpO1xuIl19