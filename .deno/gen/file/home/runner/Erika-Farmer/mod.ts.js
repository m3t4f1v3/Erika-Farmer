import { startBot } from "./deps.ts";
import log from "./src/utils/logger.ts";
import { fileLoader, importDirectory } from "./src/utils/loader.ts";
import { updateApplicationCommands } from "./src/utils/updateCommands.ts";
import { Bot } from "./bot.ts";
import { initialize } from "./src/database/mod.ts";
log.info("Starting bot...");
await Promise.all([
    "./src/commands",
    "./src/events",
    "./src/database",
].map((path) => importDirectory(Deno.realPathSync(path))));
await fileLoader();
await initialize();
try {
    await updateApplicationCommands();
}
catch (error) {
    if (error.message ==
        `[599] Internal Proxy Error
SyntaxError: Unexpected token < in JSON at position 0
undefined`) {
        Deno.kill(1, "SIGINT");
    }
    else {
        console.error("Updating failed:");
        console.error(error.message);
        console.error("Stack:");
        console.error(error.stack);
    }
}
await startBot(Bot);
const server = Deno.listen({ port: 8080 });
for await (const conn of server) {
    handleHttp(conn).catch(console.error);
}
async function handleHttp(conn) {
    const httpConn = Deno.serveHttp(conn);
    for await (const requestEvent of httpConn) {
        let file;
        try {
            file = await Deno.open("erika.gif", { read: true });
        }
        catch {
            const notFoundResponse = new Response("404 Not Found", { status: 404 });
            await requestEvent.respondWith(notFoundResponse);
            return;
        }
        const readableStream = file.readable;
        const response = new Response(readableStream);
        await requestEvent.respondWith(response);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHckMsT0FBTyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUduRCxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFHNUIsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmO0lBQ0UsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxnQkFBZ0I7Q0FFakIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDMUQsQ0FBQztBQUNGLE1BQU0sVUFBVSxFQUFFLENBQUM7QUFDbkIsTUFBTSxVQUFVLEVBQUUsQ0FBQztBQUduQixJQUFJO0lBQ0YsTUFBTSx5QkFBeUIsRUFBRSxDQUFDO0NBQ25DO0FBQUMsT0FBTyxLQUFLLEVBQUU7SUFDZCxJQUVFLEtBQUssQ0FBQyxPQUFPO1FBQ1g7O1VBRUksRUFDTjtRQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3hCO1NBQU07UUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM1QjtDQUNGO0FBTUQsTUFBTSxRQUFRLENBQUMsR0FBNkIsQ0FBQyxDQUFDO0FBRzlDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUUzQyxJQUFJLEtBQUssRUFBRSxNQUFNLElBQUksSUFBSSxNQUFNLEVBQUU7SUFDL0IsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkM7QUFFRCxLQUFLLFVBQVUsVUFBVSxDQUFDLElBQWU7SUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxJQUFJLEtBQUssRUFBRSxNQUFNLFlBQVksSUFBSSxRQUFRLEVBQUU7UUFFekMsSUFBSSxJQUFJLENBQUM7UUFDVCxJQUFJO1lBQ0YsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNyRDtRQUFDLE1BQU07WUFFTixNQUFNLGdCQUFnQixHQUFHLElBQUksUUFBUSxDQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sWUFBWSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2pELE9BQU87U0FDUjtRQUlELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFHckMsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUMsTUFBTSxZQUFZLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0YXJ0Qm90IH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuLy8gYmFjayBhbGxleSBtb3ZlXG5pbXBvcnQgeyBCb3QgYXMgQm90VHlwZSB9IGZyb20gXCIuL2RlcHMudHNcIjtcbmltcG9ydCBsb2cgZnJvbSBcIi4vc3JjL3V0aWxzL2xvZ2dlci50c1wiO1xuaW1wb3J0IHsgZmlsZUxvYWRlciwgaW1wb3J0RGlyZWN0b3J5IH0gZnJvbSBcIi4vc3JjL3V0aWxzL2xvYWRlci50c1wiO1xuaW1wb3J0IHsgdXBkYXRlQXBwbGljYXRpb25Db21tYW5kcyB9IGZyb20gXCIuL3NyYy91dGlscy91cGRhdGVDb21tYW5kcy50c1wiO1xuLy8gc2V0dXAgZGJcbmltcG9ydCB7IEJvdCB9IGZyb20gXCIuL2JvdC50c1wiO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZSB9IGZyb20gXCIuL3NyYy9kYXRhYmFzZS9tb2QudHNcIjtcbi8vaW1wb3J0IHt1cGRhdGVHdWlsZHN9IGZyb20gXCIuL3NyYy91dGlscy9zaGFyZWRGdW5jdGlvbnMudHNcIlxuXG5sb2cuaW5mbyhcIlN0YXJ0aW5nIGJvdC4uLlwiKTtcblxuLy8gRm9yY2VzIGRlbm8gdG8gcmVhZCBhbGwgdGhlIGZpbGVzIHdoaWNoIHdpbGwgZmlsbCB0aGUgY29tbWFuZHMvaW5oaWJpdG9ycyBjYWNoZSBldGMuXG5hd2FpdCBQcm9taXNlLmFsbChcbiAgW1xuICAgIFwiLi9zcmMvY29tbWFuZHNcIixcbiAgICBcIi4vc3JjL2V2ZW50c1wiLFxuICAgIFwiLi9zcmMvZGF0YWJhc2VcIixcbiAgICAvLyBcIi4vc3JjL3Rhc2tzXCIsXG4gIF0ubWFwKChwYXRoKSA9PiBpbXBvcnREaXJlY3RvcnkoRGVuby5yZWFsUGF0aFN5bmMocGF0aCkpKSxcbik7XG5hd2FpdCBmaWxlTG9hZGVyKCk7XG5hd2FpdCBpbml0aWFsaXplKCk7XG4vLyBVUERBVEVTIFlPVVIgQ09NTUFORFMgVE8gTEFURVNUIENPTU1BTkRTXG5cbnRyeSB7XG4gIGF3YWl0IHVwZGF0ZUFwcGxpY2F0aW9uQ29tbWFuZHMoKTtcbn0gY2F0Y2ggKGVycm9yKSB7XG4gIGlmIChcbiAgICAvLyBub3QgZm9uZCBvZiBob3cgdGhpcyBpcyBmb3JtYXR0ZWQgYnV0IGJlc3QgSSBjYW4gcmVhbGx5IGRvIHVudGlsIHRoZSBsaWJyYXJ5IHVwZGF0ZXNcbiAgICBlcnJvci5tZXNzYWdlID09XG4gICAgICBgWzU5OV0gSW50ZXJuYWwgUHJveHkgRXJyb3JcblN5bnRheEVycm9yOiBVbmV4cGVjdGVkIHRva2VuIDwgaW4gSlNPTiBhdCBwb3NpdGlvbiAwXG51bmRlZmluZWRgXG4gICkge1xuICAgIC8vIGtpbGwgcmVwbFxuICAgIERlbm8ua2lsbCgxLCBcIlNJR0lOVFwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRpbmcgZmFpbGVkOlwiKTtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIGNvbnNvbGUuZXJyb3IoXCJTdGFjazpcIik7XG4gICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gIH1cbn1cblxuLy8gc2hvdWxkIGJlIGZpeGVkIG5vd1xuLy9hd2FpdCB1cGRhdGVBcHBsaWNhdGlvbkNvbW1hbmRzKCk7XG4vLyBTVEFSVFMgVEhFIENPTk5FQ1RJT04gVE8gRElTQ09SRFxuXG5hd2FpdCBzdGFydEJvdChCb3QgLypiYWNrIGFsbGV5Ki8gYXMgQm90VHlwZSk7XG5cbi8vIHdvb29vbyBpIGxvdmUgYWx3YXlzIG9uXG5jb25zdCBzZXJ2ZXIgPSBEZW5vLmxpc3Rlbih7IHBvcnQ6IDgwODAgfSk7XG5cbmZvciBhd2FpdCAoY29uc3QgY29ubiBvZiBzZXJ2ZXIpIHtcbiAgaGFuZGxlSHR0cChjb25uKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlSHR0cChjb25uOiBEZW5vLkNvbm4pIHtcbiAgY29uc3QgaHR0cENvbm4gPSBEZW5vLnNlcnZlSHR0cChjb25uKTtcbiAgZm9yIGF3YWl0IChjb25zdCByZXF1ZXN0RXZlbnQgb2YgaHR0cENvbm4pIHtcbiAgICAvLyBUcnkgb3BlbmluZyB0aGUgZmlsZVxuICAgIGxldCBmaWxlO1xuICAgIHRyeSB7XG4gICAgICBmaWxlID0gYXdhaXQgRGVuby5vcGVuKFwiZXJpa2EuZ2lmXCIsIHsgcmVhZDogdHJ1ZSB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIElmIHRoZSBmaWxlIGNhbm5vdCBiZSBvcGVuZWQsIHJldHVybiBhIFwiNDA0IE5vdCBGb3VuZFwiIHJlc3BvbnNlXG4gICAgICBjb25zdCBub3RGb3VuZFJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKFwiNDA0IE5vdCBGb3VuZFwiLCB7IHN0YXR1czogNDA0IH0pO1xuICAgICAgYXdhaXQgcmVxdWVzdEV2ZW50LnJlc3BvbmRXaXRoKG5vdEZvdW5kUmVzcG9uc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkIGEgcmVhZGFibGUgc3RyZWFtIHNvIHRoZSBmaWxlIGRvZXNuJ3QgaGF2ZSB0byBiZSBmdWxseSBsb2FkZWQgaW50b1xuICAgIC8vIG1lbW9yeSB3aGlsZSB3ZSBzZW5kIGl0XG4gICAgY29uc3QgcmVhZGFibGVTdHJlYW0gPSBmaWxlLnJlYWRhYmxlO1xuXG4gICAgLy8gQnVpbGQgYW5kIHNlbmQgdGhlIHJlc3BvbnNlXG4gICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UocmVhZGFibGVTdHJlYW0pO1xuICAgIGF3YWl0IHJlcXVlc3RFdmVudC5yZXNwb25kV2l0aChyZXNwb25zZSk7XG4gIH1cbn1cbiJdfQ==