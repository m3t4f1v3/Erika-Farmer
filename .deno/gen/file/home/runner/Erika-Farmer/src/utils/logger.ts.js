import { bold, cyan, gray, italic, red, yellow } from "../../deps.ts";
export var LogLevels;
(function (LogLevels) {
    LogLevels[LogLevels["Debug"] = 0] = "Debug";
    LogLevels[LogLevels["Info"] = 1] = "Info";
    LogLevels[LogLevels["Warn"] = 2] = "Warn";
    LogLevels[LogLevels["Error"] = 3] = "Error";
    LogLevels[LogLevels["Fatal"] = 4] = "Fatal";
})(LogLevels || (LogLevels = {}));
const prefixes = new Map([
    [LogLevels.Debug, "DEBUG"],
    [LogLevels.Info, "INFO"],
    [LogLevels.Warn, "WARN"],
    [LogLevels.Error, "ERROR"],
    [LogLevels.Fatal, "FATAL"],
]);
const noColor = (msg) => msg;
const colorFunctions = new Map([
    [LogLevels.Debug, gray],
    [LogLevels.Info, cyan],
    [LogLevels.Warn, yellow],
    [LogLevels.Error, (str) => red(str)],
    [LogLevels.Fatal, (str) => red(bold(italic(str)))],
]);
export function logger({ logLevel = LogLevels.Info, name, } = {}) {
    function log(level, ...args) {
        if (level < logLevel)
            return;
        let color = colorFunctions.get(level);
        if (!color)
            color = noColor;
        const date = new Date();
        const log = [
            `[${date.toLocaleDateString()} ${date.toLocaleTimeString()}]`,
            color(prefixes.get(level) || "DEBUG"),
            name ? `${name} >` : ">",
            ...args,
        ];
        switch (level) {
            case LogLevels.Debug:
                return console.debug(...log);
            case LogLevels.Info:
                return console.info(...log);
            case LogLevels.Warn:
                return console.warn(...log);
            case LogLevels.Error:
                return console.error(...log);
            case LogLevels.Fatal:
                return console.error(...log);
            default:
                return console.log(...log);
        }
    }
    function setLevel(level) {
        logLevel = level;
    }
    function debug(...args) {
        log(LogLevels.Debug, ...args);
    }
    function info(...args) {
        log(LogLevels.Info, ...args);
    }
    function warn(...args) {
        log(LogLevels.Warn, ...args);
    }
    function error(...args) {
        log(LogLevels.Error, ...args);
    }
    function fatal(...args) {
        log(LogLevels.Fatal, ...args);
    }
    return {
        log,
        setLevel,
        debug,
        info,
        warn,
        error,
        fatal,
    };
}
export const log = logger({ name: "Main" });
export default log;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0RSxNQUFNLENBQU4sSUFBWSxTQU1YO0FBTkQsV0FBWSxTQUFTO0lBQ25CLDJDQUFLLENBQUE7SUFDTCx5Q0FBSSxDQUFBO0lBQ0oseUNBQUksQ0FBQTtJQUNKLDJDQUFLLENBQUE7SUFDTCwyQ0FBSyxDQUFBO0FBQ1AsQ0FBQyxFQU5XLFNBQVMsS0FBVCxTQUFTLFFBTXBCO0FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQW9CO0lBQzFDLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUM7SUFDMUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztJQUN4QixDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO0lBQ3hCLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUM7SUFDMUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztDQUMzQixDQUFDLENBQUM7QUFFSCxNQUFNLE9BQU8sR0FBNEIsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUN0RCxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBcUM7SUFDakUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQztJQUN2QixDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ3RCLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7SUFDeEIsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDM0QsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLE1BQU0sQ0FBQyxFQUNyQixRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksRUFDekIsSUFBSSxNQUlGLEVBQUU7SUFDSixTQUFTLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEdBQUcsSUFBVztRQUMzQyxJQUFJLEtBQUssR0FBRyxRQUFRO1lBQUUsT0FBTztRQUU3QixJQUFJLEtBQUssR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxLQUFLO1lBQUUsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUU1QixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyxHQUFHO1lBQ1YsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRztZQUM3RCxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUM7WUFDckMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHO1lBQ3hCLEdBQUcsSUFBSTtTQUNSLENBQUM7UUFFRixRQUFRLEtBQUssRUFBRTtZQUNiLEtBQUssU0FBUyxDQUFDLEtBQUs7Z0JBQ2xCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLEtBQUssU0FBUyxDQUFDLElBQUk7Z0JBQ2pCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLEtBQUssU0FBUyxDQUFDLElBQUk7Z0JBQ2pCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLEtBQUssU0FBUyxDQUFDLEtBQUs7Z0JBQ2xCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLEtBQUssU0FBUyxDQUFDLEtBQUs7Z0JBQ2xCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQy9CO2dCQUNFLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVELFNBQVMsUUFBUSxDQUFDLEtBQWdCO1FBQ2hDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDbkIsQ0FBQztJQUVELFNBQVMsS0FBSyxDQUFDLEdBQUcsSUFBVztRQUMzQixHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxTQUFTLElBQUksQ0FBQyxHQUFHLElBQVc7UUFDMUIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsU0FBUyxJQUFJLENBQUMsR0FBRyxJQUFXO1FBQzFCLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFNBQVMsS0FBSyxDQUFDLEdBQUcsSUFBVztRQUMzQixHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxTQUFTLEtBQUssQ0FBQyxHQUFHLElBQVc7UUFDM0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsT0FBTztRQUNMLEdBQUc7UUFDSCxRQUFRO1FBQ1IsS0FBSztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLEtBQUs7S0FDTixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUM1QyxlQUFlLEdBQUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZSBuby1leHBsaWNpdC1hbnlcbmltcG9ydCB7IGJvbGQsIGN5YW4sIGdyYXksIGl0YWxpYywgcmVkLCB5ZWxsb3cgfSBmcm9tIFwiLi4vLi4vZGVwcy50c1wiO1xuXG5leHBvcnQgZW51bSBMb2dMZXZlbHMge1xuICBEZWJ1ZyxcbiAgSW5mbyxcbiAgV2FybixcbiAgRXJyb3IsXG4gIEZhdGFsLFxufVxuXG5jb25zdCBwcmVmaXhlcyA9IG5ldyBNYXA8TG9nTGV2ZWxzLCBzdHJpbmc+KFtcbiAgW0xvZ0xldmVscy5EZWJ1ZywgXCJERUJVR1wiXSxcbiAgW0xvZ0xldmVscy5JbmZvLCBcIklORk9cIl0sXG4gIFtMb2dMZXZlbHMuV2FybiwgXCJXQVJOXCJdLFxuICBbTG9nTGV2ZWxzLkVycm9yLCBcIkVSUk9SXCJdLFxuICBbTG9nTGV2ZWxzLkZhdGFsLCBcIkZBVEFMXCJdLFxuXSk7XG5cbmNvbnN0IG5vQ29sb3I6IChzdHI6IHN0cmluZykgPT4gc3RyaW5nID0gKG1zZykgPT4gbXNnO1xuY29uc3QgY29sb3JGdW5jdGlvbnMgPSBuZXcgTWFwPExvZ0xldmVscywgKHN0cjogc3RyaW5nKSA9PiBzdHJpbmc+KFtcbiAgW0xvZ0xldmVscy5EZWJ1ZywgZ3JheV0sXG4gIFtMb2dMZXZlbHMuSW5mbywgY3lhbl0sXG4gIFtMb2dMZXZlbHMuV2FybiwgeWVsbG93XSxcbiAgW0xvZ0xldmVscy5FcnJvciwgKHN0cjogc3RyaW5nKSA9PiByZWQoc3RyKV0sXG4gIFtMb2dMZXZlbHMuRmF0YWwsIChzdHI6IHN0cmluZykgPT4gcmVkKGJvbGQoaXRhbGljKHN0cikpKV0sXG5dKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2dlcih7XG4gIGxvZ0xldmVsID0gTG9nTGV2ZWxzLkluZm8sXG4gIG5hbWUsXG59OiB7XG4gIGxvZ0xldmVsPzogTG9nTGV2ZWxzO1xuICBuYW1lPzogc3RyaW5nO1xufSA9IHt9KSB7XG4gIGZ1bmN0aW9uIGxvZyhsZXZlbDogTG9nTGV2ZWxzLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmIChsZXZlbCA8IGxvZ0xldmVsKSByZXR1cm47XG5cbiAgICBsZXQgY29sb3IgPSBjb2xvckZ1bmN0aW9ucy5nZXQobGV2ZWwpO1xuICAgIGlmICghY29sb3IpIGNvbG9yID0gbm9Db2xvcjtcblxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IGxvZyA9IFtcbiAgICAgIGBbJHtkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfSAke2RhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCl9XWAsXG4gICAgICBjb2xvcihwcmVmaXhlcy5nZXQobGV2ZWwpIHx8IFwiREVCVUdcIiksXG4gICAgICBuYW1lID8gYCR7bmFtZX0gPmAgOiBcIj5cIixcbiAgICAgIC4uLmFyZ3MsXG4gICAgXTtcblxuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgTG9nTGV2ZWxzLkRlYnVnOlxuICAgICAgICByZXR1cm4gY29uc29sZS5kZWJ1ZyguLi5sb2cpO1xuICAgICAgY2FzZSBMb2dMZXZlbHMuSW5mbzpcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuaW5mbyguLi5sb2cpO1xuICAgICAgY2FzZSBMb2dMZXZlbHMuV2FybjpcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybiguLi5sb2cpO1xuICAgICAgY2FzZSBMb2dMZXZlbHMuRXJyb3I6XG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKC4uLmxvZyk7XG4gICAgICBjYXNlIExvZ0xldmVscy5GYXRhbDpcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoLi4ubG9nKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZyguLi5sb2cpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExldmVsKGxldmVsOiBMb2dMZXZlbHMpIHtcbiAgICBsb2dMZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVidWcoLi4uYXJnczogYW55W10pIHtcbiAgICBsb2coTG9nTGV2ZWxzLkRlYnVnLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluZm8oLi4uYXJnczogYW55W10pIHtcbiAgICBsb2coTG9nTGV2ZWxzLkluZm8sIC4uLmFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2FybiguLi5hcmdzOiBhbnlbXSkge1xuICAgIGxvZyhMb2dMZXZlbHMuV2FybiwgLi4uYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBlcnJvciguLi5hcmdzOiBhbnlbXSkge1xuICAgIGxvZyhMb2dMZXZlbHMuRXJyb3IsIC4uLmFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmF0YWwoLi4uYXJnczogYW55W10pIHtcbiAgICBsb2coTG9nTGV2ZWxzLkZhdGFsLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9nLFxuICAgIHNldExldmVsLFxuICAgIGRlYnVnLFxuICAgIGluZm8sXG4gICAgd2FybixcbiAgICBlcnJvcixcbiAgICBmYXRhbCxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGxvZyA9IGxvZ2dlcih7IG5hbWU6IFwiTWFpblwiIH0pO1xuZXhwb3J0IGRlZmF1bHQgbG9nO1xuIl19