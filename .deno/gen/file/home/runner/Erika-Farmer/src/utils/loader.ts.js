import log from "./logger.ts";
// Very important to make sure files are reloaded properly
let uniqueFilePathCounter = 0;
let paths = [];
/** This function allows reading all files in a folder. Useful for loading/reloading commands, monitors etc */ export async function importDirectory(path) {
    path = path.replaceAll("\\", "/");
    const files = Deno.readDirSync(Deno.realPathSync(path));
    const folder = path.substring(path.indexOf("/src/") + 5);
    if (!folder.includes("/")) log.info(`Loading ${folder}...`);
    for (const file of files){
        if (!file.name) continue;
        const currentPath = `${path}/${file.name}`;
        if (file.isFile) {
            if (!currentPath.endsWith(".ts")) continue;
            paths.push(`import "${Deno.mainModule.substring(0, Deno.mainModule.lastIndexOf("/"))}/${currentPath.substring(currentPath.indexOf("src/"))}#${uniqueFilePathCounter}";`);
            continue;
        }
        await importDirectory(currentPath);
    }
    uniqueFilePathCounter++;
}
/** Imports all everything in fileloader.ts */ export async function fileLoader() {
    await Deno.writeTextFile("fileloader.ts", paths.join("\n").replaceAll("\\", "/"));
    await import(`${Deno.mainModule.substring(0, Deno.mainModule.lastIndexOf("/"))}/fileloader.ts#${uniqueFilePathCounter}`);
    paths = [];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gXCIuL2xvZ2dlci50c1wiO1xuXG4vLyBWZXJ5IGltcG9ydGFudCB0byBtYWtlIHN1cmUgZmlsZXMgYXJlIHJlbG9hZGVkIHByb3Blcmx5XG5sZXQgdW5pcXVlRmlsZVBhdGhDb3VudGVyID0gMDtcbmxldCBwYXRoczogc3RyaW5nW10gPSBbXTtcblxuLyoqIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHJlYWRpbmcgYWxsIGZpbGVzIGluIGEgZm9sZGVyLiBVc2VmdWwgZm9yIGxvYWRpbmcvcmVsb2FkaW5nIGNvbW1hbmRzLCBtb25pdG9ycyBldGMgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnREaXJlY3RvcnkocGF0aDogc3RyaW5nKSB7XG4gIHBhdGggPSBwYXRoLnJlcGxhY2VBbGwoXCJcXFxcXCIsIFwiL1wiKTtcbiAgY29uc3QgZmlsZXMgPSBEZW5vLnJlYWREaXJTeW5jKERlbm8ucmVhbFBhdGhTeW5jKHBhdGgpKTtcbiAgY29uc3QgZm9sZGVyID0gcGF0aC5zdWJzdHJpbmcocGF0aC5pbmRleE9mKFwiL3NyYy9cIikgKyA1KTtcblxuICBpZiAoIWZvbGRlci5pbmNsdWRlcyhcIi9cIikpIGxvZy5pbmZvKGBMb2FkaW5nICR7Zm9sZGVyfS4uLmApO1xuXG4gIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgIGlmICghZmlsZS5uYW1lKSBjb250aW51ZTtcblxuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gYCR7cGF0aH0vJHtmaWxlLm5hbWV9YDtcbiAgICBpZiAoZmlsZS5pc0ZpbGUpIHtcbiAgICAgIGlmICghY3VycmVudFBhdGguZW5kc1dpdGgoXCIudHNcIikpIGNvbnRpbnVlO1xuICAgICAgcGF0aHMucHVzaChcbiAgICAgICAgYGltcG9ydCBcIiR7RGVuby5tYWluTW9kdWxlLnN1YnN0cmluZygwLCBEZW5vLm1haW5Nb2R1bGUubGFzdEluZGV4T2YoXCIvXCIpKX0vJHtcbiAgICAgICAgICBjdXJyZW50UGF0aC5zdWJzdHJpbmcoXG4gICAgICAgICAgICBjdXJyZW50UGF0aC5pbmRleE9mKFwic3JjL1wiKSxcbiAgICAgICAgICApXG4gICAgICAgIH0jJHt1bmlxdWVGaWxlUGF0aENvdW50ZXJ9XCI7YCxcbiAgICAgICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBhd2FpdCBpbXBvcnREaXJlY3RvcnkoY3VycmVudFBhdGgpO1xuICB9XG5cbiAgdW5pcXVlRmlsZVBhdGhDb3VudGVyKys7XG59XG5cbi8qKiBJbXBvcnRzIGFsbCBldmVyeXRoaW5nIGluIGZpbGVsb2FkZXIudHMgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaWxlTG9hZGVyKCkge1xuICBhd2FpdCBEZW5vLndyaXRlVGV4dEZpbGUoXG4gICAgXCJmaWxlbG9hZGVyLnRzXCIsXG4gICAgcGF0aHMuam9pbihcIlxcblwiKS5yZXBsYWNlQWxsKFwiXFxcXFwiLCBcIi9cIiksXG4gICk7XG4gIGF3YWl0IGltcG9ydChcbiAgICBgJHtEZW5vLm1haW5Nb2R1bGUuc3Vic3RyaW5nKDAsIERlbm8ubWFpbk1vZHVsZS5sYXN0SW5kZXhPZihcIi9cIikpfS9maWxlbG9hZGVyLnRzIyR7dW5pcXVlRmlsZVBhdGhDb3VudGVyfWBcbiAgKTtcbiAgcGF0aHMgPSBbXTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBRTlCLDBEQUEwRDtBQUMxRCxJQUFJLHFCQUFxQixHQUFHLENBQUMsQUFBQztBQUM5QixJQUFJLEtBQUssR0FBYSxFQUFFLEFBQUM7QUFFekIsOEdBQThHLENBQzlHLE9BQU8sZUFBZSxlQUFlLENBQUMsSUFBWSxFQUFFO0lBQ2xELElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQUFBQztJQUN4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQUM7SUFFekQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUU1RCxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBRTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTO1FBRXpCLE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUFDO1FBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVM7WUFDM0MsS0FBSyxDQUFDLElBQUksQ0FDUixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3pFLFdBQVcsQ0FBQyxTQUFTLENBQ25CLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQzVCLENBQ0YsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxDQUM5QixDQUFDO1lBQ0YsU0FBUztTQUNWO1FBRUQsTUFBTSxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDcEM7SUFFRCxxQkFBcUIsRUFBRSxDQUFDO0NBQ3pCO0FBRUQsOENBQThDLENBQzlDLE9BQU8sZUFBZSxVQUFVLEdBQUc7SUFDakMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUN0QixlQUFlLEVBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUN2QyxDQUFDO0lBQ0YsTUFBTSxNQUFNLENBQ1YsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQzNHLENBQUM7SUFDRixLQUFLLEdBQUcsRUFBRSxDQUFDO0NBQ1oifQ==