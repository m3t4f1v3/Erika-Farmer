import { Bot } from "../../bot.ts";
import { Client } from "../../deps.ts";
const ReplDBClient = new Client();
export let servers = await ReplDBClient.get("servers");
export async function updateGuilds() {
    (await Bot.activeGuildIds).forEach((guildID) => {
        if (!servers[guildID.toString()]) {
            servers[guildID.toString()] = {
                "rapistDB": {},
            };
        }
    });
}
export function getQuotes(serverID) {
    return Object.keys(servers[serverID.toString()]["rapistDB"]);
}
export async function addQuote(quote, serverID, userID) {
    servers[serverID.toString()]["rapistDB"][quote] = userID.toString();
    await ReplDBClient.set("servers", servers);
}
export async function delQuote(quote, serverID, userID) {
    if (servers[serverID.toString()]["rapistDB"][quote] == userID.toString()) {
        delete servers[serverID.toString()]["rapistDB"][quote];
    }
    await ReplDBClient.set("servers", servers);
}
export function choose(choices) {
    return choices[Math.floor(choices.length * Math.random())];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkRnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hhcmVkRnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFbkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sR0FBRyxNQUFNLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFdkQsTUFBTSxDQUFDLEtBQUssVUFBVSxZQUFZO0lBQ2hDLENBQUMsTUFBTSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRTtZQUNoQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUc7Z0JBQzVCLFVBQVUsRUFBRSxFQUFFO2FBQ2YsQ0FBQztTQUNIO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBZ0JELE1BQU0sVUFBVSxTQUFTLENBQUMsUUFBZ0I7SUFDeEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDNUIsS0FBYSxFQUNiLFFBQWdCLEVBQ2hCLE1BQWM7SUFFZCxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBR3BFLE1BQU0sWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsUUFBUSxDQUM1QixLQUFhLEVBQ2IsUUFBZ0IsRUFDaEIsTUFBYztJQUdkLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUN4RSxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4RDtJQUNELE1BQU0sWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsT0FBc0I7SUFDM0MsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHByb2JhYmx5IGEgcmFjZSBmdW5jdGlvbiBidXQgd2hvIGNhcmVzXG5pbXBvcnQgeyBCb3QgfSBmcm9tIFwiLi4vLi4vYm90LnRzXCI7XG5cbmltcG9ydCB7IENsaWVudCB9IGZyb20gXCIuLi8uLi9kZXBzLnRzXCI7XG5cbmNvbnN0IFJlcGxEQkNsaWVudCA9IG5ldyBDbGllbnQoKTtcblxuZXhwb3J0IGxldCBzZXJ2ZXJzID0gYXdhaXQgUmVwbERCQ2xpZW50LmdldChcInNlcnZlcnNcIik7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVHdWlsZHMoKSB7XG4gIChhd2FpdCBCb3QuYWN0aXZlR3VpbGRJZHMpLmZvckVhY2goKGd1aWxkSUQpID0+IHtcbiAgICBpZiAoIXNlcnZlcnNbZ3VpbGRJRC50b1N0cmluZygpXSkge1xuICAgICAgc2VydmVyc1tndWlsZElELnRvU3RyaW5nKCldID0ge1xuICAgICAgICBcInJhcGlzdERCXCI6IHt9LFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuLy8gYmFjayBhbGxleSBzaGl0IHVudGlsIGkgcmVhbGl6ZSBob3cgdG8gbGlzdCBndWlsZHNcbi8qXG5zZXJ2ZXJzID0ge1xuICBcIjEwMjA0MTkwNDE3NDEwMDA3MDVcIjoge1xuICAgICAgICBcInJhcGlzdERCXCI6IHtcbiAgICAgICAgICBcImJqZWhcIjogXCI2ODEwOTYzMzYzOTI1ODUyNTVcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gIFwiMTAwMTIxMDY0MzQ4NTAzNjYzNFwiOiB7XG4gICAgICAgIFwicmFwaXN0REJcIjoge1xuICAgICAgICAgIFwicFwiOiBcIjY4MTA5NjMzNjM5MjU4NTI1NVwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbn1cbiovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVvdGVzKHNlcnZlcklEOiBiaWdpbnQpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNlcnZlcnNbc2VydmVySUQudG9TdHJpbmcoKV1bXCJyYXBpc3REQlwiXSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRRdW90ZShcbiAgcXVvdGU6IHN0cmluZyxcbiAgc2VydmVySUQ6IGJpZ2ludCxcbiAgdXNlcklEOiBiaWdpbnQsXG4pIHtcbiAgc2VydmVyc1tzZXJ2ZXJJRC50b1N0cmluZygpXVtcInJhcGlzdERCXCJdW3F1b3RlXSA9IHVzZXJJRC50b1N0cmluZygpO1xuXG4gIC8vIGlkZWFsbHkgdGhpcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UgdGhlIGJvdCBzaHV0cyBkb3duIG9yIGF0IHRoZSB2ZXJ5IGxlYXN0IHdoZW4gaXRzIHVwZGF0aW5nIGFuIGV4aXN0aW5nIHF1b3RlIGJ1dCBpdHMgbm90IG15IHBjIHNvIGlkY1xuICBhd2FpdCBSZXBsREJDbGllbnQuc2V0KFwic2VydmVyc1wiLCBzZXJ2ZXJzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbFF1b3RlKFxuICBxdW90ZTogc3RyaW5nLFxuICBzZXJ2ZXJJRDogYmlnaW50LFxuICB1c2VySUQ6IGJpZ2ludCxcbikge1xuICAvLyBjaGVja3MgaWYgaXQgZXhpc3RzIEFORCBjaGVja3MgaWYgY2FuIGJlIGRlbGV0ZWQgKEknbGwgbWFrZSBpdCBjaGVjayBpZiB5b3UncmUgYW4gYWRtaW4gbGF0ZXIpXG4gIGlmIChzZXJ2ZXJzW3NlcnZlcklELnRvU3RyaW5nKCldW1wicmFwaXN0REJcIl1bcXVvdGVdID09IHVzZXJJRC50b1N0cmluZygpKSB7XG4gICAgZGVsZXRlIHNlcnZlcnNbc2VydmVySUQudG9TdHJpbmcoKV1bXCJyYXBpc3REQlwiXVtxdW90ZV07XG4gIH1cbiAgYXdhaXQgUmVwbERCQ2xpZW50LnNldChcInNlcnZlcnNcIiwgc2VydmVycyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaG9vc2UoY2hvaWNlczogQXJyYXk8c3RyaW5nPikge1xuICByZXR1cm4gY2hvaWNlc1tNYXRoLmZsb29yKGNob2ljZXMubGVuZ3RoICogTWF0aC5yYW5kb20oKSldO1xufVxuIl19