import { Bot } from "../../bot.ts";
import { Client } from "../../deps.ts";
const ReplDBClient = new Client();
export let servers = await ReplDBClient.get("servers");
export async function updateGuilds() {
    (await Bot.activeGuildIds).forEach((guildID) => {
        if (!servers[guildID.toString()]) {
            servers[guildID.toString()] = {
                "rapistDB": {}
            };
        }
    });
}
export function getQuotes(serverID) {
    return Object.keys(servers[serverID.toString()]["rapistDB"]);
}
export async function addQuote(quote, serverID, userID) {
    servers[serverID.toString()]["rapistDB"][quote] = userID.toString();
    await ReplDBClient.set("servers", servers);
}
export async function delQuote(quote, serverID, userID) {
    if (servers[serverID.toString()]["rapistDB"][quote] == userID.toString()) {
        delete servers[serverID.toString()]["rapistDB"][quote];
    }
    await ReplDBClient.set("servers", servers);
}
export function choose(choices) {
    let index = Math.floor(choices.length * Math.random());
    return choices[index];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkRnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hhcmVkRnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxHQUFHLEVBQ0osTUFBTSxjQUFjLENBQUM7QUFFdEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sR0FBRyxNQUFNLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFdkQsTUFBTSxDQUFDLEtBQUssVUFBVSxZQUFZO0lBQ2hDLENBQUMsTUFBTSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRTtZQUNoQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUc7Z0JBQzVCLFVBQVUsRUFBRSxFQUFFO2FBQ2YsQ0FBQTtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBZ0JELE1BQU0sVUFBVSxTQUFTLENBQUMsUUFBZ0I7SUFDeEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxLQUFhLEVBQUUsUUFBZ0IsRUFBRSxNQUFjO0lBQzVFLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFHcEUsTUFBTSxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQUMsS0FBYSxFQUFFLFFBQWdCLEVBQUUsTUFBYztJQUU1RSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUU7UUFDeEUsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDdkQ7SUFDRCxNQUFNLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLE9BQXlCO0lBQzlDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN2RCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHJvYmFibHkgYSByYWNlIGZ1bmN0aW9uIGJ1dCB3aG8gY2FyZXNcbmltcG9ydCB7XG4gIEJvdFxufSBmcm9tIFwiLi4vLi4vYm90LnRzXCI7XG5cbmltcG9ydCB7IENsaWVudCB9IGZyb20gXCIuLi8uLi9kZXBzLnRzXCI7XG5cbmNvbnN0IFJlcGxEQkNsaWVudCA9IG5ldyBDbGllbnQoKTtcblxuZXhwb3J0IGxldCBzZXJ2ZXJzID0gYXdhaXQgUmVwbERCQ2xpZW50LmdldChcInNlcnZlcnNcIik7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVHdWlsZHMoKSB7XG4gIChhd2FpdCBCb3QuYWN0aXZlR3VpbGRJZHMpLmZvckVhY2goKGd1aWxkSUQpID0+IHtcbiAgICBpZiAoIXNlcnZlcnNbZ3VpbGRJRC50b1N0cmluZygpXSkge1xuICAgICAgc2VydmVyc1tndWlsZElELnRvU3RyaW5nKCldID0ge1xuICAgICAgICBcInJhcGlzdERCXCI6IHt9XG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuLy8gYmFjayBhbGxleSBzaGl0IHVudGlsIGkgcmVhbGl6ZSBob3cgdG8gbGlzdCBndWlsZHNcbi8qXG5zZXJ2ZXJzID0ge1xuICBcIjEwMjA0MTkwNDE3NDEwMDA3MDVcIjoge1xuICAgICAgICBcInJhcGlzdERCXCI6IHtcbiAgICAgICAgICBcImJqZWhcIjogXCI2ODEwOTYzMzYzOTI1ODUyNTVcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gIFwiMTAwMTIxMDY0MzQ4NTAzNjYzNFwiOiB7XG4gICAgICAgIFwicmFwaXN0REJcIjoge1xuICAgICAgICAgIFwicFwiOiBcIjY4MTA5NjMzNjM5MjU4NTI1NVwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbn1cbiovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVvdGVzKHNlcnZlcklEOiBiaWdpbnQpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNlcnZlcnNbc2VydmVySUQudG9TdHJpbmcoKV1bXCJyYXBpc3REQlwiXSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRRdW90ZShxdW90ZTogc3RyaW5nLCBzZXJ2ZXJJRDogYmlnaW50LCB1c2VySUQ6IGJpZ2ludCkge1xuICBzZXJ2ZXJzW3NlcnZlcklELnRvU3RyaW5nKCldW1wicmFwaXN0REJcIl1bcXVvdGVdID0gdXNlcklELnRvU3RyaW5nKCk7XG5cbiAgLy8gaWRlYWxseSB0aGlzIHNob3VsZCBiZSBjYWxsZWQgb25jZSB0aGUgYm90IHNodXRzIGRvd24gb3IgYXQgdGhlIHZlcnkgbGVhc3Qgd2hlbiBpdHMgdXBkYXRpbmcgYW4gZXhpc3RpbmcgcXVvdGUgYnV0IGl0cyBub3QgbXkgcGMgc28gaWRjXG4gIGF3YWl0IFJlcGxEQkNsaWVudC5zZXQoXCJzZXJ2ZXJzXCIsIHNlcnZlcnMpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsUXVvdGUocXVvdGU6IHN0cmluZywgc2VydmVySUQ6IGJpZ2ludCwgdXNlcklEOiBiaWdpbnQpIHtcbiAgLy8gY2hlY2tzIGlmIGl0IGV4aXN0cyBBTkQgY2hlY2tzIGlmIGNhbiBiZSBkZWxldGVkIChJJ2xsIG1ha2UgaXQgY2hlY2sgaWYgeW91J3JlIGFuIGFkbWluIGxhdGVyKVxuICBpZiAoc2VydmVyc1tzZXJ2ZXJJRC50b1N0cmluZygpXVtcInJhcGlzdERCXCJdW3F1b3RlXSA9PSB1c2VySUQudG9TdHJpbmcoKSkge1xuICAgIGRlbGV0ZSBzZXJ2ZXJzW3NlcnZlcklELnRvU3RyaW5nKCldW1wicmFwaXN0REJcIl1bcXVvdGVdXG4gIH1cbiAgYXdhaXQgUmVwbERCQ2xpZW50LnNldChcInNlcnZlcnNcIiwgc2VydmVycyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaG9vc2UoY2hvaWNlczogQXJyYXkgPCBzdHJpbmcgPiApIHtcbiAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihjaG9pY2VzLmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpO1xuICByZXR1cm4gY2hvaWNlc1tpbmRleF07XG59Il19