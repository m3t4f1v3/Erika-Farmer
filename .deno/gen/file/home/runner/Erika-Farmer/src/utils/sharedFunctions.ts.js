import { guilds } from "../database/mod.ts";
export async function getValues(serverID, database) {
    let guildData = await guilds.get(serverID.toString());
    if (typeof guildData === "object") {
        return guildData[database];
    }
}
export async function addValue(value, serverID, userID, database) {
    let server = serverID.toString();
    let guildData = await guilds.get(server);
    let table = guildData[database];
    if (typeof guildData === "object") {
        if (typeof table === "object") {
            table[value] = userID.toString();
        }
        await guilds.update(server, guildData);
    }
}
export async function delValue(value, serverID, userID, database) {
    let server = serverID.toString();
    let guildData = await guilds.get(server);
    let rapistDB = guildData["rapistDB"];
    if (typeof guildData === "object") {
        if (typeof rapistDB === "object") {
            if (rapistDB[value] == userID.toString()) {
                delete rapistDB[value];
                await guilds.update(server, guildData);
                return true;
            }
        }
    }
}
export function choose(choices) {
    return choices[Math.floor(choices.length * Math.random())];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkRnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hhcmVkRnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQXlCNUMsTUFBTSxDQUFDLEtBQUssVUFBVSxTQUFTLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjtJQUdoRSxJQUFJLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFRLENBQUM7SUFDN0QsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDakMsT0FBTyxTQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDN0I7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQzVCLEtBQWEsRUFDYixRQUFnQixFQUNoQixNQUFjLEVBQ2QsUUFBZ0I7SUFFaEIsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLElBQUksU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQVEsQ0FBQztJQUNoRCxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFRLENBQUM7SUFFdkMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDakMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNsQztRQUdELE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDeEM7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQzVCLEtBQWEsRUFDYixRQUFnQixFQUNoQixNQUFjLEVBQ2QsUUFBZ0I7SUFFaEIsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLElBQUksU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQVEsQ0FBQztJQUNoRCxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFRLENBQUM7SUFFNUMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDakMsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFFaEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUN4QyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxPQUFzQjtJQUMzQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM3RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHJvYmFibHkgYSByYWNlIGZ1bmN0aW9uIGJ1dCB3aG8gY2FyZXNcbi8vaW1wb3J0IHsgQm90IH0gZnJvbSBcIi4uLy4uL2JvdC50c1wiO1xuaW1wb3J0IHsgZ3VpbGRzIH0gZnJvbSBcIi4uL2RhdGFiYXNlL21vZC50c1wiO1xuXG4vL2NvbnNvbGUubG9nKGF3YWl0IGd1aWxkcy5nZXRBbGwoKSk7XG5cbi8qXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlR3VpbGRzKCkge1xuICAoYXdhaXQgQm90LmFjdGl2ZUd1aWxkSWRzKS5mb3JFYWNoKChndWlsZElEKSA9PiB7XG4gICAgaWYgKCFzZXJ2ZXJzW2d1aWxkSUQudG9TdHJpbmcoKV0pIHtcbiAgICAgIHNlcnZlcnNbZ3VpbGRJRC50b1N0cmluZygpXSA9IHtcbiAgICAgICAgXCJyYXBpc3REQlwiOiB7fSxcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbiovXG5cbi8vY29uc29sZS5sb2coYXdhaXQgdHlwZW9mIGd1aWxkcy5nZXQoXCIxMDAxMjEwNjQzNDg1MDM2NjM0XCIpKVxuLypcbmd1aWxkcy51cGRhdGUoXCIxMDIwNDE5MDQxNzQxMDAwNzA1XCIsIHtcbiAgcmFwaXN0REI6IHtcbiAgICBcImxvbFwiOiA2ODEwOTYzMzYzOTI1ODUyNTUsXG4gIH0sXG59KTtcbiovXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWYWx1ZXMoc2VydmVySUQ6IGJpZ2ludCwgZGF0YWJhc2U6IHN0cmluZykge1xuICAvLyBhbGwgdXNlbGVzcyBidXQgc3VjaCBpcyB0aGUgY3Vyc2Ugb2YgdHlwZXNjcmlwdFxuXG4gIGxldCBndWlsZERhdGEgPSBhd2FpdCBndWlsZHMuZ2V0KHNlcnZlcklELnRvU3RyaW5nKCkpIGFzIGFueTtcbiAgaWYgKHR5cGVvZiBndWlsZERhdGEgPT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gZ3VpbGREYXRhIVtkYXRhYmFzZV07XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFZhbHVlKFxuICB2YWx1ZTogc3RyaW5nLFxuICBzZXJ2ZXJJRDogYmlnaW50LFxuICB1c2VySUQ6IGJpZ2ludCxcbiAgZGF0YWJhc2U6IHN0cmluZyxcbikge1xuICBsZXQgc2VydmVyID0gc2VydmVySUQudG9TdHJpbmcoKTtcbiAgbGV0IGd1aWxkRGF0YSA9IGF3YWl0IGd1aWxkcy5nZXQoc2VydmVyKSBhcyBhbnk7XG4gIGxldCB0YWJsZSA9IGd1aWxkRGF0YVtkYXRhYmFzZV0gYXMgYW55O1xuXG4gIGlmICh0eXBlb2YgZ3VpbGREYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKHR5cGVvZiB0YWJsZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgdGFibGVbdmFsdWVdID0gdXNlcklELnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLy8gaWRlYWxseSB0aGlzIHNob3VsZCBiZSBjYWxsZWQgb25jZSB0aGUgYm90IHNodXRzIGRvd25cbiAgICBhd2FpdCBndWlsZHMudXBkYXRlKHNlcnZlciwgZ3VpbGREYXRhKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsVmFsdWUoXG4gIHZhbHVlOiBzdHJpbmcsXG4gIHNlcnZlcklEOiBiaWdpbnQsXG4gIHVzZXJJRDogYmlnaW50LFxuICBkYXRhYmFzZTogc3RyaW5nLFxuKSB7XG4gIGxldCBzZXJ2ZXIgPSBzZXJ2ZXJJRC50b1N0cmluZygpO1xuICBsZXQgZ3VpbGREYXRhID0gYXdhaXQgZ3VpbGRzLmdldChzZXJ2ZXIpIGFzIGFueTtcbiAgbGV0IHJhcGlzdERCID0gZ3VpbGREYXRhW1wicmFwaXN0REJcIl0gYXMgYW55O1xuXG4gIGlmICh0eXBlb2YgZ3VpbGREYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKHR5cGVvZiByYXBpc3REQiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgLy8gY2hlY2tzIGlmIGl0IGV4aXN0cyBBTkQgY2hlY2tzIGlmIGNhbiBiZSBkZWxldGVkIChJJ2xsIG1ha2UgaXQgY2hlY2sgaWYgeW91J3JlIGFuIGFkbWluIGxhdGVyKVxuICAgICAgaWYgKHJhcGlzdERCW3ZhbHVlXSA9PSB1c2VySUQudG9TdHJpbmcoKSkge1xuICAgICAgICBkZWxldGUgcmFwaXN0REJbdmFsdWVdO1xuICAgICAgICBhd2FpdCBndWlsZHMudXBkYXRlKHNlcnZlciwgZ3VpbGREYXRhKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNob29zZShjaG9pY2VzOiBBcnJheTxzdHJpbmc+KSB7XG4gIHJldHVybiBjaG9pY2VzW01hdGguZmxvb3IoY2hvaWNlcy5sZW5ndGggKiBNYXRoLnJhbmRvbSgpKV07XG59XG4iXX0=