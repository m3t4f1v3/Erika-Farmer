import { guilds } from "../database/mod.ts";
import { BitwisePermissionFlags } from "../../deps.ts";
const deleteLogs = await Deno.open("./deleteLogs.txt", {
    append: true,
    create: true,
});
const encoder = new TextEncoder();
export async function getValues(serverID, database) {
    let guildData = await guilds.get(serverID.toString());
    if (typeof guildData === "object") {
        return guildData[database];
    }
    else {
        return false;
    }
}
export async function addValue(value, serverID, userID, database) {
    let server = serverID.toString();
    let guildData = await guilds.get(server);
    let table = guildData[database];
    if (typeof guildData === "object") {
        if (typeof table === "object") {
            table[value] = userID.toString();
        }
        await guilds.update(server, guildData);
    }
}
export async function delValue(value, serverID, userID, permissions, database) {
    let server = serverID.toString();
    let guildData = await guilds.get(server);
    let table = guildData[database];
    if (typeof guildData === "object") {
        if (typeof table === "object") {
            if (table[value] == userID.toString() ||
                (permissions &
                    BigInt(BitwisePermissionFlags.MANAGE_MESSAGES) &&
                    table[value] !== undefined)) {
                delete table[value];
                await Deno.writeAll(deleteLogs, encoder.encode(`${value}:${userID.toString()}`));
                await guilds.update(server, guildData);
                return true;
            }
        }
    }
}
export function choose(choices) {
    return choices[Math.floor(choices.length * Math.random())];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkRnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hhcmVkRnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFpQnZELE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtJQUNyRCxNQUFNLEVBQUUsSUFBSTtJQUNaLE1BQU0sRUFBRSxJQUFJO0NBQ2IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUVsQyxNQUFNLENBQUMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxRQUFnQixFQUFFLFFBQWdCO0lBR2hFLElBQUksU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQVEsQ0FBQztJQUM3RCxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUNqQyxPQUFPLFNBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM3QjtTQUFNO1FBQ0wsT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDNUIsS0FBYSxFQUNiLFFBQWdCLEVBQ2hCLE1BQWMsRUFDZCxRQUFnQjtJQUVoQixJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakMsSUFBSSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBUSxDQUFDO0lBQ2hELElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQVEsQ0FBQztJQUV2QyxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUNqQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2xDO1FBR0QsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztLQUN4QztBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FDNUIsS0FBYSxFQUNiLFFBQWdCLEVBQ2hCLE1BQWMsRUFDZCxXQUFtQixFQUNuQixRQUFnQjtJQUVoQixJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakMsSUFBSSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBUSxDQUFDO0lBQ2hELElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQVEsQ0FBQztJQUV2QyxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUNqQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixJQUNFLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUNqQyxDQUFDLFdBQVc7b0JBQ1IsTUFBTSxDQUFDLHNCQUFzQixDQUFDLGVBQWUsQ0FBQztvQkFDaEQsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsQ0FBQyxFQUM3QjtnQkFDQSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDcEIsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUNqQixVQUFVLEVBQ1YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUNoRCxDQUFDO2dCQUNGLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ3ZDLE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjtLQUNGO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsT0FBc0I7SUFDM0MsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHByb2JhYmx5IGEgcmFjZSBjb25kaXRpb24gYnV0IHdobyBjYXJlc1xuLy9pbXBvcnQgeyBCb3QgfSBmcm9tIFwiLi4vLi4vYm90LnRzXCI7XG5pbXBvcnQgeyBndWlsZHMgfSBmcm9tIFwiLi4vZGF0YWJhc2UvbW9kLnRzXCI7XG5pbXBvcnQgeyBCaXR3aXNlUGVybWlzc2lvbkZsYWdzIH0gZnJvbSBcIi4uLy4uL2RlcHMudHNcIjtcbi8vY29uc29sZS5sb2coYXdhaXQgZ3VpbGRzLmdldEFsbCgpKTtcblxuLypcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVHdWlsZHMoKSB7XG4gIChhd2FpdCBCb3QuYWN0aXZlR3VpbGRJZHMpLmZvckVhY2goKGd1aWxkSUQpID0+IHtcbiAgICBpZiAoIXNlcnZlcnNbZ3VpbGRJRC50b1N0cmluZygpXSkge1xuICAgICAgc2VydmVyc1tndWlsZElELnRvU3RyaW5nKCldID0ge1xuICAgICAgICBcInJhcGlzdERCXCI6IHt9LFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuKi9cblxuLy9jb25zb2xlLmxvZyhhd2FpdCB0eXBlb2YgZ3VpbGRzLmdldChcIjEwMDEyMTA2NDM0ODUwMzY2MzRcIikpXG5cbmNvbnN0IGRlbGV0ZUxvZ3MgPSBhd2FpdCBEZW5vLm9wZW4oXCIuL2RlbGV0ZUxvZ3MudHh0XCIsIHtcbiAgYXBwZW5kOiB0cnVlLFxuICBjcmVhdGU6IHRydWUsXG59KTtcblxuY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmFsdWVzKHNlcnZlcklEOiBiaWdpbnQsIGRhdGFiYXNlOiBzdHJpbmcpIHtcbiAgLy8gYWxsIHVzZWxlc3MgYnV0IHN1Y2ggaXMgdGhlIGN1cnNlIG9mIHR5cGVzY3JpcHRcblxuICBsZXQgZ3VpbGREYXRhID0gYXdhaXQgZ3VpbGRzLmdldChzZXJ2ZXJJRC50b1N0cmluZygpKSBhcyBhbnk7XG4gIGlmICh0eXBlb2YgZ3VpbGREYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGd1aWxkRGF0YSFbZGF0YWJhc2VdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkVmFsdWUoXG4gIHZhbHVlOiBzdHJpbmcsXG4gIHNlcnZlcklEOiBiaWdpbnQsXG4gIHVzZXJJRDogYmlnaW50LFxuICBkYXRhYmFzZTogc3RyaW5nLFxuKSB7XG4gIGxldCBzZXJ2ZXIgPSBzZXJ2ZXJJRC50b1N0cmluZygpO1xuICBsZXQgZ3VpbGREYXRhID0gYXdhaXQgZ3VpbGRzLmdldChzZXJ2ZXIpIGFzIGFueTtcbiAgbGV0IHRhYmxlID0gZ3VpbGREYXRhW2RhdGFiYXNlXSBhcyBhbnk7XG5cbiAgaWYgKHR5cGVvZiBndWlsZERhdGEgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAodHlwZW9mIHRhYmxlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICB0YWJsZVt2YWx1ZV0gPSB1c2VySUQudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvLyBpZGVhbGx5IHRoaXMgc2hvdWxkIGJlIGNhbGxlZCBvbmNlIHRoZSBib3Qgc2h1dHMgZG93blxuICAgIGF3YWl0IGd1aWxkcy51cGRhdGUoc2VydmVyLCBndWlsZERhdGEpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxWYWx1ZShcbiAgdmFsdWU6IHN0cmluZyxcbiAgc2VydmVySUQ6IGJpZ2ludCxcbiAgdXNlcklEOiBiaWdpbnQsXG4gIHBlcm1pc3Npb25zOiBiaWdpbnQsXG4gIGRhdGFiYXNlOiBzdHJpbmcsXG4pIHtcbiAgbGV0IHNlcnZlciA9IHNlcnZlcklELnRvU3RyaW5nKCk7XG4gIGxldCBndWlsZERhdGEgPSBhd2FpdCBndWlsZHMuZ2V0KHNlcnZlcikgYXMgYW55O1xuICBsZXQgdGFibGUgPSBndWlsZERhdGFbZGF0YWJhc2VdIGFzIGFueTtcblxuICBpZiAodHlwZW9mIGd1aWxkRGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgIGlmICh0eXBlb2YgdGFibGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGFibGVbdmFsdWVdID09IHVzZXJJRC50b1N0cmluZygpIHx8XG4gICAgICAgIChwZXJtaXNzaW9ucyAmXG4gICAgICAgICAgICBCaWdJbnQoQml0d2lzZVBlcm1pc3Npb25GbGFncy5NQU5BR0VfTUVTU0FHRVMpICYmXG4gICAgICAgICAgdGFibGVbdmFsdWVdICE9PSB1bmRlZmluZWQpXG4gICAgICApIHtcbiAgICAgICAgZGVsZXRlIHRhYmxlW3ZhbHVlXTtcbiAgICAgICAgYXdhaXQgRGVuby53cml0ZUFsbChcbiAgICAgICAgICBkZWxldGVMb2dzLFxuICAgICAgICAgIGVuY29kZXIuZW5jb2RlKGAke3ZhbHVlfToke3VzZXJJRC50b1N0cmluZygpfWApLFxuICAgICAgICApO1xuICAgICAgICBhd2FpdCBndWlsZHMudXBkYXRlKHNlcnZlciwgZ3VpbGREYXRhKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaG9vc2UoY2hvaWNlczogQXJyYXk8c3RyaW5nPikge1xuICByZXR1cm4gY2hvaWNlc1tNYXRoLmZsb29yKGNob2ljZXMubGVuZ3RoICogTWF0aC5yYW5kb20oKSldO1xufVxuIl19