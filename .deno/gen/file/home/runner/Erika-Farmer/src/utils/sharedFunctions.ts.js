import { guilds } from "../database/mod.ts";
export async function getValues(serverID, database) {
    let guildData = await guilds.get(serverID.toString());
    if (typeof guildData === "object") {
        return guildData[database];
    }
}
export async function addValue(value, serverID, userID, database) {
    let server = serverID.toString();
    let guildData = await guilds.get(server);
    let table = guildData[database];
    if (typeof guildData === "object") {
        if (typeof table === "object") {
            table[value] = userID.toString();
        }
        await guilds.update(server, guildData);
    }
}
export async function delValue(value, serverID, userID, database) {
    let server = serverID.toString();
    let guildData = await guilds.get(server);
    let rapistDB = guildData["rapistDB"];
    if (typeof guildData === "object") {
        if (typeof rapistDB === "object") {
            if (rapistDB[value] == userID.toString()) {
                delete rapistDB[value];
                await guilds.update(server, guildData);
            }
        }
    }
}
export function choose(choices) {
    return choices[Math.floor(choices.length * Math.random())];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkRnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hhcmVkRnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQXlCNUMsTUFBTSxDQUFDLEtBQUssVUFBVSxTQUFTLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjtJQUdoRSxJQUFJLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFRLENBQUM7SUFDN0QsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDakMsT0FBTyxTQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDN0I7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQzVCLEtBQWEsRUFDYixRQUFnQixFQUNoQixNQUFjLEVBQ2QsUUFBZ0I7SUFFaEIsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLElBQUksU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQVEsQ0FBQztJQUNoRCxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFRLENBQUM7SUFFdkMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDakMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNsQztRQUdELE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDeEM7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQzVCLEtBQWEsRUFDYixRQUFnQixFQUNoQixNQUFjLEVBQ2QsUUFBZ0I7SUFFaEIsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLElBQUksU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQVEsQ0FBQztJQUNoRCxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFRLENBQUM7SUFFNUMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDakMsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFFaEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUN4QyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQzthQUN4QztTQUNGO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxPQUFzQjtJQUMzQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM3RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcHJvYmFibHkgYSByYWNlIGZ1bmN0aW9uIGJ1dCB3aG8gY2FyZXNcbmltcG9ydCB7IEJvdCB9IGZyb20gXCIuLi8uLi9ib3QudHNcIjtcbmltcG9ydCB7IGd1aWxkcyB9IGZyb20gXCIuLi9kYXRhYmFzZS9tb2QudHNcIjtcblxuLy9jb25zb2xlLmxvZyhhd2FpdCBndWlsZHMuZ2V0QWxsKCkpO1xuXG4vKlxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUd1aWxkcygpIHtcbiAgKGF3YWl0IEJvdC5hY3RpdmVHdWlsZElkcykuZm9yRWFjaCgoZ3VpbGRJRCkgPT4ge1xuICAgIGlmICghc2VydmVyc1tndWlsZElELnRvU3RyaW5nKCldKSB7XG4gICAgICBzZXJ2ZXJzW2d1aWxkSUQudG9TdHJpbmcoKV0gPSB7XG4gICAgICAgIFwicmFwaXN0REJcIjoge30sXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG4qL1xuXG4vL2NvbnNvbGUubG9nKGF3YWl0IHR5cGVvZiBndWlsZHMuZ2V0KFwiMTAwMTIxMDY0MzQ4NTAzNjYzNFwiKSlcbi8qXG5ndWlsZHMudXBkYXRlKFwiMTAyMDQxOTA0MTc0MTAwMDcwNVwiLCB7XG4gIHJhcGlzdERCOiB7XG4gICAgXCJsb2xcIjogNjgxMDk2MzM2MzkyNTg1MjU1LFxuICB9LFxufSk7XG4qL1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmFsdWVzKHNlcnZlcklEOiBiaWdpbnQsIGRhdGFiYXNlOiBzdHJpbmcpIHtcbiAgLy8gYWxsIHVzZWxlc3MgYnV0IHN1Y2ggaXMgdGhlIGN1cnNlIG9mIHR5cGVzY3JpcHRcblxuICBsZXQgZ3VpbGREYXRhID0gYXdhaXQgZ3VpbGRzLmdldChzZXJ2ZXJJRC50b1N0cmluZygpKSBhcyBhbnk7XG4gIGlmICh0eXBlb2YgZ3VpbGREYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGd1aWxkRGF0YSFbZGF0YWJhc2VdO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRWYWx1ZShcbiAgdmFsdWU6IHN0cmluZyxcbiAgc2VydmVySUQ6IGJpZ2ludCxcbiAgdXNlcklEOiBiaWdpbnQsXG4gIGRhdGFiYXNlOiBzdHJpbmcsXG4pIHtcbiAgbGV0IHNlcnZlciA9IHNlcnZlcklELnRvU3RyaW5nKCk7XG4gIGxldCBndWlsZERhdGEgPSBhd2FpdCBndWlsZHMuZ2V0KHNlcnZlcikgYXMgYW55O1xuICBsZXQgdGFibGUgPSBndWlsZERhdGFbZGF0YWJhc2VdIGFzIGFueTtcblxuICBpZiAodHlwZW9mIGd1aWxkRGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgIGlmICh0eXBlb2YgdGFibGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRhYmxlW3ZhbHVlXSA9IHVzZXJJRC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIC8vIGlkZWFsbHkgdGhpcyBzaG91bGQgYmUgY2FsbGVkIG9uY2UgdGhlIGJvdCBzaHV0cyBkb3duXG4gICAgYXdhaXQgZ3VpbGRzLnVwZGF0ZShzZXJ2ZXIsIGd1aWxkRGF0YSk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbFZhbHVlKFxuICB2YWx1ZTogc3RyaW5nLFxuICBzZXJ2ZXJJRDogYmlnaW50LFxuICB1c2VySUQ6IGJpZ2ludCxcbiAgZGF0YWJhc2U6IHN0cmluZyxcbikge1xuICBsZXQgc2VydmVyID0gc2VydmVySUQudG9TdHJpbmcoKTtcbiAgbGV0IGd1aWxkRGF0YSA9IGF3YWl0IGd1aWxkcy5nZXQoc2VydmVyKSBhcyBhbnk7XG4gIGxldCByYXBpc3REQiA9IGd1aWxkRGF0YVtcInJhcGlzdERCXCJdIGFzIGFueTtcblxuICBpZiAodHlwZW9mIGd1aWxkRGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgIGlmICh0eXBlb2YgcmFwaXN0REIgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIC8vIGNoZWNrcyBpZiBpdCBleGlzdHMgQU5EIGNoZWNrcyBpZiBjYW4gYmUgZGVsZXRlZCAoSSdsbCBtYWtlIGl0IGNoZWNrIGlmIHlvdSdyZSBhbiBhZG1pbiBsYXRlcilcbiAgICAgIGlmIChyYXBpc3REQlt2YWx1ZV0gPT0gdXNlcklELnRvU3RyaW5nKCkpIHtcbiAgICAgICAgZGVsZXRlIHJhcGlzdERCW3ZhbHVlXTtcbiAgICAgICAgYXdhaXQgZ3VpbGRzLnVwZGF0ZShzZXJ2ZXIsIGd1aWxkRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaG9vc2UoY2hvaWNlczogQXJyYXk8c3RyaW5nPikge1xuICByZXR1cm4gY2hvaWNlc1tNYXRoLmZsb29yKGNob2ljZXMubGVuZ3RoICogTWF0aC5yYW5kb20oKSldO1xufVxuIl19