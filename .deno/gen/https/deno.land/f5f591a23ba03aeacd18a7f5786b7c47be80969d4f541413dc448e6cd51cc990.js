export async function updateBotVoiceState(bot, guildId, options) {
    await bot.rest.runMethod(bot.rest, "PATCH", bot.constants.routes.UPDATE_VOICE_STATE(guildId), {
        channel_id: options.channelId,
        suppress: options.suppress,
        request_to_speak_timestamp: options.requestToSpeakTimestamp
            ? new Date(options.requestToSpeakTimestamp).toISOString()
            : options.requestToSpeakTimestamp,
    });
}
export async function updateUserVoiceState(bot, guildId, options) {
    await bot.rest.runMethod(bot.rest, "PATCH", bot.constants.routes.UPDATE_VOICE_STATE(guildId, options.userId), {
        channel_id: options.channelId,
        suppress: options.suppress,
        user_id: options.userId,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlVm9pY2VTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVZvaWNlU3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWUEsTUFBTSxDQUFDLEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxHQUFRLEVBQUUsT0FBZSxFQUFFLE9BQTZCO0lBQ2hHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDNUYsVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUFTO1FBQzdCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUMxQiwwQkFBMEIsRUFBRSxPQUFPLENBQUMsdUJBQXVCO1lBQ3pELENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxXQUFXLEVBQUU7WUFDekQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUI7S0FDcEMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQWFELE1BQU0sQ0FBQyxLQUFLLFVBQVUsb0JBQW9CLENBQUMsR0FBUSxFQUFFLE9BQWUsRUFBRSxPQUErQjtJQUNuRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUN0QixHQUFHLENBQUMsSUFBSSxFQUNSLE9BQU8sRUFDUCxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUNoRTtRQUNFLFVBQVUsRUFBRSxPQUFPLENBQUMsU0FBUztRQUM3QixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxNQUFNO0tBQ3hCLENBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJvdCB9IGZyb20gXCIuLi8uLi9ib3QudHNcIjtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBib3QncyB2b2ljZSBzdGF0ZVxuICogQ2F2ZWF0czpcbiAqICAtIGBjaGFubmVsX2lkYCBtdXN0IGN1cnJlbnRseSBwb2ludCB0byBhIHN0YWdlIGNoYW5uZWwuXG4gKiAgLSBCb3QgbXVzdCBhbHJlYWR5IGhhdmUgam9pbmVkIGBjaGFubmVsX2lkYC5cbiAqICAtIFlvdSBtdXN0IGhhdmUgdGhlIGBNVVRFX01FTUJFUlNgIHBlcm1pc3Npb24uIEJ1dCBjYW4gYWx3YXlzIHN1cHByZXNzIHlvdXJzZWxmLlxuICogIC0gWW91IG11c3QgaGF2ZSB0aGUgYFJFUVVFU1RfVE9fU1BFQUtgIHBlcm1pc3Npb24gdG8gcmVxdWVzdCB0byBzcGVhay4gWW91IGNhbiBhbHdheXMgY2xlYXIgeW91ciBvd24gcmVxdWVzdCB0byBzcGVhay5cbiAqICAtIFlvdSBhcmUgYWJsZSB0byBzZXQgYHJlcXVlc3RfdG9fc3BlYWtfdGltZXN0YW1wYCB0byBhbnkgcHJlc2VudCBvciBmdXR1cmUgdGltZS5cbiAqICAtIFdoZW4gc3VwcHJlc3NlZCwgdGhlIHVzZXIgd2lsbCBoYXZlIHRoZWlyIGByZXF1ZXN0X3RvX3NwZWFrX3RpbWVzdGFtcGAgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUJvdFZvaWNlU3RhdGUoYm90OiBCb3QsIGd1aWxkSWQ6IGJpZ2ludCwgb3B0aW9uczogVXBkYXRlU2VsZlZvaWNlU3RhdGUpIHtcbiAgYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kKGJvdC5yZXN0LCBcIlBBVENIXCIsIGJvdC5jb25zdGFudHMucm91dGVzLlVQREFURV9WT0lDRV9TVEFURShndWlsZElkKSwge1xuICAgIGNoYW5uZWxfaWQ6IG9wdGlvbnMuY2hhbm5lbElkLFxuICAgIHN1cHByZXNzOiBvcHRpb25zLnN1cHByZXNzLFxuICAgIHJlcXVlc3RfdG9fc3BlYWtfdGltZXN0YW1wOiBvcHRpb25zLnJlcXVlc3RUb1NwZWFrVGltZXN0YW1wXG4gICAgICA/IG5ldyBEYXRlKG9wdGlvbnMucmVxdWVzdFRvU3BlYWtUaW1lc3RhbXApLnRvSVNPU3RyaW5nKClcbiAgICAgIDogb3B0aW9ucy5yZXF1ZXN0VG9TcGVha1RpbWVzdGFtcCxcbiAgfSk7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgYSB1c2VyJ3Mgdm9pY2Ugc3RhdGVcbiAqIENhdmVhdHM6XG4gKiAgLSBgY2hhbm5lbF9pZGAgbXVzdCBjdXJyZW50bHkgcG9pbnQgdG8gYSBzdGFnZSBjaGFubmVsLlxuICogIC0gVXNlciBtdXN0IGFscmVhZHkgaGF2ZSBqb2luZWQgYGNoYW5uZWxfaWRgLlxuICogIC0gWW91IG11c3QgaGF2ZSB0aGUgYE1VVEVfTUVNQkVSU2AgcGVybWlzc2lvbi4gQnV0IGNhbiBhbHdheXMgc3VwcHJlc3MgeW91cnNlbGYuXG4gKiAgLSBXaGVuIHVuc3VwcHJlc3NlZCwgbm9uLWJvdCB1c2VycyB3aWxsIGhhdmUgdGhlaXIgYHJlcXVlc3RfdG9fc3BlYWtfdGltZXN0YW1wYCBzZXQgdG8gdGhlIGN1cnJlbnQgdGltZS4gQm90IHVzZXJzIHdpbGwgbm90LlxuICogIC0gWW91IG11c3QgaGF2ZSB0aGUgYFJFUVVFU1RfVE9fU1BFQUtgIHBlcm1pc3Npb24gdG8gcmVxdWVzdCB0byBzcGVhay4gWW91IGNhbiBhbHdheXMgY2xlYXIgeW91ciBvd24gcmVxdWVzdCB0byBzcGVhay5cbiAqICAtIFlvdSBhcmUgYWJsZSB0byBzZXQgYHJlcXVlc3RfdG9fc3BlYWtfdGltZXN0YW1wYCB0byBhbnkgcHJlc2VudCBvciBmdXR1cmUgdGltZS5cbiAqICAtIFdoZW4gc3VwcHJlc3NlZCwgdGhlIHVzZXIgd2lsbCBoYXZlIHRoZWlyIGByZXF1ZXN0X3RvX3NwZWFrX3RpbWVzdGFtcGAgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVVzZXJWb2ljZVN0YXRlKGJvdDogQm90LCBndWlsZElkOiBiaWdpbnQsIG9wdGlvbnM6IFVwZGF0ZU90aGVyc1ZvaWNlU3RhdGUpIHtcbiAgYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kKFxuICAgIGJvdC5yZXN0LFxuICAgIFwiUEFUQ0hcIixcbiAgICBib3QuY29uc3RhbnRzLnJvdXRlcy5VUERBVEVfVk9JQ0VfU1RBVEUoZ3VpbGRJZCwgb3B0aW9ucy51c2VySWQpLFxuICAgIHtcbiAgICAgIGNoYW5uZWxfaWQ6IG9wdGlvbnMuY2hhbm5lbElkLFxuICAgICAgc3VwcHJlc3M6IG9wdGlvbnMuc3VwcHJlc3MsXG4gICAgICB1c2VyX2lkOiBvcHRpb25zLnVzZXJJZCxcbiAgICB9LFxuICApO1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2d1aWxkI3VwZGF0ZS1jdXJyZW50LXVzZXItdm9pY2Utc3RhdGUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlU2VsZlZvaWNlU3RhdGUge1xuICAvKiogVGhlIGlkIG9mIHRoZSBjaGFubmVsIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBpbiAqL1xuICBjaGFubmVsSWQ6IGJpZ2ludDtcbiAgLyoqIFRvZ2dsZXMgdGhlIHVzZXIncyBzdXBwcmVzcyBzdGF0ZSAqL1xuICBzdXBwcmVzcz86IGJvb2xlYW47XG4gIC8qKiBTZXRzIHRoZSB1c2VyJ3MgcmVxdWVzdCB0byBzcGVhayAqL1xuICByZXF1ZXN0VG9TcGVha1RpbWVzdGFtcD86IG51bWJlciB8IG51bGw7XG59XG5cbi8qKiBodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvZ3VpbGQjdXBkYXRlLXVzZXItdm9pY2Utc3RhdGUgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlT3RoZXJzVm9pY2VTdGF0ZSB7XG4gIC8qKiBUaGUgaWQgb2YgdGhlIGNoYW5uZWwgdGhlIHVzZXIgaXMgY3VycmVudGx5IGluICovXG4gIGNoYW5uZWxJZDogYmlnaW50O1xuICAvKiogVG9nZ2xlcyB0aGUgdXNlcidzIHN1cHByZXNzIHN0YXRlICovXG4gIHN1cHByZXNzPzogYm9vbGVhbjtcbiAgLyoqIFRoZSB1c2VyIGlkIHRvIHRhcmdldCAqL1xuICB1c2VySWQ6IGJpZ2ludDtcbn1cbiJdfQ==