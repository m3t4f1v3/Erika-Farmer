import { MemberToggles } from "./toggles/member.ts";
import { UserToggles } from "./toggles/user.ts";
export function transformUser(bot, payload) {
    const user = {
        id: bot.transformers.snowflake(payload.id || ""),
        username: payload.username,
        discriminator: payload.discriminator,
        avatar: payload.avatar ? bot.utils.iconHashToBigInt(payload.avatar) : undefined,
        locale: payload.locale,
        email: payload.email ?? undefined,
        flags: payload.flags,
        premiumType: payload.premium_type,
        publicFlags: payload.public_flags,
        toggles: new UserToggles(payload),
    };
    return user;
}
export function transformMember(bot, payload, guildId, userId) {
    const member = {
        id: userId,
        guildId,
        nick: payload.nick ?? undefined,
        roles: payload.roles.map((id) => bot.transformers.snowflake(id)),
        joinedAt: Date.parse(payload.joined_at),
        premiumSince: payload.premium_since ? Date.parse(payload.premium_since) : undefined,
        avatar: payload.avatar ? bot.utils.iconHashToBigInt(payload.avatar) : undefined,
        permissions: payload.permissions ? bot.transformers.snowflake(payload.permissions) : undefined,
        communicationDisabledUntil: payload.communication_disabled_until
            ? Date.parse(payload.communication_disabled_until)
            : undefined,
        toggles: new MemberToggles(payload),
    };
    return member;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVtYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHaEQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxHQUFRLEVBQUUsT0FBb0I7SUFDMUQsTUFBTSxJQUFJLEdBQUc7UUFDWCxFQUFFLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDaEQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQzFCLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtRQUNwQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7UUFDL0UsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxJQUFJLFNBQVM7UUFDakMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1FBQ3BCLFdBQVcsRUFBRSxPQUFPLENBQUMsWUFBWTtRQUNqQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFlBQVk7UUFDakMsT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQztLQUNsQyxDQUFDO0lBRUYsT0FBTyxJQUFnQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVEsRUFBRSxPQUFzQixFQUFFLE9BQWUsRUFBRSxNQUFjO0lBQy9GLE1BQU0sTUFBTSxHQUFHO1FBQ2IsRUFBRSxFQUFFLE1BQU07UUFDVixPQUFPO1FBQ1AsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUksU0FBUztRQUMvQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDdkMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ25GLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUMvRSxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQzlGLDBCQUEwQixFQUFFLE9BQU8sQ0FBQyw0QkFBNEI7WUFDOUQsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDO1lBQ2xELENBQUMsQ0FBQyxTQUFTO1FBQ2IsT0FBTyxFQUFFLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQztLQUNwQyxDQUFDO0lBRUYsT0FBTyxNQUFvQyxDQUFDO0FBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJvdCB9IGZyb20gXCIuLi9ib3QudHNcIjtcbmltcG9ydCB7IERpc2NvcmRNZW1iZXIsIERpc2NvcmRVc2VyIH0gZnJvbSBcIi4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IE1lbWJlclRvZ2dsZXMgfSBmcm9tIFwiLi90b2dnbGVzL21lbWJlci50c1wiO1xuaW1wb3J0IHsgVXNlclRvZ2dsZXMgfSBmcm9tIFwiLi90b2dnbGVzL3VzZXIudHNcIjtcbmltcG9ydCB7IE9wdGlvbmFsaXplIH0gZnJvbSBcIi4uL3R5cGVzL3NoYXJlZC50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtVXNlcihib3Q6IEJvdCwgcGF5bG9hZDogRGlzY29yZFVzZXIpIHtcbiAgY29uc3QgdXNlciA9IHtcbiAgICBpZDogYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5pZCB8fCBcIlwiKSxcbiAgICB1c2VybmFtZTogcGF5bG9hZC51c2VybmFtZSxcbiAgICBkaXNjcmltaW5hdG9yOiBwYXlsb2FkLmRpc2NyaW1pbmF0b3IsXG4gICAgYXZhdGFyOiBwYXlsb2FkLmF2YXRhciA/IGJvdC51dGlscy5pY29uSGFzaFRvQmlnSW50KHBheWxvYWQuYXZhdGFyKSA6IHVuZGVmaW5lZCxcbiAgICBsb2NhbGU6IHBheWxvYWQubG9jYWxlLFxuICAgIGVtYWlsOiBwYXlsb2FkLmVtYWlsID8/IHVuZGVmaW5lZCxcbiAgICBmbGFnczogcGF5bG9hZC5mbGFncyxcbiAgICBwcmVtaXVtVHlwZTogcGF5bG9hZC5wcmVtaXVtX3R5cGUsXG4gICAgcHVibGljRmxhZ3M6IHBheWxvYWQucHVibGljX2ZsYWdzLFxuICAgIHRvZ2dsZXM6IG5ldyBVc2VyVG9nZ2xlcyhwYXlsb2FkKSxcbiAgfTtcblxuICByZXR1cm4gdXNlciBhcyBPcHRpb25hbGl6ZTx0eXBlb2YgdXNlcj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NZW1iZXIoYm90OiBCb3QsIHBheWxvYWQ6IERpc2NvcmRNZW1iZXIsIGd1aWxkSWQ6IGJpZ2ludCwgdXNlcklkOiBiaWdpbnQpIHtcbiAgY29uc3QgbWVtYmVyID0ge1xuICAgIGlkOiB1c2VySWQsXG4gICAgZ3VpbGRJZCxcbiAgICBuaWNrOiBwYXlsb2FkLm5pY2sgPz8gdW5kZWZpbmVkLFxuICAgIHJvbGVzOiBwYXlsb2FkLnJvbGVzLm1hcCgoaWQpID0+IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKGlkKSksXG4gICAgam9pbmVkQXQ6IERhdGUucGFyc2UocGF5bG9hZC5qb2luZWRfYXQpLFxuICAgIHByZW1pdW1TaW5jZTogcGF5bG9hZC5wcmVtaXVtX3NpbmNlID8gRGF0ZS5wYXJzZShwYXlsb2FkLnByZW1pdW1fc2luY2UpIDogdW5kZWZpbmVkLFxuICAgIGF2YXRhcjogcGF5bG9hZC5hdmF0YXIgPyBib3QudXRpbHMuaWNvbkhhc2hUb0JpZ0ludChwYXlsb2FkLmF2YXRhcikgOiB1bmRlZmluZWQsXG4gICAgcGVybWlzc2lvbnM6IHBheWxvYWQucGVybWlzc2lvbnMgPyBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLnBlcm1pc3Npb25zKSA6IHVuZGVmaW5lZCxcbiAgICBjb21tdW5pY2F0aW9uRGlzYWJsZWRVbnRpbDogcGF5bG9hZC5jb21tdW5pY2F0aW9uX2Rpc2FibGVkX3VudGlsXG4gICAgICA/IERhdGUucGFyc2UocGF5bG9hZC5jb21tdW5pY2F0aW9uX2Rpc2FibGVkX3VudGlsKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgdG9nZ2xlczogbmV3IE1lbWJlclRvZ2dsZXMocGF5bG9hZCksXG4gIH07XG5cbiAgcmV0dXJuIG1lbWJlciBhcyBPcHRpb25hbGl6ZTx0eXBlb2YgbWVtYmVyPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZW1iZXIgZXh0ZW5kcyBSZXR1cm5UeXBlPHR5cGVvZiB0cmFuc2Zvcm1NZW1iZXI+IHt9XG5leHBvcnQgaW50ZXJmYWNlIFVzZXIgZXh0ZW5kcyBSZXR1cm5UeXBlPHR5cGVvZiB0cmFuc2Zvcm1Vc2VyPiB7fVxuIl19