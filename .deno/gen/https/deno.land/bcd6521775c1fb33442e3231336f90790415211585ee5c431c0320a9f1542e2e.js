import { MemberToggles } from "./toggles/member.ts";
import { UserToggles } from "./toggles/user.ts";
export function transformUser(bot, payload) {
    const user = {
        id: bot.transformers.snowflake(payload.id || ""),
        username: payload.username,
        discriminator: payload.discriminator,
        avatar: payload.avatar ? bot.utils.iconHashToBigInt(payload.avatar) : undefined,
        locale: payload.locale,
        email: payload.email ?? undefined,
        flags: payload.flags,
        premiumType: payload.premium_type,
        publicFlags: payload.public_flags,
        toggles: new UserToggles(payload)
    };
    return user;
}
export function transformMember(bot, payload, guildId, userId) {
    const member = {
        id: userId,
        guildId,
        nick: payload.nick ?? undefined,
        roles: payload.roles.map((id)=>bot.transformers.snowflake(id)
        ),
        joinedAt: Date.parse(payload.joined_at),
        premiumSince: payload.premium_since ? Date.parse(payload.premium_since) : undefined,
        avatar: payload.avatar ? bot.utils.iconHashToBigInt(payload.avatar) : undefined,
        permissions: payload.permissions ? bot.transformers.snowflake(payload.permissions) : undefined,
        communicationDisabledUntil: payload.communication_disabled_until ? Date.parse(payload.communication_disabled_until) : undefined,
        toggles: new MemberToggles(payload)
    };
    return member;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJvdCB9IGZyb20gXCIuLi9ib3QudHNcIjtcbmltcG9ydCB7IERpc2NvcmRNZW1iZXIsIERpc2NvcmRVc2VyIH0gZnJvbSBcIi4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IE1lbWJlclRvZ2dsZXMgfSBmcm9tIFwiLi90b2dnbGVzL21lbWJlci50c1wiO1xuaW1wb3J0IHsgVXNlclRvZ2dsZXMgfSBmcm9tIFwiLi90b2dnbGVzL3VzZXIudHNcIjtcbmltcG9ydCB7IE9wdGlvbmFsaXplIH0gZnJvbSBcIi4uL3R5cGVzL3NoYXJlZC50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtVXNlcihib3Q6IEJvdCwgcGF5bG9hZDogRGlzY29yZFVzZXIpIHtcbiAgY29uc3QgdXNlciA9IHtcbiAgICBpZDogYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5pZCB8fCBcIlwiKSxcbiAgICB1c2VybmFtZTogcGF5bG9hZC51c2VybmFtZSxcbiAgICBkaXNjcmltaW5hdG9yOiBwYXlsb2FkLmRpc2NyaW1pbmF0b3IsXG4gICAgYXZhdGFyOiBwYXlsb2FkLmF2YXRhciA/IGJvdC51dGlscy5pY29uSGFzaFRvQmlnSW50KHBheWxvYWQuYXZhdGFyKSA6IHVuZGVmaW5lZCxcbiAgICBsb2NhbGU6IHBheWxvYWQubG9jYWxlLFxuICAgIGVtYWlsOiBwYXlsb2FkLmVtYWlsID8/IHVuZGVmaW5lZCxcbiAgICBmbGFnczogcGF5bG9hZC5mbGFncyxcbiAgICBwcmVtaXVtVHlwZTogcGF5bG9hZC5wcmVtaXVtX3R5cGUsXG4gICAgcHVibGljRmxhZ3M6IHBheWxvYWQucHVibGljX2ZsYWdzLFxuICAgIHRvZ2dsZXM6IG5ldyBVc2VyVG9nZ2xlcyhwYXlsb2FkKSxcbiAgfTtcblxuICByZXR1cm4gdXNlciBhcyBPcHRpb25hbGl6ZTx0eXBlb2YgdXNlcj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NZW1iZXIoYm90OiBCb3QsIHBheWxvYWQ6IERpc2NvcmRNZW1iZXIsIGd1aWxkSWQ6IGJpZ2ludCwgdXNlcklkOiBiaWdpbnQpIHtcbiAgY29uc3QgbWVtYmVyID0ge1xuICAgIGlkOiB1c2VySWQsXG4gICAgZ3VpbGRJZCxcbiAgICBuaWNrOiBwYXlsb2FkLm5pY2sgPz8gdW5kZWZpbmVkLFxuICAgIHJvbGVzOiBwYXlsb2FkLnJvbGVzLm1hcCgoaWQpID0+IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKGlkKSksXG4gICAgam9pbmVkQXQ6IERhdGUucGFyc2UocGF5bG9hZC5qb2luZWRfYXQpLFxuICAgIHByZW1pdW1TaW5jZTogcGF5bG9hZC5wcmVtaXVtX3NpbmNlID8gRGF0ZS5wYXJzZShwYXlsb2FkLnByZW1pdW1fc2luY2UpIDogdW5kZWZpbmVkLFxuICAgIGF2YXRhcjogcGF5bG9hZC5hdmF0YXIgPyBib3QudXRpbHMuaWNvbkhhc2hUb0JpZ0ludChwYXlsb2FkLmF2YXRhcikgOiB1bmRlZmluZWQsXG4gICAgcGVybWlzc2lvbnM6IHBheWxvYWQucGVybWlzc2lvbnMgPyBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLnBlcm1pc3Npb25zKSA6IHVuZGVmaW5lZCxcbiAgICBjb21tdW5pY2F0aW9uRGlzYWJsZWRVbnRpbDogcGF5bG9hZC5jb21tdW5pY2F0aW9uX2Rpc2FibGVkX3VudGlsXG4gICAgICA/IERhdGUucGFyc2UocGF5bG9hZC5jb21tdW5pY2F0aW9uX2Rpc2FibGVkX3VudGlsKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgdG9nZ2xlczogbmV3IE1lbWJlclRvZ2dsZXMocGF5bG9hZCksXG4gIH07XG5cbiAgcmV0dXJuIG1lbWJlciBhcyBPcHRpb25hbGl6ZTx0eXBlb2YgbWVtYmVyPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZW1iZXIgZXh0ZW5kcyBSZXR1cm5UeXBlPHR5cGVvZiB0cmFuc2Zvcm1NZW1iZXI+IHt9XG5leHBvcnQgaW50ZXJmYWNlIFVzZXIgZXh0ZW5kcyBSZXR1cm5UeXBlPHR5cGVvZiB0cmFuc2Zvcm1Vc2VyPiB7fVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsYUFBYSxRQUFRLHFCQUFxQixDQUFDO0FBQ3BELFNBQVMsV0FBVyxRQUFRLG1CQUFtQixDQUFDO0FBR2hELE9BQU8sU0FBUyxhQUFhLENBQUMsR0FBUSxFQUFFLE9BQW9CLEVBQUU7SUFDNUQsTUFBTSxJQUFJLEdBQUc7UUFDWCxFQUFFLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDaEQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQzFCLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtRQUNwQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTO1FBQy9FLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtRQUN0QixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssSUFBSSxTQUFTO1FBQ2pDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztRQUNwQixXQUFXLEVBQUUsT0FBTyxDQUFDLFlBQVk7UUFDakMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxZQUFZO1FBQ2pDLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUM7S0FDbEMsQUFBQztJQUVGLE9BQU8sSUFBSSxDQUE2QjtDQUN6QztBQUVELE9BQU8sU0FBUyxlQUFlLENBQUMsR0FBUSxFQUFFLE9BQXNCLEVBQUUsT0FBZSxFQUFFLE1BQWMsRUFBRTtJQUNqRyxNQUFNLE1BQU0sR0FBRztRQUNiLEVBQUUsRUFBRSxNQUFNO1FBQ1YsT0FBTztRQUNQLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLFNBQVM7UUFDL0IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFLLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUFBLENBQUM7UUFDaEUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUN2QyxZQUFZLEVBQUUsT0FBTyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxTQUFTO1FBQ25GLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFNBQVM7UUFDL0UsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLFNBQVM7UUFDOUYsMEJBQTBCLEVBQUUsT0FBTyxDQUFDLDRCQUE0QixHQUM1RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxHQUNoRCxTQUFTO1FBQ2IsT0FBTyxFQUFFLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQztLQUNwQyxBQUFDO0lBRUYsT0FBTyxNQUFNLENBQStCO0NBQzdDIn0=