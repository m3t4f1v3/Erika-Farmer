export let uniqueFilePathCounter = 0;
export let paths = [];
export async function importDirectory(path) {
    path = path.replaceAll("\\", "/");
    const files = Deno.readDirSync(Deno.realPathSync(path));
    for (const file of files) {
        if (!file.name)
            continue;
        const currentPath = `${path}/${file.name}`;
        if (file.isFile) {
            if (!currentPath.endsWith(".ts"))
                continue;
            paths.push(`import "${Deno.mainModule.substring(0, Deno.mainModule.lastIndexOf("/"))}/${currentPath.substring(currentPath.indexOf("src/"))}#${uniqueFilePathCounter}";`);
            continue;
        }
        await importDirectory(currentPath);
    }
    uniqueFilePathCounter++;
}
export async function fileLoader() {
    await Deno.writeTextFile("fileloader.ts", paths.join("\n").replaceAll("\\", "/"));
    await import(`${Deno.mainModule.substring(0, Deno.mainModule.lastIndexOf("/"))}/fileloader.ts#${uniqueFilePathCounter}`);
    paths = [];
}
export async function fastFileLoader(paths, between, before) {
    await Promise.all([...paths].map((path) => {
        if (between)
            between(path, uniqueFilePathCounter, paths);
        importDirectory(path);
    }));
    if (before)
        before(uniqueFilePathCounter, paths);
    await fileLoader();
}
export function enableFileLoaderPlugin(rawBot) {
    const bot = rawBot;
    bot.importDirectory = importDirectory;
    bot.fileLoader = fileLoader;
    bot.fastFileLoader = fastFileLoader;
    return bot;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixHQUFHLENBQUMsQ0FBQztBQUNyQyxNQUFNLENBQUMsSUFBSSxLQUFLLEdBQWEsRUFBRSxDQUFDO0FBS2hDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsZUFBZSxDQUFDLElBQVk7SUFDaEQsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXhELEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUFFLFNBQVM7UUFFekIsTUFBTSxXQUFXLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFBRSxTQUFTO1lBQzNDLEtBQUssQ0FBQyxJQUFJLENBQ1IsV0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFDdkUsV0FBVyxDQUFDLFNBQVMsQ0FDbkIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FFL0IsSUFBSSxxQkFBcUIsSUFBSSxDQUM5QixDQUFDO1lBQ0YsU0FBUztTQUNWO1FBR0QsTUFBTSxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDcEM7SUFFRCxxQkFBcUIsRUFBRSxDQUFDO0FBQzFCLENBQUM7QUFHRCxNQUFNLENBQUMsS0FBSyxVQUFVLFVBQVU7SUFDOUIsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRixNQUFNLE1BQU0sQ0FDVixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IscUJBQXFCLEVBQUUsQ0FDM0csQ0FBQztJQUNGLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDYixDQUFDO0FBR0QsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjLENBRWxDLEtBQWUsRUFJZixPQUFnRixFQUVoRixNQUFpRTtJQUVqRSxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ3RCLElBQUksT0FBTztZQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekQsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixJQUFJLE1BQU07UUFBRSxNQUFNLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFakQsTUFBTSxVQUFVLEVBQUUsQ0FBQztBQUNyQixDQUFDO0FBMEJELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxNQUFXO0lBQ2hELE1BQU0sR0FBRyxHQUFHLE1BQTJCLENBQUM7SUFFeEMsR0FBRyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7SUFDdEMsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDNUIsR0FBRyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFFcEMsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm90IH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuXG4vLyBpTXBPclRhTnQgdG8gbWFrZSBzdXJlIGZpbGVzIGNhbiBiZSByZWxvYWRlZCBwcm9wZXJseSFcbmV4cG9ydCBsZXQgdW5pcXVlRmlsZVBhdGhDb3VudGVyID0gMDtcbmV4cG9ydCBsZXQgcGF0aHM6IHN0cmluZ1tdID0gW107XG5cbi8qKiBSZWN1cnNpdmVseSBnZW5lcmF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHBhdGhzIHRvIGltcG9ydCB1c2luZyBgZmlsZUxvYWRlcigpYFxuICogKCoqSXMqKiB3aW5kb3dzIGNvbXBhdGlibGUpXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnREaXJlY3RvcnkocGF0aDogc3RyaW5nKSB7XG4gIHBhdGggPSBwYXRoLnJlcGxhY2VBbGwoXCJcXFxcXCIsIFwiL1wiKTtcbiAgY29uc3QgZmlsZXMgPSBEZW5vLnJlYWREaXJTeW5jKERlbm8ucmVhbFBhdGhTeW5jKHBhdGgpKTtcblxuICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICBpZiAoIWZpbGUubmFtZSkgY29udGludWU7XG5cbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IGAke3BhdGh9LyR7ZmlsZS5uYW1lfWA7XG4gICAgaWYgKGZpbGUuaXNGaWxlKSB7XG4gICAgICBpZiAoIWN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiLnRzXCIpKSBjb250aW51ZTtcbiAgICAgIHBhdGhzLnB1c2goXG4gICAgICAgIGBpbXBvcnQgXCIke0Rlbm8ubWFpbk1vZHVsZS5zdWJzdHJpbmcoMCwgRGVuby5tYWluTW9kdWxlLmxhc3RJbmRleE9mKFwiL1wiKSl9LyR7XG4gICAgICAgICAgY3VycmVudFBhdGguc3Vic3RyaW5nKFxuICAgICAgICAgICAgY3VycmVudFBhdGguaW5kZXhPZihcInNyYy9cIiksXG4gICAgICAgICAgKVxuICAgICAgICB9IyR7dW5pcXVlRmlsZVBhdGhDb3VudGVyfVwiO2AsXG4gICAgICApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gUmVjdXJzaXZlIGZ1bmN0aW9uIVxuICAgIGF3YWl0IGltcG9ydERpcmVjdG9yeShjdXJyZW50UGF0aCk7XG4gIH1cblxuICB1bmlxdWVGaWxlUGF0aENvdW50ZXIrKztcbn1cblxuLyoqIFdyaXRlcywgdGhlbiBpbXBvcnRzIGFsbCBldmVyeXRoaW5nIGluIGZpbGVsb2FkZXIudHMgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaWxlTG9hZGVyKCkge1xuICBhd2FpdCBEZW5vLndyaXRlVGV4dEZpbGUoXCJmaWxlbG9hZGVyLnRzXCIsIHBhdGhzLmpvaW4oXCJcXG5cIikucmVwbGFjZUFsbChcIlxcXFxcIiwgXCIvXCIpKTtcbiAgYXdhaXQgaW1wb3J0KFxuICAgIGAke0Rlbm8ubWFpbk1vZHVsZS5zdWJzdHJpbmcoMCwgRGVuby5tYWluTW9kdWxlLmxhc3RJbmRleE9mKFwiL1wiKSl9L2ZpbGVsb2FkZXIudHMjJHt1bmlxdWVGaWxlUGF0aENvdW50ZXJ9YFxuICApO1xuICBwYXRocyA9IFtdO1xufVxuXG4vKiogVGhpcyBmdW5jdGlvbiB3aWxsIGltcG9ydCB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yaWVzICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmFzdEZpbGVMb2FkZXIoXG4gIC8qKiBBbiBhcnJheSBvZiBkaXJlY3RvcmllcyB0byBpbXBvcnQgcmVjdXJzaXZlbHkuICovXG4gIHBhdGhzOiBzdHJpbmdbXSxcbiAgLyoqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIHJ1biBiZWZvcmUgcmVjdXJzaXZlbHkgc2V0dGluZyBhIHBhcnQgb2YgYHBhdGhzYC5cbiAgICogYHBhdGhgIGNvbnRhaW5zIHRoZSBwYXRoIHRoYXQgd2lsbCBiZSBpbXBvcnRlZCwgdXNlZnVsIGZvciBsb2dnaW5nXG4gICAqL1xuICBiZXR3ZWVuPzogKHBhdGg6IHN0cmluZywgdW5pcXVlRmlsZVBhdGhDb3VudGVyOiBudW1iZXIsIHBhdGhzOiBzdHJpbmdbXSkgPT4gdm9pZCxcbiAgLyoqIEEgZnVuY3Rpb24gdGhhdCBydW5zIGJlZm9yZSAqKmFjdHVhbGx5KiogaW1wb3J0aW5nIGFsbCB0aGUgZmlsZXMuICovXG4gIGJlZm9yZT86ICh1bmlxdWVGaWxlUGF0aENvdW50ZXI6IG51bWJlciwgcGF0aHM6IHN0cmluZ1tdKSA9PiB2b2lkLFxuKSB7XG4gIGF3YWl0IFByb21pc2UuYWxsKFxuICAgIFsuLi5wYXRoc10ubWFwKChwYXRoKSA9PiB7XG4gICAgICBpZiAoYmV0d2VlbikgYmV0d2VlbihwYXRoLCB1bmlxdWVGaWxlUGF0aENvdW50ZXIsIHBhdGhzKTtcbiAgICAgIGltcG9ydERpcmVjdG9yeShwYXRoKTtcbiAgICB9KSxcbiAgKTtcblxuICBpZiAoYmVmb3JlKSBiZWZvcmUodW5pcXVlRmlsZVBhdGhDb3VudGVyLCBwYXRocyk7XG5cbiAgYXdhaXQgZmlsZUxvYWRlcigpO1xufVxuXG4vKiogRXh0ZW5kIHRoZSBCb3Qgd2l0aCB0aGUgUGx1Z2luJ3MgYWRkZWQgZnVuY3Rpb25zICovXG5leHBvcnQgaW50ZXJmYWNlIEJvdFdpdGhGaWxlTG9hZGVyIGV4dGVuZHMgQm90IHtcbiAgLyoqIFJlY3Vyc2l2ZWx5IGdlbmVyYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgcGF0aHMgdG8gaW1wb3J0IHVzaW5nIGBmaWxlTG9hZGVyKClgXG4gICAqICgqKklzKiogd2luZG93cyBjb21wYXRpYmxlKVxuICAgKi9cbiAgaW1wb3J0RGlyZWN0b3J5OiAocGF0aDogc3RyaW5nKSA9PiB2b2lkO1xuICAvKiogV3JpdGVzLCB0aGVuIGltcG9ydHMgYWxsIGV2ZXJ5dGhpbmcgaW4gZmlsZWxvYWRlci50cyAqL1xuICBmaWxlTG9hZGVyOiAoKSA9PiB2b2lkO1xuICAvKiogVGhpcyBmdW5jdGlvbiB3aWxsIGltcG9ydCB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yaWVzICovXG4gIGZhc3RGaWxlTG9hZGVyOiAoXG4gICAgLyoqIEFuIGFycmF5IG9mIGRpcmVjdG9yaWVzIHRvIGltcG9ydCByZWN1cnNpdmVseS4gKi9cbiAgICBwYXRoczogc3RyaW5nW10sXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIHJ1biBiZWZvcmUgcmVjdXJzaXZlbHkgc2V0dGluZyBhIHBhcnQgb2YgYHBhdGhzYC5cbiAgICAgKiBgcGF0aGAgY29udGFpbnMgdGhlIHBhdGggdGhhdCB3aWxsIGJlIGltcG9ydGVkLCB1c2VmdWwgZm9yIGxvZ2dpbmdcbiAgICAgKi9cbiAgICBiZXR3ZWVuPzogKHBhdGg6IHN0cmluZywgdW5pcXVlRmlsZVBhdGhDb3VudGVyOiBudW1iZXIsIHBhdGhzOiBzdHJpbmdbXSkgPT4gdm9pZCxcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IHJ1bnMgYmVmb3JlICoqYWN0dWFsbHkqKiBpbXBvcnRpbmcgYWxsIHRoZSBmaWxlcy4gKi9cbiAgICBiZWZvcmU/OiAodW5pcXVlRmlsZVBhdGhDb3VudGVyOiBudW1iZXIsIHBhdGhzOiBzdHJpbmdbXSkgPT4gdm9pZCxcbiAgKSA9PiB2b2lkO1xufVxuXG4vKiogUGFzcyBpbiBhIChjb21wYXRpYmxlKSBib3QgaW5zdGFuY2UsIGFuZCBnZXQgc3dlZXQgZmlsZSBsb2FkZXIgZ29vZG5lc3MuXG4gKiBSZW1lbWJlciB0byBjYXB0dXJlIHRoZSBvdXRwdXQgb2YgdGhpcyBmdW5jdGlvbiFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUZpbGVMb2FkZXJQbHVnaW4ocmF3Qm90OiBCb3QpOiBCb3RXaXRoRmlsZUxvYWRlciB7XG4gIGNvbnN0IGJvdCA9IHJhd0JvdCBhcyBCb3RXaXRoRmlsZUxvYWRlcjtcblxuICBib3QuaW1wb3J0RGlyZWN0b3J5ID0gaW1wb3J0RGlyZWN0b3J5O1xuICBib3QuZmlsZUxvYWRlciA9IGZpbGVMb2FkZXI7XG4gIGJvdC5mYXN0RmlsZUxvYWRlciA9IGZhc3RGaWxlTG9hZGVyO1xuXG4gIHJldHVybiBib3Q7XG59XG4iXX0=