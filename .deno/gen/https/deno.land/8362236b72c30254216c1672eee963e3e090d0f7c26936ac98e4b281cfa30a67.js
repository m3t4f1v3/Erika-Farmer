/** Processes the queue by looping over each path separately until the queues are empty. */ export function processQueue(rest, id) {
    const queue = rest.pathQueues.get(id);
    if (!queue) return;
    while(queue.requests.length){
        rest.debug(`[REST - processQueue] Running while loop.`);
        // SELECT THE FIRST ITEM FROM THIS QUEUE
        const queuedRequest = queue.requests[0];
        // IF THIS DOESN'T HAVE ANY ITEMS JUST CANCEL, THE CLEANER WILL REMOVE IT.
        if (!queuedRequest) break;
        const basicURL = rest.simplifyUrl(queuedRequest.request.url, queuedRequest.request.method);
        // IF THIS URL IS STILL RATE LIMITED, TRY AGAIN
        const urlResetIn = rest.checkRateLimits(rest, basicURL);
        if (urlResetIn) {
            // ONLY ADD TIMEOUT IF ANOTHER QUEUE IS NOT PENDING
            if (!queue.isWaiting) {
                queue.isWaiting = true;
                setTimeout(()=>{
                    queue.isWaiting = false;
                    rest.debug(`[REST - processQueue] rate limited, running setTimeout.`);
                    rest.processQueue(rest, id);
                }, urlResetIn);
            }
            break;
        }
        // IF A BUCKET EXISTS, CHECK THE BUCKET'S RATE LIMITS
        const bucketResetIn = queuedRequest.payload.bucketId ? rest.checkRateLimits(rest, queuedRequest.payload.bucketId) : false;
        // THIS BUCKET IS STILL RATE LIMITED, RE-ADD TO QUEUE
        if (bucketResetIn) continue;
        // EXECUTE THE REQUEST
        // CUSTOM HANDLER FOR USER TO LOG OR WHATEVER WHENEVER A FETCH IS MADE
        rest.debug(`[REST - Add To Global Queue] ${JSON.stringify(queuedRequest.payload)}`);
        rest.globalQueue.push({
            ...queuedRequest,
            urlToUse: queuedRequest.request.url,
            basicURL
        });
        rest.processGlobalQueue(rest);
        queue.requests.shift();
    }
    // ONCE QUEUE IS DONE, WE CAN TRY CLEANING UP
    rest.cleanupQueues(rest);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN0TWFuYWdlciB9IGZyb20gXCIuLi9ib3QudHNcIjtcblxuLyoqIFByb2Nlc3NlcyB0aGUgcXVldWUgYnkgbG9vcGluZyBvdmVyIGVhY2ggcGF0aCBzZXBhcmF0ZWx5IHVudGlsIHRoZSBxdWV1ZXMgYXJlIGVtcHR5LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShyZXN0OiBSZXN0TWFuYWdlciwgaWQ6IHN0cmluZykge1xuICBjb25zdCBxdWV1ZSA9IHJlc3QucGF0aFF1ZXVlcy5nZXQoaWQpO1xuICBpZiAoIXF1ZXVlKSByZXR1cm47XG5cbiAgd2hpbGUgKHF1ZXVlLnJlcXVlc3RzLmxlbmd0aCkge1xuICAgIHJlc3QuZGVidWcoYFtSRVNUIC0gcHJvY2Vzc1F1ZXVlXSBSdW5uaW5nIHdoaWxlIGxvb3AuYCk7XG4gICAgLy8gU0VMRUNUIFRIRSBGSVJTVCBJVEVNIEZST00gVEhJUyBRVUVVRVxuICAgIGNvbnN0IHF1ZXVlZFJlcXVlc3QgPSBxdWV1ZS5yZXF1ZXN0c1swXTtcbiAgICAvLyBJRiBUSElTIERPRVNOJ1QgSEFWRSBBTlkgSVRFTVMgSlVTVCBDQU5DRUwsIFRIRSBDTEVBTkVSIFdJTEwgUkVNT1ZFIElULlxuICAgIGlmICghcXVldWVkUmVxdWVzdCkgYnJlYWs7XG5cbiAgICBjb25zdCBiYXNpY1VSTCA9IHJlc3Quc2ltcGxpZnlVcmwocXVldWVkUmVxdWVzdC5yZXF1ZXN0LnVybCwgcXVldWVkUmVxdWVzdC5yZXF1ZXN0Lm1ldGhvZCk7XG5cbiAgICAvLyBJRiBUSElTIFVSTCBJUyBTVElMTCBSQVRFIExJTUlURUQsIFRSWSBBR0FJTlxuICAgIGNvbnN0IHVybFJlc2V0SW4gPSByZXN0LmNoZWNrUmF0ZUxpbWl0cyhyZXN0LCBiYXNpY1VSTCk7XG4gICAgaWYgKHVybFJlc2V0SW4pIHtcbiAgICAgIC8vIE9OTFkgQUREIFRJTUVPVVQgSUYgQU5PVEhFUiBRVUVVRSBJUyBOT1QgUEVORElOR1xuICAgICAgaWYgKCFxdWV1ZS5pc1dhaXRpbmcpIHtcbiAgICAgICAgcXVldWUuaXNXYWl0aW5nID0gdHJ1ZTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBxdWV1ZS5pc1dhaXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgIHJlc3QuZGVidWcoYFtSRVNUIC0gcHJvY2Vzc1F1ZXVlXSByYXRlIGxpbWl0ZWQsIHJ1bm5pbmcgc2V0VGltZW91dC5gKTtcbiAgICAgICAgICByZXN0LnByb2Nlc3NRdWV1ZShyZXN0LCBpZCk7XG4gICAgICAgIH0sIHVybFJlc2V0SW4pO1xuICAgICAgfVxuXG4gICAgICAvLyBCUkVBSyBXSElMRSBMT09QXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBJRiBBIEJVQ0tFVCBFWElTVFMsIENIRUNLIFRIRSBCVUNLRVQnUyBSQVRFIExJTUlUU1xuICAgIGNvbnN0IGJ1Y2tldFJlc2V0SW4gPSBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYnVja2V0SWRcbiAgICAgID8gcmVzdC5jaGVja1JhdGVMaW1pdHMocmVzdCwgcXVldWVkUmVxdWVzdC5wYXlsb2FkLmJ1Y2tldElkKVxuICAgICAgOiBmYWxzZTtcbiAgICAvLyBUSElTIEJVQ0tFVCBJUyBTVElMTCBSQVRFIExJTUlURUQsIFJFLUFERCBUTyBRVUVVRVxuICAgIGlmIChidWNrZXRSZXNldEluKSBjb250aW51ZTtcbiAgICAvLyBFWEVDVVRFIFRIRSBSRVFVRVNUXG5cbiAgICAvLyBDVVNUT00gSEFORExFUiBGT1IgVVNFUiBUTyBMT0cgT1IgV0hBVEVWRVIgV0hFTkVWRVIgQSBGRVRDSCBJUyBNQURFXG4gICAgcmVzdC5kZWJ1ZyhgW1JFU1QgLSBBZGQgVG8gR2xvYmFsIFF1ZXVlXSAke0pTT04uc3RyaW5naWZ5KHF1ZXVlZFJlcXVlc3QucGF5bG9hZCl9YCk7XG4gICAgcmVzdC5nbG9iYWxRdWV1ZS5wdXNoKHtcbiAgICAgIC4uLnF1ZXVlZFJlcXVlc3QsXG4gICAgICB1cmxUb1VzZTogcXVldWVkUmVxdWVzdC5yZXF1ZXN0LnVybCxcbiAgICAgIGJhc2ljVVJMLFxuICAgIH0pO1xuICAgIHJlc3QucHJvY2Vzc0dsb2JhbFF1ZXVlKHJlc3QpO1xuICAgIHF1ZXVlLnJlcXVlc3RzLnNoaWZ0KCk7XG4gIH1cblxuICAvLyBPTkNFIFFVRVVFIElTIERPTkUsIFdFIENBTiBUUlkgQ0xFQU5JTkcgVVBcbiAgcmVzdC5jbGVhbnVwUXVldWVzKHJlc3QpO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLDJGQUEyRixDQUMzRixPQUFPLFNBQVMsWUFBWSxDQUFDLElBQWlCLEVBQUUsRUFBVSxFQUFFO0lBQzFELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxBQUFDO0lBQ3RDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTztJQUVuQixNQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFFO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsd0NBQXdDO1FBQ3hDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEFBQUM7UUFDeEMsMEVBQTBFO1FBQzFFLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTTtRQUUxQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEFBQUM7UUFFM0YsK0NBQStDO1FBQy9DLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxBQUFDO1FBQ3hELElBQUksVUFBVSxFQUFFO1lBQ2QsbURBQW1EO1lBQ25ELElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUNwQixLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFFdkIsVUFBVSxDQUFDLElBQU07b0JBQ2YsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7b0JBRXhCLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDLENBQUM7b0JBQ3RFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUM3QixFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQ2hCO1lBR0QsTUFBTTtTQUNQO1FBRUQscURBQXFEO1FBQ3JELE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUMxRCxLQUFLLEFBQUM7UUFDVixxREFBcUQ7UUFDckQsSUFBSSxhQUFhLEVBQUUsU0FBUztRQUM1QixzQkFBc0I7UUFFdEIsc0VBQXNFO1FBQ3RFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztZQUNwQixHQUFHLGFBQWE7WUFDaEIsUUFBUSxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRztZQUNuQyxRQUFRO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDeEI7SUFFRCw2Q0FBNkM7SUFDN0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUMxQiJ9