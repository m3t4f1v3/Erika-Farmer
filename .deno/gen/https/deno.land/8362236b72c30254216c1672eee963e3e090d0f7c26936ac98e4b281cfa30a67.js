export function processQueue(rest, id) {
    const queue = rest.pathQueues.get(id);
    if (!queue)
        return;
    while (queue.requests.length) {
        rest.debug(`[REST - processQueue] Running while loop.`);
        const queuedRequest = queue.requests[0];
        if (!queuedRequest)
            break;
        const basicURL = rest.simplifyUrl(queuedRequest.request.url, queuedRequest.request.method);
        const urlResetIn = rest.checkRateLimits(rest, basicURL);
        if (urlResetIn) {
            if (!queue.isWaiting) {
                queue.isWaiting = true;
                setTimeout(() => {
                    queue.isWaiting = false;
                    rest.debug(`[REST - processQueue] rate limited, running setTimeout.`);
                    rest.processQueue(rest, id);
                }, urlResetIn);
            }
            break;
        }
        const bucketResetIn = queuedRequest.payload.bucketId
            ? rest.checkRateLimits(rest, queuedRequest.payload.bucketId)
            : false;
        if (bucketResetIn)
            continue;
        rest.debug(`[REST - Add To Global Queue] ${JSON.stringify(queuedRequest.payload)}`);
        rest.globalQueue.push({
            ...queuedRequest,
            urlToUse: queuedRequest.request.url,
            basicURL,
        });
        rest.processGlobalQueue(rest);
        queue.requests.shift();
    }
    rest.cleanupQueues(rest);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc1F1ZXVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvY2Vzc1F1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBaUIsRUFBRSxFQUFVO0lBQ3hELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxLQUFLO1FBQUUsT0FBTztJQUVuQixPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUV4RCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxhQUFhO1lBQUUsTUFBTTtRQUUxQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFHM0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxVQUFVLEVBQUU7WUFFZCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBRXZCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7b0JBRXhCLElBQUksQ0FBQyxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztvQkFDdEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzlCLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUNoQjtZQUdELE1BQU07U0FDUDtRQUdELE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNsRCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDNUQsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVWLElBQUksYUFBYTtZQUFFLFNBQVM7UUFJNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1lBQ3BCLEdBQUcsYUFBYTtZQUNoQixRQUFRLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHO1lBQ25DLFFBQVE7U0FDVCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUN4QjtJQUdELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3RNYW5hZ2VyIH0gZnJvbSBcIi4uL2JvdC50c1wiO1xuXG4vKiogUHJvY2Vzc2VzIHRoZSBxdWV1ZSBieSBsb29waW5nIG92ZXIgZWFjaCBwYXRoIHNlcGFyYXRlbHkgdW50aWwgdGhlIHF1ZXVlcyBhcmUgZW1wdHkuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKHJlc3Q6IFJlc3RNYW5hZ2VyLCBpZDogc3RyaW5nKSB7XG4gIGNvbnN0IHF1ZXVlID0gcmVzdC5wYXRoUXVldWVzLmdldChpZCk7XG4gIGlmICghcXVldWUpIHJldHVybjtcblxuICB3aGlsZSAocXVldWUucmVxdWVzdHMubGVuZ3RoKSB7XG4gICAgcmVzdC5kZWJ1ZyhgW1JFU1QgLSBwcm9jZXNzUXVldWVdIFJ1bm5pbmcgd2hpbGUgbG9vcC5gKTtcbiAgICAvLyBTRUxFQ1QgVEhFIEZJUlNUIElURU0gRlJPTSBUSElTIFFVRVVFXG4gICAgY29uc3QgcXVldWVkUmVxdWVzdCA9IHF1ZXVlLnJlcXVlc3RzWzBdO1xuICAgIC8vIElGIFRISVMgRE9FU04nVCBIQVZFIEFOWSBJVEVNUyBKVVNUIENBTkNFTCwgVEhFIENMRUFORVIgV0lMTCBSRU1PVkUgSVQuXG4gICAgaWYgKCFxdWV1ZWRSZXF1ZXN0KSBicmVhaztcblxuICAgIGNvbnN0IGJhc2ljVVJMID0gcmVzdC5zaW1wbGlmeVVybChxdWV1ZWRSZXF1ZXN0LnJlcXVlc3QudXJsLCBxdWV1ZWRSZXF1ZXN0LnJlcXVlc3QubWV0aG9kKTtcblxuICAgIC8vIElGIFRISVMgVVJMIElTIFNUSUxMIFJBVEUgTElNSVRFRCwgVFJZIEFHQUlOXG4gICAgY29uc3QgdXJsUmVzZXRJbiA9IHJlc3QuY2hlY2tSYXRlTGltaXRzKHJlc3QsIGJhc2ljVVJMKTtcbiAgICBpZiAodXJsUmVzZXRJbikge1xuICAgICAgLy8gT05MWSBBREQgVElNRU9VVCBJRiBBTk9USEVSIFFVRVVFIElTIE5PVCBQRU5ESU5HXG4gICAgICBpZiAoIXF1ZXVlLmlzV2FpdGluZykge1xuICAgICAgICBxdWV1ZS5pc1dhaXRpbmcgPSB0cnVlO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHF1ZXVlLmlzV2FpdGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgcmVzdC5kZWJ1ZyhgW1JFU1QgLSBwcm9jZXNzUXVldWVdIHJhdGUgbGltaXRlZCwgcnVubmluZyBzZXRUaW1lb3V0LmApO1xuICAgICAgICAgIHJlc3QucHJvY2Vzc1F1ZXVlKHJlc3QsIGlkKTtcbiAgICAgICAgfSwgdXJsUmVzZXRJbik7XG4gICAgICB9XG5cbiAgICAgIC8vIEJSRUFLIFdISUxFIExPT1BcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIElGIEEgQlVDS0VUIEVYSVNUUywgQ0hFQ0sgVEhFIEJVQ0tFVCdTIFJBVEUgTElNSVRTXG4gICAgY29uc3QgYnVja2V0UmVzZXRJbiA9IHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5idWNrZXRJZFxuICAgICAgPyByZXN0LmNoZWNrUmF0ZUxpbWl0cyhyZXN0LCBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYnVja2V0SWQpXG4gICAgICA6IGZhbHNlO1xuICAgIC8vIFRISVMgQlVDS0VUIElTIFNUSUxMIFJBVEUgTElNSVRFRCwgUkUtQUREIFRPIFFVRVVFXG4gICAgaWYgKGJ1Y2tldFJlc2V0SW4pIGNvbnRpbnVlO1xuICAgIC8vIEVYRUNVVEUgVEhFIFJFUVVFU1RcblxuICAgIC8vIENVU1RPTSBIQU5ETEVSIEZPUiBVU0VSIFRPIExPRyBPUiBXSEFURVZFUiBXSEVORVZFUiBBIEZFVENIIElTIE1BREVcbiAgICByZXN0LmRlYnVnKGBbUkVTVCAtIEFkZCBUbyBHbG9iYWwgUXVldWVdICR7SlNPTi5zdHJpbmdpZnkocXVldWVkUmVxdWVzdC5wYXlsb2FkKX1gKTtcbiAgICByZXN0Lmdsb2JhbFF1ZXVlLnB1c2goe1xuICAgICAgLi4ucXVldWVkUmVxdWVzdCxcbiAgICAgIHVybFRvVXNlOiBxdWV1ZWRSZXF1ZXN0LnJlcXVlc3QudXJsLFxuICAgICAgYmFzaWNVUkwsXG4gICAgfSk7XG4gICAgcmVzdC5wcm9jZXNzR2xvYmFsUXVldWUocmVzdCk7XG4gICAgcXVldWUucmVxdWVzdHMuc2hpZnQoKTtcbiAgfVxuXG4gIC8vIE9OQ0UgUVVFVUUgSVMgRE9ORSwgV0UgQ0FOIFRSWSBDTEVBTklORyBVUFxuICByZXN0LmNsZWFudXBRdWV1ZXMocmVzdCk7XG59XG4iXX0=