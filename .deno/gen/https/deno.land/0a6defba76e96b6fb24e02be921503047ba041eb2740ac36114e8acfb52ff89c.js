import { MessageComponentTypes } from "../../types/shared.ts";
export async function sendMessage(bot, channelId, content) {
    const result = await bot.rest.runMethod(bot.rest, "POST", bot.constants.routes.CHANNEL_MESSAGES(channelId), {
        content: content.content,
        tts: content.tts,
        embeds: content.embeds?.map((embed) => bot.transformers.reverse.embed(bot, embed)),
        allowed_mentions: content.allowedMentions
            ? {
                parse: content.allowedMentions?.parse,
                roles: content.allowedMentions?.roles?.map((id) => id.toString()),
                users: content.allowedMentions?.users?.map((id) => id.toString()),
                replied_user: content.allowedMentions?.repliedUser,
            }
            : undefined,
        file: content.file,
        components: content.components?.map((component) => ({
            type: component.type,
            components: component.components.map((subComponent) => {
                if (subComponent.type === MessageComponentTypes.InputText) {
                    return {
                        type: subComponent.type,
                        style: subComponent.style,
                        custom_id: subComponent.customId,
                        label: subComponent.label,
                        placeholder: subComponent.placeholder,
                        min_length: subComponent.minLength ?? subComponent.required === false ? 0 : subComponent.minLength,
                        max_length: subComponent.maxLength,
                    };
                }
                if (subComponent.type === MessageComponentTypes.SelectMenu) {
                    return {
                        type: subComponent.type,
                        custom_id: subComponent.customId,
                        placeholder: subComponent.placeholder,
                        min_values: subComponent.minValues,
                        max_values: subComponent.maxValues,
                        options: subComponent.options.map((option) => ({
                            label: option.label,
                            value: option.value,
                            description: option.description,
                            emoji: option.emoji
                                ? {
                                    id: option.emoji.id?.toString(),
                                    name: option.emoji.name,
                                    animated: option.emoji.animated,
                                }
                                : undefined,
                            default: option.default,
                        })),
                    };
                }
                return {
                    type: subComponent.type,
                    custom_id: subComponent.customId,
                    label: subComponent.label,
                    style: subComponent.style,
                    emoji: "emoji" in subComponent && subComponent.emoji
                        ? {
                            id: subComponent.emoji.id?.toString(),
                            name: subComponent.emoji.name,
                            animated: subComponent.emoji.animated,
                        }
                        : undefined,
                    url: "url" in subComponent ? subComponent.url : undefined,
                    disabled: "disabled" in subComponent ? subComponent.disabled : undefined,
                };
            }),
        })),
        ...(content.messageReference?.messageId
            ? {
                message_reference: {
                    message_id: content.messageReference.messageId.toString(),
                    channel_id: content.messageReference.channelId?.toString(),
                    guild_id: content.messageReference.guildId?.toString(),
                    fail_if_not_exists: content.messageReference.failIfNotExists === true,
                },
            }
            : {}),
    });
    return bot.transformers.message(bot, result);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZE1lc3NhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZW5kTWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUk5RCxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FBQyxHQUFRLEVBQUUsU0FBaUIsRUFBRSxPQUFzQjtJQUNuRixNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUNyQyxHQUFHLENBQUMsSUFBSSxFQUNSLE1BQU0sRUFDTixHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFDaEQ7UUFDRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87UUFDeEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO1FBQ2hCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRixnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZUFBZTtZQUN2QyxDQUFDLENBQUM7Z0JBQ0EsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSztnQkFDckMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNqRSxLQUFLLEVBQUUsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2pFLFlBQVksRUFBRSxPQUFPLENBQUMsZUFBZSxFQUFFLFdBQVc7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QVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVM7aUJBQ3pFLENBQUM7WUFDSixDQUFDLENBQUM7U0FDSCxDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLFNBQVM7WUFDckMsQ0FBQyxDQUFDO2dCQUNBLGlCQUFpQixFQUFFO29CQUNqQixVQUFVLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUU7b0JBQ3pELFVBQVUsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtvQkFDMUQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFO29CQUN0RCxrQkFBa0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxLQUFLLElBQUk7aUJBQ3RFO2FBQ0Y7WUFDRCxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ1IsQ0FDRixDQUFDO0lBRUYsT0FBTyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQm90IH0gZnJvbSBcIi4uLy4uL2JvdC50c1wiO1xuaW1wb3J0IHsgQWxsb3dlZE1lbnRpb25zLCBGaWxlQ29udGVudCwgTWVzc2FnZUNvbXBvbmVudHMgfSBmcm9tIFwiLi4vLi4vdHlwZXMvbW9kLnRzXCI7XG5pbXBvcnQgeyBEaXNjb3JkTWVzc2FnZSB9IGZyb20gXCIuLi8uLi90eXBlcy9kaXNjb3JkLnRzXCI7XG5pbXBvcnQgeyBNZXNzYWdlQ29tcG9uZW50VHlwZXMgfSBmcm9tIFwiLi4vLi4vdHlwZXMvc2hhcmVkLnRzXCI7XG5pbXBvcnQgeyBFbWJlZCB9IGZyb20gXCIuLi8uLi90cmFuc2Zvcm1lcnMvZW1iZWQudHNcIjtcblxuLyoqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBjaGFubmVsLiBSZXF1aXJlcyBTRU5EX01FU1NBR0VTIHBlcm1pc3Npb24uICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZE1lc3NhZ2UoYm90OiBCb3QsIGNoYW5uZWxJZDogYmlnaW50LCBjb250ZW50OiBDcmVhdGVNZXNzYWdlKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJvdC5yZXN0LnJ1bk1ldGhvZDxEaXNjb3JkTWVzc2FnZT4oXG4gICAgYm90LnJlc3QsXG4gICAgXCJQT1NUXCIsXG4gICAgYm90LmNvbnN0YW50cy5yb3V0ZXMuQ0hBTk5FTF9NRVNTQUdFUyhjaGFubmVsSWQpLFxuICAgIHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQuY29udGVudCxcbiAgICAgIHR0czogY29udGVudC50dHMsXG4gICAgICBlbWJlZHM6IGNvbnRlbnQuZW1iZWRzPy5tYXAoKGVtYmVkKSA9PiBib3QudHJhbnNmb3JtZXJzLnJldmVyc2UuZW1iZWQoYm90LCBlbWJlZCkpLFxuICAgICAgYWxsb3dlZF9tZW50aW9uczogY29udGVudC5hbGxvd2VkTWVudGlvbnNcbiAgICAgICAgPyB7XG4gICAgICAgICAgcGFyc2U6IGNvbnRlbnQuYWxsb3dlZE1lbnRpb25zPy5wYXJzZSxcbiAgICAgICAgICByb2xlczogY29udGVudC5hbGxvd2VkTWVudGlvbnM/LnJvbGVzPy5tYXAoKGlkKSA9PiBpZC50b1N0cmluZygpKSxcbiAgICAgICAgICB1c2VyczogY29udGVudC5hbGxvd2VkTWVudGlvbnM/LnVzZXJzPy5tYXAoKGlkKSA9PiBpZC50b1N0cmluZygpKSxcbiAgICAgICAgICByZXBsaWVkX3VzZXI6IGNvbnRlbnQuYWxsb3dlZE1lbnRpb25zPy5yZXBsaWVkVXNlcixcbiAgICAgICAgfVxuICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgIGZpbGU6IGNvbnRlbnQuZmlsZSxcbiAgICAgIGNvbXBvbmVudHM6IGNvbnRlbnQuY29tcG9uZW50cz8ubWFwKChjb21wb25lbnQpID0+ICh7XG4gICAgICAgIHR5cGU6IGNvbXBvbmVudC50eXBlLFxuICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnQuY29tcG9uZW50cy5tYXAoKHN1YkNvbXBvbmVudCkgPT4ge1xuICAgICAgICAgIGlmIChzdWJDb21wb25lbnQudHlwZSA9PT0gTWVzc2FnZUNvbXBvbmVudFR5cGVzLklucHV0VGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdHlwZTogc3ViQ29tcG9uZW50LnR5cGUsXG4gICAgICAgICAgICAgIHN0eWxlOiBzdWJDb21wb25lbnQuc3R5bGUsXG4gICAgICAgICAgICAgIGN1c3RvbV9pZDogc3ViQ29tcG9uZW50LmN1c3RvbUlkLFxuICAgICAgICAgICAgICBsYWJlbDogc3ViQ29tcG9uZW50LmxhYmVsLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogc3ViQ29tcG9uZW50LnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICBtaW5fbGVuZ3RoOiBzdWJDb21wb25lbnQubWluTGVuZ3RoID8/IHN1YkNvbXBvbmVudC5yZXF1aXJlZCA9PT0gZmFsc2UgPyAwIDogc3ViQ29tcG9uZW50Lm1pbkxlbmd0aCxcbiAgICAgICAgICAgICAgbWF4X2xlbmd0aDogc3ViQ29tcG9uZW50Lm1heExlbmd0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN1YkNvbXBvbmVudC50eXBlID09PSBNZXNzYWdlQ29tcG9uZW50VHlwZXMuU2VsZWN0TWVudSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdHlwZTogc3ViQ29tcG9uZW50LnR5cGUsXG4gICAgICAgICAgICAgIGN1c3RvbV9pZDogc3ViQ29tcG9uZW50LmN1c3RvbUlkLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogc3ViQ29tcG9uZW50LnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICBtaW5fdmFsdWVzOiBzdWJDb21wb25lbnQubWluVmFsdWVzLFxuICAgICAgICAgICAgICBtYXhfdmFsdWVzOiBzdWJDb21wb25lbnQubWF4VmFsdWVzLFxuICAgICAgICAgICAgICBvcHRpb25zOiBzdWJDb21wb25lbnQub3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uLmxhYmVsLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBvcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG9wdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBlbW9qaTogb3B0aW9uLmVtb2ppXG4gICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbi5lbW9qaS5pZD8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogb3B0aW9uLmVtb2ppLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkOiBvcHRpb24uZW1vamkuYW5pbWF0ZWQsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBvcHRpb24uZGVmYXVsdCxcbiAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogc3ViQ29tcG9uZW50LnR5cGUsXG4gICAgICAgICAgICBjdXN0b21faWQ6IHN1YkNvbXBvbmVudC5jdXN0b21JZCxcbiAgICAgICAgICAgIGxhYmVsOiBzdWJDb21wb25lbnQubGFiZWwsXG4gICAgICAgICAgICBzdHlsZTogc3ViQ29tcG9uZW50LnN0eWxlLFxuICAgICAgICAgICAgZW1vamk6IFwiZW1vamlcIiBpbiBzdWJDb21wb25lbnQgJiYgc3ViQ29tcG9uZW50LmVtb2ppXG4gICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGlkOiBzdWJDb21wb25lbnQuZW1vamkuaWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogc3ViQ29tcG9uZW50LmVtb2ppLm5hbWUsXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWQ6IHN1YkNvbXBvbmVudC5lbW9qaS5hbmltYXRlZCxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVybDogXCJ1cmxcIiBpbiBzdWJDb21wb25lbnQgPyBzdWJDb21wb25lbnQudXJsIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IFwiZGlzYWJsZWRcIiBpbiBzdWJDb21wb25lbnQgPyBzdWJDb21wb25lbnQuZGlzYWJsZWQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICB9KSksXG4gICAgICAuLi4oY29udGVudC5tZXNzYWdlUmVmZXJlbmNlPy5tZXNzYWdlSWRcbiAgICAgICAgPyB7XG4gICAgICAgICAgbWVzc2FnZV9yZWZlcmVuY2U6IHtcbiAgICAgICAgICAgIG1lc3NhZ2VfaWQ6IGNvbnRlbnQubWVzc2FnZVJlZmVyZW5jZS5tZXNzYWdlSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGNoYW5uZWxfaWQ6IGNvbnRlbnQubWVzc2FnZVJlZmVyZW5jZS5jaGFubmVsSWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICBndWlsZF9pZDogY29udGVudC5tZXNzYWdlUmVmZXJlbmNlLmd1aWxkSWQ/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICBmYWlsX2lmX25vdF9leGlzdHM6IGNvbnRlbnQubWVzc2FnZVJlZmVyZW5jZS5mYWlsSWZOb3RFeGlzdHMgPT09IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgICA6IHt9KSxcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLm1lc3NhZ2UoYm90LCByZXN1bHQpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZU1lc3NhZ2Uge1xuICAvKiogVGhlIG1lc3NhZ2UgY29udGVudHMgKHVwIHRvIDIwMDAgY2hhcmFjdGVycykgKi9cbiAgY29udGVudD86IHN0cmluZztcbiAgLyoqIHRydWUgaWYgdGhpcyBpcyBhIFRUUyBtZXNzYWdlICovXG4gIHR0cz86IGJvb2xlYW47XG4gIC8qKiBFbWJlZGRlZCBgcmljaGAgY29udGVudCAodXAgdG8gNjAwMCBjaGFyYWN0ZXJzKSAqL1xuICBlbWJlZHM/OiBFbWJlZFtdO1xuICAvKiogQWxsb3dlZCBtZW50aW9ucyBmb3IgdGhlIG1lc3NhZ2UgKi9cbiAgYWxsb3dlZE1lbnRpb25zPzogQWxsb3dlZE1lbnRpb25zO1xuICAvKiogSW5jbHVkZSB0byBtYWtlIHlvdXIgbWVzc2FnZSBhIHJlcGx5ICovXG4gIG1lc3NhZ2VSZWZlcmVuY2U/OiB7XG4gICAgLyoqIGlkIG9mIHRoZSBvcmlnaW5hdGluZyBtZXNzYWdlICovXG4gICAgbWVzc2FnZUlkPzogYmlnaW50O1xuICAgIC8qKlxuICAgICAqIGlkIG9mIHRoZSBvcmlnaW5hdGluZyBtZXNzYWdlJ3MgY2hhbm5lbFxuICAgICAqIE5vdGU6IGBjaGFubmVsX2lkYCBpcyBvcHRpb25hbCB3aGVuIGNyZWF0aW5nIGEgcmVwbHksIGJ1dCB3aWxsIGFsd2F5cyBiZSBwcmVzZW50IHdoZW4gcmVjZWl2aW5nIGFuIGV2ZW50L3Jlc3BvbnNlIHRoYXQgaW5jbHVkZXMgdGhpcyBkYXRhIG1vZGVsLlxuICAgICAqL1xuICAgIGNoYW5uZWxJZD86IGJpZ2ludDtcbiAgICAvKiogaWQgb2YgdGhlIG9yaWdpbmF0aW5nIG1lc3NhZ2UncyBndWlsZCAqL1xuICAgIGd1aWxkSWQ/OiBiaWdpbnQ7XG4gICAgLyoqIFdoZW4gc2VuZGluZywgd2hldGhlciB0byBlcnJvciBpZiB0aGUgcmVmZXJlbmNlZCBtZXNzYWdlIGRvZXNuJ3QgZXhpc3QgaW5zdGVhZCBvZiBzZW5kaW5nIGFzIGEgbm9ybWFsIChub24tcmVwbHkpIG1lc3NhZ2UsIGRlZmF1bHQgdHJ1ZSAqL1xuICAgIGZhaWxJZk5vdEV4aXN0czogYm9vbGVhbjtcbiAgfTtcbiAgLyoqIFRoZSBjb250ZW50cyBvZiB0aGUgZmlsZSBiZWluZyBzZW50ICovXG4gIGZpbGU/OiBGaWxlQ29udGVudCB8IEZpbGVDb250ZW50W107XG4gIC8qKiBUaGUgY29tcG9uZW50cyB5b3Ugd291bGQgbGlrZSB0byBoYXZlIHNlbnQgaW4gdGhpcyBtZXNzYWdlICovXG4gIGNvbXBvbmVudHM/OiBNZXNzYWdlQ29tcG9uZW50cztcbn1cbiJdfQ==