import { GatewayOpcodes } from "../../types/shared.ts";
import { ShardSocketCloseCodes, ShardState } from "./types.ts";
export async function resume(shard) {
    if (shard.isOpen()) {
        shard.close(ShardSocketCloseCodes.ResumeClosingOldConnection, "Reconnecting the shard, closing old connection.");
    }
    if (!shard.sessionId) {
        return await shard.identify();
    }
    shard.state = ShardState.Resuming;
    await shard.connect();
    shard.send({
        op: GatewayOpcodes.Resume,
        d: {
            token: `Bot ${shard.gatewayConfig.token}`,
            session_id: shard.sessionId,
            seq: shard.previousSequenceNumber ?? 0,
        },
    }, true);
    return new Promise((resolve) => {
        shard.resolves.set("RESUMED", () => resolve());
        shard.resolves.set("INVALID_SESSION", () => {
            shard.resolves.delete("RESUMED");
            resolve();
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVzdW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQVMscUJBQXFCLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXRFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsTUFBTSxDQUFDLEtBQVk7SUFJdkMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQywwQkFBMEIsRUFBRSxpREFBaUQsQ0FBQyxDQUFDO0tBQ2xIO0lBR0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7UUFNcEIsT0FBTyxNQUFNLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUcvQjtJQUVELEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQztJQUdsQyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUV0QixLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ1QsRUFBRSxFQUFFLGNBQWMsQ0FBQyxNQUFNO1FBQ3pCLENBQUMsRUFBRTtZQUNELEtBQUssRUFBRSxPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFO1lBQ3pDLFVBQVUsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMzQixHQUFHLEVBQUUsS0FBSyxDQUFDLHNCQUFzQixJQUFJLENBQUM7U0FDdkM7S0FDRixFQUFFLElBQUksQ0FBQyxDQUFDO0lBRVQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzdCLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBSS9DLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtZQUN6QyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNqQyxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2F0ZXdheU9wY29kZXMgfSBmcm9tIFwiLi4vLi4vdHlwZXMvc2hhcmVkLnRzXCI7XG5pbXBvcnQgeyBTaGFyZCwgU2hhcmRTb2NrZXRDbG9zZUNvZGVzLCBTaGFyZFN0YXRlIH0gZnJvbSBcIi4vdHlwZXMudHNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc3VtZShzaGFyZDogU2hhcmQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gICBnYXRld2F5LmRlYnVnKFwiR1cgUkVTVU1JTkdcIiwgeyBzaGFyZElkIH0pO1xuICAvLyBJdCBoYXMgYmVlbiByZXF1ZXN0ZWQgdG8gcmVzdW1lIHRoZSBTaGFyZHMgc2Vzc2lvbi5cbiAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHRoZSBzaGFyZCBpcyBzdGlsbCBjb25uZWN0ZWQgd2l0aCBEaXNjb3JkJ3MgZ2F0ZXdheSB0aGVyZWZvcmUgd2UgbmVlZCB0byBmb3JjZWZ1bGx5IGNsb3NlIGl0LlxuICBpZiAoc2hhcmQuaXNPcGVuKCkpIHtcbiAgICBzaGFyZC5jbG9zZShTaGFyZFNvY2tldENsb3NlQ29kZXMuUmVzdW1lQ2xvc2luZ09sZENvbm5lY3Rpb24sIFwiUmVjb25uZWN0aW5nIHRoZSBzaGFyZCwgY2xvc2luZyBvbGQgY29ubmVjdGlvbi5cIik7XG4gIH1cblxuICAvLyBTaGFyZCBoYXMgbmV2ZXIgaWRlbnRpZmllZCwgc28gd2UgY2Fubm90IHJlc3VtZS5cbiAgaWYgKCFzaGFyZC5zZXNzaW9uSWQpIHtcbiAgICAvLyBnYXRld2F5LmRlYnVnKFxuICAgIC8vICAgXCJHVyBERUJVR1wiLFxuICAgIC8vICAgYFtFcnJvcl0gVHJ5aW5nIHRvIHJlc3VtZSBhIHNoYXJkIChpZDogJHtzaGFyZElkfSkgdGhhdCB3YXMgbm90IGZpcnN0IGlkZW50aWZpZWQuYCxcbiAgICAvLyApO1xuXG4gICAgcmV0dXJuIGF3YWl0IHNoYXJkLmlkZW50aWZ5KCk7XG5cbiAgICAvLyB0aHJvdyBuZXcgRXJyb3IoYFtTSEFSRF0gVHJ5aW5nIHRvIHJlc3VtZSBhIHNoYXJkIChpZDogJHtzaGFyZC5pZH0pIHdoaWNoIHdhcyBuZXZlciBpZGVudGlmaWVkYCk7XG4gIH1cblxuICBzaGFyZC5zdGF0ZSA9IFNoYXJkU3RhdGUuUmVzdW1pbmc7XG5cbiAgLy8gQmVmb3JlIHdlIGNhbiByZXN1bWUsIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGNvbm5lY3Rpb24gd2l0aCBEaXNjb3JkJ3MgZ2F0ZXdheS5cbiAgYXdhaXQgc2hhcmQuY29ubmVjdCgpO1xuXG4gIHNoYXJkLnNlbmQoe1xuICAgIG9wOiBHYXRld2F5T3Bjb2Rlcy5SZXN1bWUsXG4gICAgZDoge1xuICAgICAgdG9rZW46IGBCb3QgJHtzaGFyZC5nYXRld2F5Q29uZmlnLnRva2VufWAsXG4gICAgICBzZXNzaW9uX2lkOiBzaGFyZC5zZXNzaW9uSWQsXG4gICAgICBzZXE6IHNoYXJkLnByZXZpb3VzU2VxdWVuY2VOdW1iZXIgPz8gMCxcbiAgICB9LFxuICB9LCB0cnVlKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzaGFyZC5yZXNvbHZlcy5zZXQoXCJSRVNVTUVEXCIsICgpID0+IHJlc29sdmUoKSk7XG4gICAgLy8gSWYgaXQgaXMgYXR0ZW1wdGVkIHRvIHJlc3VtZSB3aXRoIGFuIGludmFsaWQgc2Vzc2lvbiBpZCxcbiAgICAvLyBEaXNjb3JkIHNlbmRzIGFuIGludmFsaWQgc2Vzc2lvbiBwYXlsb2FkXG4gICAgLy8gTm90IGVycm9yaW5nIGhlcmUgc2luY2UgaXQgaXMgZWFzeSB0aGF0IHRoaXMgaGFwcGVucywgYWxzbyBpdCB3b3VsZCBiZSBub3QgY2F0Y2hhYmxlXG4gICAgc2hhcmQucmVzb2x2ZXMuc2V0KFwiSU5WQUxJRF9TRVNTSU9OXCIsICgpID0+IHtcbiAgICAgIHNoYXJkLnJlc29sdmVzLmRlbGV0ZShcIlJFU1VNRURcIik7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19