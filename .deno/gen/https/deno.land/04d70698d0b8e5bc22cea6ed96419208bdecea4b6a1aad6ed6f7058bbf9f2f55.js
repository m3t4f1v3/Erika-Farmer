import { GatewayCloseEventCodes } from "../../types/shared.ts";
import { ShardSocketCloseCodes, ShardState } from "./types.ts";
export async function handleClose(shard, close) {
    shard.stopHeartbeating();
    switch (close.code) {
        case ShardSocketCloseCodes.TestingFinished: {
            shard.state = ShardState.Offline;
            shard.events.disconnected?.(shard);
            return;
        }
        case ShardSocketCloseCodes.Shutdown:
        case ShardSocketCloseCodes.ReIdentifying:
        case ShardSocketCloseCodes.Resharded:
        case ShardSocketCloseCodes.ResumeClosingOldConnection:
        case ShardSocketCloseCodes.ZombiedConnection: {
            shard.state = ShardState.Disconnected;
            shard.events.disconnected?.(shard);
            return;
        }
        case GatewayCloseEventCodes.UnknownOpcode:
        case GatewayCloseEventCodes.NotAuthenticated:
        case GatewayCloseEventCodes.InvalidSeq:
        case GatewayCloseEventCodes.RateLimited:
        case GatewayCloseEventCodes.SessionTimedOut: {
            shard.state = ShardState.Identifying;
            shard.events.disconnected?.(shard);
            return await shard.identify();
        }
        case GatewayCloseEventCodes.AuthenticationFailed:
        case GatewayCloseEventCodes.InvalidShard:
        case GatewayCloseEventCodes.ShardingRequired:
        case GatewayCloseEventCodes.InvalidApiVersion:
        case GatewayCloseEventCodes.InvalidIntents:
        case GatewayCloseEventCodes.DisallowedIntents: {
            shard.state = ShardState.Offline;
            shard.events.disconnected?.(shard);
            throw new Error(close.reason || "Discord gave no reason! GG! You broke Discord!");
        }
        case GatewayCloseEventCodes.UnknownError:
        case GatewayCloseEventCodes.DecodeError:
        case GatewayCloseEventCodes.AlreadyAuthenticated:
        default: {
            shard.state = ShardState.Resuming;
            shard.events.disconnected?.(shard);
            return await shard.resume();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlQ2xvc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJoYW5kbGVDbG9zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQVMscUJBQXFCLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXRFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEtBQVksRUFBRSxLQUFpQjtJQUcvRCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUV6QixRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDbEIsS0FBSyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMxQyxLQUFLLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUM7WUFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVuQyxPQUFPO1NBQ1I7UUFFRCxLQUFLLHFCQUFxQixDQUFDLFFBQVEsQ0FBQztRQUNwQyxLQUFLLHFCQUFxQixDQUFDLGFBQWEsQ0FBQztRQUN6QyxLQUFLLHFCQUFxQixDQUFDLFNBQVMsQ0FBQztRQUNyQyxLQUFLLHFCQUFxQixDQUFDLDBCQUEwQixDQUFDO1FBQ3RELEtBQUsscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUM1QyxLQUFLLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUM7WUFDdEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUduQyxPQUFPO1NBQ1I7UUFFRCxLQUFLLHNCQUFzQixDQUFDLGFBQWEsQ0FBQztRQUMxQyxLQUFLLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDO1FBQzdDLEtBQUssc0JBQXNCLENBQUMsVUFBVSxDQUFDO1FBQ3ZDLEtBQUssc0JBQXNCLENBQUMsV0FBVyxDQUFDO1FBQ3hDLEtBQUssc0JBQXNCLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDM0MsS0FBSyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1lBQ3JDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFbkMsT0FBTyxNQUFNLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMvQjtRQUdELEtBQUssc0JBQXNCLENBQUMsb0JBQW9CLENBQUM7UUFDakQsS0FBSyxzQkFBc0IsQ0FBQyxZQUFZLENBQUM7UUFDekMsS0FBSyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQztRQUM3QyxLQUFLLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDO1FBQzlDLEtBQUssc0JBQXNCLENBQUMsY0FBYyxDQUFDO1FBQzNDLEtBQUssc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUM3QyxLQUFLLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUM7WUFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVuQyxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksZ0RBQWdELENBQUMsQ0FBQztTQUNuRjtRQUVELEtBQUssc0JBQXNCLENBQUMsWUFBWSxDQUFDO1FBQ3pDLEtBQUssc0JBQXNCLENBQUMsV0FBVyxDQUFDO1FBQ3hDLEtBQUssc0JBQXNCLENBQUMsb0JBQW9CLENBQUM7UUFDakQsT0FBTyxDQUFDLENBQUM7WUFDUCxLQUFLLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDbEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVuQyxPQUFPLE1BQU0sS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzdCO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2F0ZXdheUNsb3NlRXZlbnRDb2RlcyB9IGZyb20gXCIuLi8uLi90eXBlcy9zaGFyZWQudHNcIjtcbmltcG9ydCB7IFNoYXJkLCBTaGFyZFNvY2tldENsb3NlQ29kZXMsIFNoYXJkU3RhdGUgfSBmcm9tIFwiLi90eXBlcy50c1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2xvc2Uoc2hhcmQ6IFNoYXJkLCBjbG9zZTogQ2xvc2VFdmVudCk6IFByb21pc2U8dm9pZD4ge1xuICAvLyAgIGdhdGV3YXkuZGVidWcoXCJHVyBDTE9TRURcIiwgeyBzaGFyZElkLCBwYXlsb2FkOiBldmVudCB9KTtcblxuICBzaGFyZC5zdG9wSGVhcnRiZWF0aW5nKCk7XG5cbiAgc3dpdGNoIChjbG9zZS5jb2RlKSB7XG4gICAgY2FzZSBTaGFyZFNvY2tldENsb3NlQ29kZXMuVGVzdGluZ0ZpbmlzaGVkOiB7XG4gICAgICBzaGFyZC5zdGF0ZSA9IFNoYXJkU3RhdGUuT2ZmbGluZTtcbiAgICAgIHNoYXJkLmV2ZW50cy5kaXNjb25uZWN0ZWQ/LihzaGFyZCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gT24gdGhlc2UgY29kZXMgYSBtYW51YWwgc3RhcnQgd2lsbCBiZSBkb25lLlxuICAgIGNhc2UgU2hhcmRTb2NrZXRDbG9zZUNvZGVzLlNodXRkb3duOlxuICAgIGNhc2UgU2hhcmRTb2NrZXRDbG9zZUNvZGVzLlJlSWRlbnRpZnlpbmc6XG4gICAgY2FzZSBTaGFyZFNvY2tldENsb3NlQ29kZXMuUmVzaGFyZGVkOlxuICAgIGNhc2UgU2hhcmRTb2NrZXRDbG9zZUNvZGVzLlJlc3VtZUNsb3NpbmdPbGRDb25uZWN0aW9uOlxuICAgIGNhc2UgU2hhcmRTb2NrZXRDbG9zZUNvZGVzLlpvbWJpZWRDb25uZWN0aW9uOiB7XG4gICAgICBzaGFyZC5zdGF0ZSA9IFNoYXJkU3RhdGUuRGlzY29ubmVjdGVkO1xuICAgICAgc2hhcmQuZXZlbnRzLmRpc2Nvbm5lY3RlZD8uKHNoYXJkKTtcblxuICAgICAgLy8gZ2F0ZXdheS5kZWJ1ZyhcIkdXIENMT1NFRF9SRUNPTk5FQ1RcIiwgeyBzaGFyZElkLCBwYXlsb2FkOiBldmVudCB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gR2F0ZXdheSBjb25uZWN0aW9uIGNsb3NlcyB3aGljaCByZXF1aXJlIGEgbmV3IGlkZW50aWZ5LlxuICAgIGNhc2UgR2F0ZXdheUNsb3NlRXZlbnRDb2Rlcy5Vbmtub3duT3Bjb2RlOlxuICAgIGNhc2UgR2F0ZXdheUNsb3NlRXZlbnRDb2Rlcy5Ob3RBdXRoZW50aWNhdGVkOlxuICAgIGNhc2UgR2F0ZXdheUNsb3NlRXZlbnRDb2Rlcy5JbnZhbGlkU2VxOlxuICAgIGNhc2UgR2F0ZXdheUNsb3NlRXZlbnRDb2Rlcy5SYXRlTGltaXRlZDpcbiAgICBjYXNlIEdhdGV3YXlDbG9zZUV2ZW50Q29kZXMuU2Vzc2lvblRpbWVkT3V0OiB7XG4gICAgICBzaGFyZC5zdGF0ZSA9IFNoYXJkU3RhdGUuSWRlbnRpZnlpbmc7XG4gICAgICBzaGFyZC5ldmVudHMuZGlzY29ubmVjdGVkPy4oc2hhcmQpO1xuXG4gICAgICByZXR1cm4gYXdhaXQgc2hhcmQuaWRlbnRpZnkoKTtcbiAgICB9XG4gICAgLy8gV2hlbiB0aGVzZSBjb2RlcyBhcmUgcmVjZWl2ZWQgc29tZXRoaW5nIHdlbnQgcmVhbGx5IHdyb25nLlxuICAgIC8vIE9uIHRob3NlIHdlIGNhbm5vdCBzdGFydCBhIHJlY29ubmVjdCBhdHRlbXB0LlxuICAgIGNhc2UgR2F0ZXdheUNsb3NlRXZlbnRDb2Rlcy5BdXRoZW50aWNhdGlvbkZhaWxlZDpcbiAgICBjYXNlIEdhdGV3YXlDbG9zZUV2ZW50Q29kZXMuSW52YWxpZFNoYXJkOlxuICAgIGNhc2UgR2F0ZXdheUNsb3NlRXZlbnRDb2Rlcy5TaGFyZGluZ1JlcXVpcmVkOlxuICAgIGNhc2UgR2F0ZXdheUNsb3NlRXZlbnRDb2Rlcy5JbnZhbGlkQXBpVmVyc2lvbjpcbiAgICBjYXNlIEdhdGV3YXlDbG9zZUV2ZW50Q29kZXMuSW52YWxpZEludGVudHM6XG4gICAgY2FzZSBHYXRld2F5Q2xvc2VFdmVudENvZGVzLkRpc2FsbG93ZWRJbnRlbnRzOiB7XG4gICAgICBzaGFyZC5zdGF0ZSA9IFNoYXJkU3RhdGUuT2ZmbGluZTtcbiAgICAgIHNoYXJkLmV2ZW50cy5kaXNjb25uZWN0ZWQ/LihzaGFyZCk7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihjbG9zZS5yZWFzb24gfHwgXCJEaXNjb3JkIGdhdmUgbm8gcmVhc29uISBHRyEgWW91IGJyb2tlIERpc2NvcmQhXCIpO1xuICAgIH1cbiAgICAvLyBHYXRld2F5IGNvbm5lY3Rpb24gY2xvc2VzIG9uIHdoaWNoIGEgcmVzdW1lIGlzIGFsbG93ZWQuXG4gICAgY2FzZSBHYXRld2F5Q2xvc2VFdmVudENvZGVzLlVua25vd25FcnJvcjpcbiAgICBjYXNlIEdhdGV3YXlDbG9zZUV2ZW50Q29kZXMuRGVjb2RlRXJyb3I6XG4gICAgY2FzZSBHYXRld2F5Q2xvc2VFdmVudENvZGVzLkFscmVhZHlBdXRoZW50aWNhdGVkOlxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHNoYXJkLnN0YXRlID0gU2hhcmRTdGF0ZS5SZXN1bWluZztcbiAgICAgIHNoYXJkLmV2ZW50cy5kaXNjb25uZWN0ZWQ/LihzaGFyZCk7XG5cbiAgICAgIHJldHVybiBhd2FpdCBzaGFyZC5yZXN1bWUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==