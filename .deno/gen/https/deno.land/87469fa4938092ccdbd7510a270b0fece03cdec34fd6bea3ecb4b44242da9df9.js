import { requireBotChannelPermissions } from "../permissions.ts";
export function addReaction(bot) {
    const addReactionOld = bot.helpers.addReaction;
    bot.helpers.addReaction = async function(channelId, messageId, reaction) {
        requireBotChannelPermissions(bot, channelId, [
            "READ_MESSAGE_HISTORY",
            "ADD_REACTIONS", 
        ]);
        return await addReactionOld(channelId, messageId, reaction);
    };
}
export function addReactions(bot) {
    const addReactionsOld = bot.helpers.addReactions;
    bot.helpers.addReactions = async function(channelId, messageId, reactions, ordered) {
        requireBotChannelPermissions(bot, channelId, [
            "READ_MESSAGE_HISTORY",
            "ADD_REACTIONS", 
        ]);
        return await addReactionsOld(channelId, messageId, reactions, ordered);
    };
}
export function removeReaction(bot) {
    const removeReactionOld = bot.helpers.removeReaction;
    bot.helpers.removeReaction = async function(channelId, messageId, reactions, options) {
        // IF REMOVING OTHER USER PERMS MANAGE MESSAGES IS REQUIRED
        if (options?.userId) {
            requireBotChannelPermissions(bot, channelId, [
                "MANAGE_MESSAGES", 
            ]);
        }
        return await removeReactionOld(channelId, messageId, reactions, options);
    };
}
export function removeAllReactions(bot) {
    const removeAllReactionsOld = bot.helpers.removeAllReactions;
    bot.helpers.removeAllReactions = async function(channelId, messageId) {
        requireBotChannelPermissions(bot, channelId, [
            "MANAGE_MESSAGES", 
        ]);
        return await removeAllReactionsOld(channelId, messageId);
    };
}
export function removeReactionEmoji(bot) {
    const removeReactionEmojiOld = bot.helpers.removeReactionEmoji;
    bot.helpers.removeReactionEmoji = async function(channelId, messageId, reaction) {
        requireBotChannelPermissions(bot, channelId, [
            "MANAGE_MESSAGES", 
        ]);
        return await removeReactionEmojiOld(channelId, messageId, reaction);
    };
}
export default function setupReactionsPermChecks(bot) {
    addReaction(bot);
    addReactions(bot);
    removeReaction(bot);
    removeAllReactions(bot);
    removeReactionEmoji(bot);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3RXaXRoQ2FjaGUgfSBmcm9tIFwiLi4vLi4vZGVwcy50c1wiO1xuaW1wb3J0IHsgcmVxdWlyZUJvdENoYW5uZWxQZXJtaXNzaW9ucyB9IGZyb20gXCIuLi9wZXJtaXNzaW9ucy50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkUmVhY3Rpb24oYm90OiBCb3RXaXRoQ2FjaGUpIHtcbiAgY29uc3QgYWRkUmVhY3Rpb25PbGQgPSBib3QuaGVscGVycy5hZGRSZWFjdGlvbjtcblxuICBib3QuaGVscGVycy5hZGRSZWFjdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChjaGFubmVsSWQsIG1lc3NhZ2VJZCwgcmVhY3Rpb24pIHtcbiAgICByZXF1aXJlQm90Q2hhbm5lbFBlcm1pc3Npb25zKGJvdCwgY2hhbm5lbElkLCBbXG4gICAgICBcIlJFQURfTUVTU0FHRV9ISVNUT1JZXCIsXG4gICAgICBcIkFERF9SRUFDVElPTlNcIixcbiAgICBdKTtcblxuICAgIHJldHVybiBhd2FpdCBhZGRSZWFjdGlvbk9sZChjaGFubmVsSWQsIG1lc3NhZ2VJZCwgcmVhY3Rpb24pO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkUmVhY3Rpb25zKGJvdDogQm90V2l0aENhY2hlKSB7XG4gIGNvbnN0IGFkZFJlYWN0aW9uc09sZCA9IGJvdC5oZWxwZXJzLmFkZFJlYWN0aW9ucztcblxuICBib3QuaGVscGVycy5hZGRSZWFjdGlvbnMgPSBhc3luYyBmdW5jdGlvbiAoXG4gICAgY2hhbm5lbElkLFxuICAgIG1lc3NhZ2VJZCxcbiAgICByZWFjdGlvbnMsXG4gICAgb3JkZXJlZCxcbiAgKSB7XG4gICAgcmVxdWlyZUJvdENoYW5uZWxQZXJtaXNzaW9ucyhib3QsIGNoYW5uZWxJZCwgW1xuICAgICAgXCJSRUFEX01FU1NBR0VfSElTVE9SWVwiLFxuICAgICAgXCJBRERfUkVBQ1RJT05TXCIsXG4gICAgXSk7XG5cbiAgICByZXR1cm4gYXdhaXQgYWRkUmVhY3Rpb25zT2xkKGNoYW5uZWxJZCwgbWVzc2FnZUlkLCByZWFjdGlvbnMsIG9yZGVyZWQpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUmVhY3Rpb24oYm90OiBCb3RXaXRoQ2FjaGUpIHtcbiAgY29uc3QgcmVtb3ZlUmVhY3Rpb25PbGQgPSBib3QuaGVscGVycy5yZW1vdmVSZWFjdGlvbjtcblxuICBib3QuaGVscGVycy5yZW1vdmVSZWFjdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChcbiAgICBjaGFubmVsSWQsXG4gICAgbWVzc2FnZUlkLFxuICAgIHJlYWN0aW9ucyxcbiAgICBvcHRpb25zLFxuICApIHtcbiAgICAvLyBJRiBSRU1PVklORyBPVEhFUiBVU0VSIFBFUk1TIE1BTkFHRSBNRVNTQUdFUyBJUyBSRVFVSVJFRFxuICAgIGlmIChvcHRpb25zPy51c2VySWQpIHtcbiAgICAgIHJlcXVpcmVCb3RDaGFubmVsUGVybWlzc2lvbnMoYm90LCBjaGFubmVsSWQsIFtcbiAgICAgICAgXCJNQU5BR0VfTUVTU0FHRVNcIixcbiAgICAgIF0pO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCByZW1vdmVSZWFjdGlvbk9sZChjaGFubmVsSWQsIG1lc3NhZ2VJZCwgcmVhY3Rpb25zLCBvcHRpb25zKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFsbFJlYWN0aW9ucyhib3Q6IEJvdFdpdGhDYWNoZSkge1xuICBjb25zdCByZW1vdmVBbGxSZWFjdGlvbnNPbGQgPSBib3QuaGVscGVycy5yZW1vdmVBbGxSZWFjdGlvbnM7XG5cbiAgYm90LmhlbHBlcnMucmVtb3ZlQWxsUmVhY3Rpb25zID0gYXN5bmMgZnVuY3Rpb24gKFxuICAgIGNoYW5uZWxJZCxcbiAgICBtZXNzYWdlSWQsXG4gICkge1xuICAgIHJlcXVpcmVCb3RDaGFubmVsUGVybWlzc2lvbnMoYm90LCBjaGFubmVsSWQsIFtcbiAgICAgIFwiTUFOQUdFX01FU1NBR0VTXCIsXG4gICAgXSk7XG5cbiAgICByZXR1cm4gYXdhaXQgcmVtb3ZlQWxsUmVhY3Rpb25zT2xkKGNoYW5uZWxJZCwgbWVzc2FnZUlkKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVJlYWN0aW9uRW1vamkoYm90OiBCb3RXaXRoQ2FjaGUpIHtcbiAgY29uc3QgcmVtb3ZlUmVhY3Rpb25FbW9qaU9sZCA9IGJvdC5oZWxwZXJzLnJlbW92ZVJlYWN0aW9uRW1vamk7XG5cbiAgYm90LmhlbHBlcnMucmVtb3ZlUmVhY3Rpb25FbW9qaSA9IGFzeW5jIGZ1bmN0aW9uIChcbiAgICBjaGFubmVsSWQsXG4gICAgbWVzc2FnZUlkLFxuICAgIHJlYWN0aW9uLFxuICApIHtcbiAgICByZXF1aXJlQm90Q2hhbm5lbFBlcm1pc3Npb25zKGJvdCwgY2hhbm5lbElkLCBbXG4gICAgICBcIk1BTkFHRV9NRVNTQUdFU1wiLFxuICAgIF0pO1xuXG4gICAgcmV0dXJuIGF3YWl0IHJlbW92ZVJlYWN0aW9uRW1vamlPbGQoY2hhbm5lbElkLCBtZXNzYWdlSWQsIHJlYWN0aW9uKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dXBSZWFjdGlvbnNQZXJtQ2hlY2tzKGJvdDogQm90V2l0aENhY2hlKSB7XG4gIGFkZFJlYWN0aW9uKGJvdCk7XG4gIGFkZFJlYWN0aW9ucyhib3QpO1xuICByZW1vdmVSZWFjdGlvbihib3QpO1xuICByZW1vdmVBbGxSZWFjdGlvbnMoYm90KTtcbiAgcmVtb3ZlUmVhY3Rpb25FbW9qaShib3QpO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsNEJBQTRCLFFBQVEsbUJBQW1CLENBQUM7QUFFakUsT0FBTyxTQUFTLFdBQVcsQ0FBQyxHQUFpQixFQUFFO0lBQzdDLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxBQUFDO0lBRS9DLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLGVBQWdCLFNBQVMsRUFBRSxTQUFTLEVBQUUsUUFB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