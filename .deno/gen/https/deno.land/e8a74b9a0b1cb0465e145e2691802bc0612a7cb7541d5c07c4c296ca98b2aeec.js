// TODO: think whether we also need an identifiedShard function
export const MAX_GATEWAY_REQUESTS_PER_INTERVAL = 120;
export const GATEWAY_RATE_LIMIT_RESET_INTERVAL = 60_000; // 60 seconds
export const DEFAULT_HEARTBEAT_INTERVAL = 45000;
export var ShardState;
(function(ShardState) {
    ShardState[ShardState[/** Shard is fully connected to the gateway and receiving events from Discord. */ "Connected"] = 0] = "Connected";
    ShardState[ShardState[/** Shard started to connect to the gateway.
   * This is only used if the shard is not currently trying to identify or resume.
   */ "Connecting"] = 1] = "Connecting";
    ShardState[ShardState[/** Shard got disconnected and reconnection actions have been started. */ "Disconnected"] = 2] = "Disconnected";
    ShardState[ShardState[/** The shard is connected to the gateway but only heartbeating.
   * At this state the shard has not been identified with discord.
   */ "Unidentified"] = 3] = "Unidentified";
    ShardState[ShardState[/** Shard is trying to identify with the gateway to create a new session. */ "Identifying"] = 4] = "Identifying";
    ShardState[ShardState[/** Shard is trying to resume a session with the gateway. */ "Resuming"] = 5] = "Resuming";
    ShardState[ShardState[/** Shard got shut down studied or due to a not (self) fixable error and may not attempt to reconnect on its own. */ "Offline"] = 6] = "Offline";
})(ShardState || (ShardState = {}));
export var ShardSocketCloseCodes;
(function(ShardSocketCloseCodes) {
    ShardSocketCloseCodes[ShardSocketCloseCodes[/** A regular Shard shutdown. */ "Shutdown"] = 3000] = "Shutdown";
    ShardSocketCloseCodes[ShardSocketCloseCodes[/** A resume has been requested and therefore the old connection needs to be closed. */ "ResumeClosingOldConnection"] = 3024] = "ResumeClosingOldConnection";
    ShardSocketCloseCodes[ShardSocketCloseCodes[/** Did not receive a heartbeat ACK in time.
   * Closing the shard and creating a new session.
   */ "ZombiedConnection"] = 3010] = "ZombiedConnection";
    ShardSocketCloseCodes[ShardSocketCloseCodes[/** Discordeno's gateway tests hae been finished, therefore the Shard can be turned off. */ "TestingFinished"] = 3064] = "TestingFinished";
    ShardSocketCloseCodes[ShardSocketCloseCodes[/** Special close code reserved for Discordeno's zero-downtime resharding system. */ "Resharded"] = 3065] = "Resharded";
    ShardSocketCloseCodes[ShardSocketCloseCodes[/** Shard is re-identifying therefore the old connection needs to be closed. */ "ReIdentifying"] = 3066] = "ReIdentifying";
})(ShardSocketCloseCodes || (ShardSocketCloseCodes = {}));
//# sourceMappingURL=data:application/json;base64,