export const MAX_GATEWAY_REQUESTS_PER_INTERVAL = 120;
export const GATEWAY_RATE_LIMIT_RESET_INTERVAL = 60_000;
export const DEFAULT_HEARTBEAT_INTERVAL = 45000;
export var ShardState;
(function (ShardState) {
    ShardState[ShardState["Connected"] = 0] = "Connected";
    ShardState[ShardState["Connecting"] = 1] = "Connecting";
    ShardState[ShardState["Disconnected"] = 2] = "Disconnected";
    ShardState[ShardState["Unidentified"] = 3] = "Unidentified";
    ShardState[ShardState["Identifying"] = 4] = "Identifying";
    ShardState[ShardState["Resuming"] = 5] = "Resuming";
    ShardState[ShardState["Offline"] = 6] = "Offline";
})(ShardState || (ShardState = {}));
export var ShardSocketCloseCodes;
(function (ShardSocketCloseCodes) {
    ShardSocketCloseCodes[ShardSocketCloseCodes["Shutdown"] = 3000] = "Shutdown";
    ShardSocketCloseCodes[ShardSocketCloseCodes["ResumeClosingOldConnection"] = 3024] = "ResumeClosingOldConnection";
    ShardSocketCloseCodes[ShardSocketCloseCodes["ZombiedConnection"] = 3010] = "ZombiedConnection";
    ShardSocketCloseCodes[ShardSocketCloseCodes["TestingFinished"] = 3064] = "TestingFinished";
    ShardSocketCloseCodes[ShardSocketCloseCodes["Resharded"] = 3065] = "Resharded";
    ShardSocketCloseCodes[ShardSocketCloseCodes["ReIdentifying"] = 3066] = "ReIdentifying";
})(ShardSocketCloseCodes || (ShardSocketCloseCodes = {}));
//# sourceMappingURL=data:application/json;base64,