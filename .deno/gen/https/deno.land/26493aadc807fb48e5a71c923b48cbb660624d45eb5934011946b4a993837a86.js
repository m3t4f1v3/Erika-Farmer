import { API_VERSION, BASE_URL, baseEndpoints } from "../util/constants.ts";
export async function runMethod(rest, method, route, body, options) {
    rest.debug(`[REST - RequestCreate] Method: ${method} | URL: ${route} | Retry Count: ${options?.retryCount ?? 0} | Bucket ID: ${options?.bucketId} | Body: ${JSON.stringify(body)}`);
    const errorStack = new Error("Location:");
    // @ts-ignore Breaks deno deploy. Luca said add ts-ignore until it's fixed
    Error.captureStackTrace(errorStack);
    // For proxies we don't need to do any of the legwork so we just forward the request
    if (!baseEndpoints.BASE_URL.startsWith(BASE_URL) && route[0] === "/") {
        const result = await fetch(`${baseEndpoints.BASE_URL}${route}`, {
            body: body ? JSON.stringify(body) : undefined,
            headers: {
                Authorization: rest.secretKey,
                "Content-Type": "application/json"
            },
            method
        }).catch((error)=>{
            errorStack.message = error?.message;
            console.error(error);
            throw errorStack;
        });
        if (!result.ok) {
            errorStack.message = result.statusText;
            console.error(`Error: ${errorStack.message}`);
            throw errorStack;
        }
        return result.status !== 204 ? await result.json() : undefined;
    }
    // No proxy so we need to handle all rate limiting and such
    return new Promise((resolve, reject)=>{
        rest.processRequest(rest, {
            url: route[0] === "/" ? `${BASE_URL}/v${API_VERSION}${route}` : route,
            method,
            reject: (data)=>{
                const restError = rest.convertRestError(errorStack, data);
                reject(restError);
            },
            respond: (data)=>resolve(data.status !== 204 ? JSON.parse(data.body ?? "{}") : undefined)
        }, {
            bucketId: options?.bucketId,
            body: body,
            retryCount: options?.retryCount ?? 0,
            headers: options?.headers
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN0TWFuYWdlciB9IGZyb20gXCIuLi9ib3QudHNcIjtcbmltcG9ydCB7IEFQSV9WRVJTSU9OLCBCQVNFX1VSTCwgYmFzZUVuZHBvaW50cywgSU1BR0VfQkFTRV9VUkwgfSBmcm9tIFwiLi4vdXRpbC9jb25zdGFudHMudHNcIjtcbmltcG9ydCB7IFJlc3RSZXF1ZXN0UmVqZWN0aW9uLCBSZXN0UmVxdWVzdFJlc3BvbnNlIH0gZnJvbSBcIi4vcmVzdC50c1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuTWV0aG9kPFQgPSBhbnk+KFxuICByZXN0OiBSZXN0TWFuYWdlcixcbiAgbWV0aG9kOiBcIkdFVFwiIHwgXCJQT1NUXCIgfCBcIlBVVFwiIHwgXCJERUxFVEVcIiB8IFwiUEFUQ0hcIixcbiAgcm91dGU6IHN0cmluZyxcbiAgYm9keT86IHVua25vd24sXG4gIG9wdGlvbnM/OiB7XG4gICAgcmV0cnlDb3VudD86IG51bWJlcjtcbiAgICBidWNrZXRJZD86IHN0cmluZztcbiAgICBoZWFkZXJzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgfSxcbik6IFByb21pc2U8VD4ge1xuICByZXN0LmRlYnVnKFxuICAgIGBbUkVTVCAtIFJlcXVlc3RDcmVhdGVdIE1ldGhvZDogJHttZXRob2R9IHwgVVJMOiAke3JvdXRlfSB8IFJldHJ5IENvdW50OiAke1xuICAgICAgb3B0aW9ucz8ucmV0cnlDb3VudCA/PyAwXG4gICAgfSB8IEJ1Y2tldCBJRDogJHtvcHRpb25zPy5idWNrZXRJZH0gfCBCb2R5OiAke1xuICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIGJvZHksXG4gICAgICApXG4gICAgfWAsXG4gICk7XG5cbiAgY29uc3QgZXJyb3JTdGFjayA9IG5ldyBFcnJvcihcIkxvY2F0aW9uOlwiKTtcbiAgLy8gQHRzLWlnbm9yZSBCcmVha3MgZGVubyBkZXBsb3kuIEx1Y2Egc2FpZCBhZGQgdHMtaWdub3JlIHVudGlsIGl0J3MgZml4ZWRcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3JTdGFjayk7XG5cbiAgLy8gRm9yIHByb3hpZXMgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnkgb2YgdGhlIGxlZ3dvcmsgc28gd2UganVzdCBmb3J3YXJkIHRoZSByZXF1ZXN0XG4gIGlmICghYmFzZUVuZHBvaW50cy5CQVNFX1VSTC5zdGFydHNXaXRoKEJBU0VfVVJMKSAmJiByb3V0ZVswXSA9PT0gXCIvXCIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaChgJHtiYXNlRW5kcG9pbnRzLkJBU0VfVVJMfSR7cm91dGV9YCwge1xuICAgICAgYm9keTogYm9keSA/IEpTT04uc3RyaW5naWZ5KGJvZHkpIDogdW5kZWZpbmVkLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBdXRob3JpemF0aW9uOiByZXN0LnNlY3JldEtleSxcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9LFxuICAgICAgbWV0aG9kLFxuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgZXJyb3JTdGFjay5tZXNzYWdlID0gKGVycm9yIGFzIEVycm9yKT8ubWVzc2FnZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3JTdGFjaztcbiAgICB9KTtcblxuICAgIGlmICghcmVzdWx0Lm9rKSB7XG4gICAgICBlcnJvclN0YWNrLm1lc3NhZ2UgPSByZXN1bHQuc3RhdHVzVGV4dCBhcyBFcnJvcltcIm1lc3NhZ2VcIl07XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvcjogJHtlcnJvclN0YWNrLm1lc3NhZ2V9YCk7XG4gICAgICB0aHJvdyBlcnJvclN0YWNrO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQuc3RhdHVzICE9PSAyMDQgPyBhd2FpdCByZXN1bHQuanNvbigpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gTm8gcHJveHkgc28gd2UgbmVlZCB0byBoYW5kbGUgYWxsIHJhdGUgbGltaXRpbmcgYW5kIHN1Y2hcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXN0LnByb2Nlc3NSZXF1ZXN0KFxuICAgICAgcmVzdCxcbiAgICAgIHtcbiAgICAgICAgdXJsOiByb3V0ZVswXSA9PT0gXCIvXCIgPyBgJHtCQVNFX1VSTH0vdiR7QVBJX1ZFUlNJT059JHtyb3V0ZX1gIDogcm91dGUsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcmVqZWN0OiAoZGF0YTogUmVzdFJlcXVlc3RSZWplY3Rpb24pID0+IHtcbiAgICAgICAgICBjb25zdCByZXN0RXJyb3IgPSByZXN0LmNvbnZlcnRSZXN0RXJyb3IoZXJyb3JTdGFjaywgZGF0YSk7XG4gICAgICAgICAgcmVqZWN0KHJlc3RFcnJvcik7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbmQ6IChkYXRhOiBSZXN0UmVxdWVzdFJlc3BvbnNlKSA9PlxuICAgICAgICAgIHJlc29sdmUoZGF0YS5zdGF0dXMgIT09IDIwNCA/IEpTT04ucGFyc2UoZGF0YS5ib2R5ID8/IFwie31cIikgOiAodW5kZWZpbmVkIGFzIHVua25vd24gYXMgVCkpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYnVja2V0SWQ6IG9wdGlvbnM/LmJ1Y2tldElkLFxuICAgICAgICBib2R5OiBib2R5IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5kZWZpbmVkLFxuICAgICAgICByZXRyeUNvdW50OiBvcHRpb25zPy5yZXRyeUNvdW50ID8/IDAsXG4gICAgICAgIGhlYWRlcnM6IG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICB9LFxuICAgICk7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsV0FBVyxFQUFFLFFBQVEsRUFBRSxhQUFhLFFBQXdCLHNCQUFzQixDQUFDO0FBRzVGLE9BQU8sZUFBZSxTQUFTLENBQzdC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