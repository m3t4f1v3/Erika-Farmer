import { Collection } from "../../util/collection.ts";
import { createShard } from "../shard/createShard.ts";
export function createShardManager(options) {
    return {
        createShardOptions: {
            ...options.createShardOptions,
            events: {
                ...options.createShardOptions?.events,
                message: options.createShardOptions?.events?.message ?? options.handleMessage,
            },
        },
        gatewayConfig: options.gatewayConfig,
        shards: new Collection(options.shardIds.map((shardId) => {
            const shard = createShard({
                ...options.createShardOptions,
                id: shardId,
                totalShards: options.totalShards,
                gatewayConfig: options.gatewayConfig,
                requestIdentify: async function () {
                    return await options.requestIdentify(shardId);
                },
            });
            return [shardId, shard];
        })),
        totalShards: options.totalShards,
        identify: async function (shardId) {
            let shard = this.shards.get(shardId);
            if (!shard) {
                shard = createShard({
                    ...this.createShardOptions,
                    id: shardId,
                    totalShards: this.totalShards,
                    gatewayConfig: this.gatewayConfig,
                    requestIdentify: async function () {
                        return await options.requestIdentify(shardId);
                    },
                });
                this.shards.set(shardId, shard);
            }
            return await shard.identify();
        },
        kill: async function (shardId) {
            const shard = this.shards.get(shardId);
            if (!shard)
                return;
            this.shards.delete(shardId);
            return await shard.shutdown();
        },
        requestIdentify: options.requestIdentify,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hhcmRNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQWUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFlbkUsTUFBTSxVQUFVLGtCQUFrQixDQUFDLE9BQTJCO0lBQzVELE9BQU87UUFNTCxrQkFBa0IsRUFBRTtZQUNsQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0I7WUFDN0IsTUFBTSxFQUFFO2dCQUNOLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFLE1BQU07Z0JBQ3JDLE9BQU8sRUFBRSxPQUFPLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsYUFBYTthQUM5RTtTQUNGO1FBRUQsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhO1FBRXBDLE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FDcEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUMvQixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUM7Z0JBQ3hCLEdBQUcsT0FBTyxDQUFDLGtCQUFrQjtnQkFDN0IsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUNoQyxhQUFhLEVBQUUsT0FBTyxDQUFDLGFBQWE7Z0JBQ3BDLGVBQWUsRUFBRSxLQUFLO29CQUNwQixPQUFPLE1BQU0sT0FBTyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDaEQsQ0FBQzthQUNGLENBQUMsQ0FBQztZQUVILE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFVLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQ0g7UUFFRCxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7UUFTaEMsUUFBUSxFQUFFLEtBQUssV0FBVyxPQUFlO1lBQ3ZDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsS0FBSyxHQUFHLFdBQVcsQ0FBQztvQkFDbEIsR0FBRyxJQUFJLENBQUMsa0JBQWtCO29CQUMxQixFQUFFLEVBQUUsT0FBTztvQkFDWCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7b0JBQzdCLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtvQkFDakMsZUFBZSxFQUFFLEtBQUs7d0JBQ3BCLE9BQU8sTUFBTSxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNoRCxDQUFDO2lCQUNGLENBQUMsQ0FBQztnQkFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDakM7WUFFRCxPQUFPLE1BQU0sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLENBQUM7UUFLRCxJQUFJLEVBQUUsS0FBSyxXQUFXLE9BQWU7WUFDbkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLEtBQUs7Z0JBQUUsT0FBTztZQUVuQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QixPQUFPLE1BQU0sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLENBQUM7UUFLRCxlQUFlLEVBQUUsT0FBTyxDQUFDLGVBQWU7S0FDekMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXNjb3JkR2F0ZXdheVBheWxvYWQgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZGlzY29yZC50c1wiO1xuaW1wb3J0IHsgUGlja1BhcnRpYWwgfSBmcm9tIFwiLi4vLi4vdHlwZXMvc2hhcmVkLnRzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSBcIi4uLy4uL3V0aWwvY29sbGVjdGlvbi50c1wiO1xuaW1wb3J0IHsgQ3JlYXRlU2hhcmQsIGNyZWF0ZVNoYXJkIH0gZnJvbSBcIi4uL3NoYXJkL2NyZWF0ZVNoYXJkLnRzXCI7XG5pbXBvcnQgeyBTaGFyZCwgU2hhcmRHYXRld2F5Q29uZmlnIH0gZnJvbSBcIi4uL3NoYXJkL3R5cGVzLnRzXCI7XG5cbi8vIFRPRE86IGRlYnVnXG5cbi8qKiBUaGlzIGlzIGEgU2hhcmQgbWFuYWdlci5cbiAqIFRoaXMgZG9lcyBub3QgbWFuYWdlIGEgc3BlY2lmaWMgcmFuZ2Ugb2YgU2hhcmQgYnV0IHRoZSBwcm92aWRlZCBTaGFyZHMgb24gY3JlYXRlIG9yIHdoZW4gYW4gaWRlbnRpZnkgaXMgcmVxdWVzdGVkLlxuICogVGhlIGFpbSBvZiB0aGlzIGlzIHRvIHByb3ZpZGUgYW4gZWFzeSB0byB1c2UgbWFuYWdlciB3aGljaCBjYW4gYmUgdXNlZCBieSB3b3JrZXJzIG9yIGFueSBvdGhlciBraW5kIG9mIHNlcGFyYXRlIHByb2Nlc3MuXG4gKi9cbmV4cG9ydCB0eXBlIFNoYXJkTWFuYWdlciA9IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZVNoYXJkTWFuYWdlcj47XG5cbi8qKiBDcmVhdGUgYSBuZXcgU2hhcmQgbWFuYWdlci5cbiAqIFRoaXMgZG9lcyBub3QgbWFuYWdlIGEgc3BlY2lmaWMgcmFuZ2Ugb2YgU2hhcmQgYnV0IHRoZSBwcm92aWRlZCBTaGFyZHMgb24gY3JlYXRlIG9yIHdoZW4gYW4gaWRlbnRpZnkgaXMgcmVxdWVzdGVkLlxuICogVGhlIGFpbSBvZiB0aGlzIGlzIHRvIHByb3ZpZGUgYW4gZWFzeSB0byB1c2UgbWFuYWdlciB3aGljaCBjYW4gYmUgdXNlZCBieSB3b3JrZXJzIG9yIGFueSBvdGhlciBraW5kIG9mIHNlcGFyYXRlIHByb2Nlc3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaGFyZE1hbmFnZXIob3B0aW9uczogQ3JlYXRlU2hhcmRNYW5hZ2VyKSB7XG4gIHJldHVybiB7XG4gICAgLy8gLS0tLS0tLS0tLVxuICAgIC8vIFBST1BFUlRJRVNcbiAgICAvLyAtLS0tLS0tLS0tXG5cbiAgICAvKiogT3B0aW9ucyB3aGljaCBhcmUgdXNlZCB0byBjcmVhdGUgYSBuZXcgU2hhcmQuICovXG4gICAgY3JlYXRlU2hhcmRPcHRpb25zOiB7XG4gICAgICAuLi5vcHRpb25zLmNyZWF0ZVNoYXJkT3B0aW9ucyxcbiAgICAgIGV2ZW50czoge1xuICAgICAgICAuLi5vcHRpb25zLmNyZWF0ZVNoYXJkT3B0aW9ucz8uZXZlbnRzLFxuICAgICAgICBtZXNzYWdlOiBvcHRpb25zLmNyZWF0ZVNoYXJkT3B0aW9ucz8uZXZlbnRzPy5tZXNzYWdlID8/IG9wdGlvbnMuaGFuZGxlTWVzc2FnZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICAvKiogR2F0ZXdheSBjb25maWd1cmF0aW9uIHdoaWNoIGlzIHVzZWQgd2hlbiBjcmVhdGluZyBhIFNoYXJkLiAqL1xuICAgIGdhdGV3YXlDb25maWc6IG9wdGlvbnMuZ2F0ZXdheUNvbmZpZyxcbiAgICAvKiogTWFuYWdlZCBTaGFyZHMuICovXG4gICAgc2hhcmRzOiBuZXcgQ29sbGVjdGlvbihcbiAgICAgIG9wdGlvbnMuc2hhcmRJZHMubWFwKChzaGFyZElkKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoYXJkID0gY3JlYXRlU2hhcmQoe1xuICAgICAgICAgIC4uLm9wdGlvbnMuY3JlYXRlU2hhcmRPcHRpb25zLFxuICAgICAgICAgIGlkOiBzaGFyZElkLFxuICAgICAgICAgIHRvdGFsU2hhcmRzOiBvcHRpb25zLnRvdGFsU2hhcmRzLFxuICAgICAgICAgIGdhdGV3YXlDb25maWc6IG9wdGlvbnMuZ2F0ZXdheUNvbmZpZyxcbiAgICAgICAgICByZXF1ZXN0SWRlbnRpZnk6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBvcHRpb25zLnJlcXVlc3RJZGVudGlmeShzaGFyZElkKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gW3NoYXJkSWQsIHNoYXJkXSBhcyBjb25zdDtcbiAgICAgIH0pLFxuICAgICksXG4gICAgLyoqIFRvdGFsIGFtb3VudCBvZiBTaGFyZHMgdXNlZCBieSB0aGUgYm90LiAqL1xuICAgIHRvdGFsU2hhcmRzOiBvcHRpb25zLnRvdGFsU2hhcmRzLFxuXG4gICAgLy8gLS0tLS0tLS0tLVxuICAgIC8vIE1FVEhPRFNcbiAgICAvLyAtLS0tLS0tLS0tXG5cbiAgICAvKiogVGVsbCB0aGUgbWFuYWdlciB0byBpZGVudGlmeSBhIFNoYXJkLlxuICAgICAqIElmIHRoaXMgU2hhcmQgaXMgbm90IGFscmVhZHkgbWFuYWdlZCB0aGlzIHdpbGwgYWxzbyBhZGQgdGhlIFNoYXJkIHRvIHRoZSBtYW5hZ2VyLlxuICAgICAqL1xuICAgIGlkZW50aWZ5OiBhc3luYyBmdW5jdGlvbiAoc2hhcmRJZDogbnVtYmVyKSB7XG4gICAgICBsZXQgc2hhcmQgPSB0aGlzLnNoYXJkcy5nZXQoc2hhcmRJZCk7XG4gICAgICBpZiAoIXNoYXJkKSB7XG4gICAgICAgIHNoYXJkID0gY3JlYXRlU2hhcmQoe1xuICAgICAgICAgIC4uLnRoaXMuY3JlYXRlU2hhcmRPcHRpb25zLFxuICAgICAgICAgIGlkOiBzaGFyZElkLFxuICAgICAgICAgIHRvdGFsU2hhcmRzOiB0aGlzLnRvdGFsU2hhcmRzLFxuICAgICAgICAgIGdhdGV3YXlDb25maWc6IHRoaXMuZ2F0ZXdheUNvbmZpZyxcbiAgICAgICAgICByZXF1ZXN0SWRlbnRpZnk6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBvcHRpb25zLnJlcXVlc3RJZGVudGlmeShzaGFyZElkKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNoYXJkcy5zZXQoc2hhcmRJZCwgc2hhcmQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXdhaXQgc2hhcmQuaWRlbnRpZnkoKTtcbiAgICB9LFxuXG4gICAgLyoqIEtpbGwgYSBzaGFyZC5cbiAgICAgKiBDbG9zZSBhIHNoYXJkcyBjb25uZWN0aW9uIHRvIERpc2NvcmQncyBnYXRld2F5IChpZiBhbnkpIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgbWFuYWdlci5cbiAgICAgKi9cbiAgICBraWxsOiBhc3luYyBmdW5jdGlvbiAoc2hhcmRJZDogbnVtYmVyKSB7XG4gICAgICBjb25zdCBzaGFyZCA9IHRoaXMuc2hhcmRzLmdldChzaGFyZElkKTtcbiAgICAgIGlmICghc2hhcmQpIHJldHVybjtcblxuICAgICAgdGhpcy5zaGFyZHMuZGVsZXRlKHNoYXJkSWQpO1xuICAgICAgcmV0dXJuIGF3YWl0IHNoYXJkLnNodXRkb3duKCk7XG4gICAgfSxcblxuICAgIC8qKiBUaGlzIGZ1bmN0aW9uIGNvbW11bmljYXRlcyB3aXRoIHRoZSBwYXJlbnQgbWFuYWdlcixcbiAgICAgKiBpbiBvcmRlciB0byBrbm93IHdoZXRoZXIgdGhpcyBtYW5hZ2VyIGlzIGFsbG93ZWQgdG8gaWRlbnRpZnkgYSBuZXcgc2hhcmQuXG4gICAgICovXG4gICAgcmVxdWVzdElkZW50aWZ5OiBvcHRpb25zLnJlcXVlc3RJZGVudGlmeSxcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVTaGFyZE1hbmFnZXIge1xuICAvLyAtLS0tLS0tLS0tXG4gIC8vIFBST1BFUlRJRVNcbiAgLy8gLS0tLS0tLS0tLVxuICAvKiogT3B0aW9ucyB3aGljaCBhcmUgdXNlZCB0byBjcmVhdGUgYSBuZXcgU2hhcmQuICovXG4gIGNyZWF0ZVNoYXJkT3B0aW9ucz86IE9taXQ8Q3JlYXRlU2hhcmQsIFwiaWRcIiB8IFwidG90YWxTaGFyZHNcIiB8IFwicmVxdWVzdElkZW50aWZ5XCIgfCBcImdhdGV3YXlDb25maWdcIj47XG4gIC8qKiBHYXRld2F5IGNvbmZpZ3VyYXRpb24gd2hpY2ggaXMgdXNlZCB3aGVuIGNyZWF0aW5nIGEgU2hhcmQuICovXG4gIGdhdGV3YXlDb25maWc6IFBpY2tQYXJ0aWFsPFNoYXJkR2F0ZXdheUNvbmZpZywgXCJ0b2tlblwiPjtcbiAgLyoqIElkcyBvZiB0aGUgU2hhcmRzIHdoaWNoIHNob3VsZCBiZSBtYW5hZ2VkLiAqL1xuICBzaGFyZElkczogbnVtYmVyW107XG4gIC8qKiBUb3RhbCBhbW91bnQgb2YgU2hhcmQgdXNlZCBieSB0aGUgYm90LiAqL1xuICB0b3RhbFNoYXJkczogbnVtYmVyO1xuXG4gIC8vIC0tLS0tLS0tLS1cbiAgLy8gTUVUSE9EU1xuICAvLyAtLS0tLS0tLS0tXG5cbiAgLyoqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIGEgc2hhcmQgcmVjZWl2ZXMgYW55IG1lc3NhZ2UgZnJvbSBEaXNjb3JkLiAqL1xuICBoYW5kbGVNZXNzYWdlKHNoYXJkOiBTaGFyZCwgbWVzc2FnZTogRGlzY29yZEdhdGV3YXlQYXlsb2FkKTogdW5rbm93bjtcblxuICAvKiogVGhpcyBmdW5jdGlvbiBjb21tdW5pY2F0ZXMgd2l0aCB0aGUgcGFyZW50IG1hbmFnZXIsXG4gICAqIGluIG9yZGVyIHRvIGtub3cgd2hldGhlciB0aGlzIG1hbmFnZXIgaXMgYWxsb3dlZCB0byBpZGVudGlmeSBhIG5ldyBzaGFyZC4gI1xuICAgKi9cbiAgcmVxdWVzdElkZW50aWZ5KHNoYXJkSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD47XG59XG4iXX0=