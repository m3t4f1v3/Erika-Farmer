import setupChannelPermChecks from "./src/channels/mod.ts";
import setupDiscoveryPermChecks from "./src/discovery.ts";
import setupEditMember from "./src/editMember.ts";
import setupEmojiPermChecks from "./src/emojis.ts";
import setupGuildPermChecks from "./src/guilds/mod.ts";
import setupIntegrationPermChecks from "./src/integrations.ts";
import setupInteractionPermChecks from "./src/interactions/mod.ts";
import setupInvitesPermChecks from "./src/invites.ts";
import setupMemberPermChecks from "./src/members/mod.ts";
import setupMessagePermChecks from "./src/messages/mod.ts";
import setupMiscPermChecks from "./src/misc/mod.ts";
import setupRolePermChecks from "./src/roles/mod.ts";
import setupWebhooksPermChecks from "./src/webhooks/mod.ts";
// PLUGINS MUST TAKE A BOT ARGUMENT WHICH WILL BE MODIFIED
export function enablePermissionsPlugin(bot) {
    // PERM CHECKS REQUIRE CACHE DUH!
    if (!bot.enabledPlugins?.has("CACHE")) {
        throw new Error("The PERMISSIONS plugin requires the CACHE plugin first.");
    }
    // MARK THIS PLUGIN BEING USED
    bot.enabledPlugins.add("PERMISSIONS");
    // BEGIN OVERRIDING HELPER FUNCTIONS
    setupChannelPermChecks(bot);
    setupDiscoveryPermChecks(bot);
    setupEmojiPermChecks(bot);
    setupEditMember(bot);
    setupGuildPermChecks(bot);
    setupIntegrationPermChecks(bot);
    setupInteractionPermChecks(bot);
    setupInvitesPermChecks(bot);
    setupMemberPermChecks(bot);
    setupMessagePermChecks(bot);
    setupMiscPermChecks(bot);
    setupRolePermChecks(bot);
    setupWebhooksPermChecks(bot);
    // PLUGINS MUST RETURN THE BOT
    return bot;
}
// EXPORT ALL UTIL FUNCTIONS
export * from "./src/permissions.ts";
export * from "./src/components.ts";
// DEFAULT MAKES IT SLIGHTLY EASIER TO USE
export default enablePermissionsPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3QsIEJvdFdpdGhDYWNoZSB9IGZyb20gXCIuL2RlcHMudHNcIjtcbmltcG9ydCBzZXR1cENoYW5uZWxQZXJtQ2hlY2tzIGZyb20gXCIuL3NyYy9jaGFubmVscy9tb2QudHNcIjtcbmltcG9ydCBzZXR1cERpc2NvdmVyeVBlcm1DaGVja3MgZnJvbSBcIi4vc3JjL2Rpc2NvdmVyeS50c1wiO1xuaW1wb3J0IHNldHVwRWRpdE1lbWJlciBmcm9tIFwiLi9zcmMvZWRpdE1lbWJlci50c1wiO1xuaW1wb3J0IHNldHVwRW1vamlQZXJtQ2hlY2tzIGZyb20gXCIuL3NyYy9lbW9qaXMudHNcIjtcbmltcG9ydCBzZXR1cEd1aWxkUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvZ3VpbGRzL21vZC50c1wiO1xuaW1wb3J0IHNldHVwSW50ZWdyYXRpb25QZXJtQ2hlY2tzIGZyb20gXCIuL3NyYy9pbnRlZ3JhdGlvbnMudHNcIjtcbmltcG9ydCBzZXR1cEludGVyYWN0aW9uUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvaW50ZXJhY3Rpb25zL21vZC50c1wiO1xuaW1wb3J0IHNldHVwSW52aXRlc1Blcm1DaGVja3MgZnJvbSBcIi4vc3JjL2ludml0ZXMudHNcIjtcbmltcG9ydCBzZXR1cE1lbWJlclBlcm1DaGVja3MgZnJvbSBcIi4vc3JjL21lbWJlcnMvbW9kLnRzXCI7XG5pbXBvcnQgc2V0dXBNZXNzYWdlUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvbWVzc2FnZXMvbW9kLnRzXCI7XG5pbXBvcnQgc2V0dXBNaXNjUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvbWlzYy9tb2QudHNcIjtcbmltcG9ydCBzZXR1cFJvbGVQZXJtQ2hlY2tzIGZyb20gXCIuL3NyYy9yb2xlcy9tb2QudHNcIjtcbmltcG9ydCBzZXR1cFdlYmhvb2tzUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvd2ViaG9va3MvbW9kLnRzXCI7XG5cbi8vIFBMVUdJTlMgTVVTVCBUQUtFIEEgQk9UIEFSR1VNRU5UIFdISUNIIFdJTEwgQkUgTU9ESUZJRURcbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVQZXJtaXNzaW9uc1BsdWdpbjxCIGV4dGVuZHMgQm90V2l0aENhY2hlID0gQm90V2l0aENhY2hlPihib3Q6IEIpOiBCIHtcbiAgLy8gUEVSTSBDSEVDS1MgUkVRVUlSRSBDQUNIRSBEVUghXG4gIGlmICghYm90LmVuYWJsZWRQbHVnaW5zPy5oYXMoXCJDQUNIRVwiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBQRVJNSVNTSU9OUyBwbHVnaW4gcmVxdWlyZXMgdGhlIENBQ0hFIHBsdWdpbiBmaXJzdC5cIik7XG4gIH1cblxuICAvLyBNQVJLIFRISVMgUExVR0lOIEJFSU5HIFVTRURcbiAgYm90LmVuYWJsZWRQbHVnaW5zLmFkZChcIlBFUk1JU1NJT05TXCIpO1xuXG4gIC8vIEJFR0lOIE9WRVJSSURJTkcgSEVMUEVSIEZVTkNUSU9OU1xuICBzZXR1cENoYW5uZWxQZXJtQ2hlY2tzKGJvdCk7XG4gIHNldHVwRGlzY292ZXJ5UGVybUNoZWNrcyhib3QpO1xuICBzZXR1cEVtb2ppUGVybUNoZWNrcyhib3QpO1xuICBzZXR1cEVkaXRNZW1iZXIoYm90KTtcbiAgc2V0dXBHdWlsZFBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBJbnRlZ3JhdGlvblBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBJbnRlcmFjdGlvblBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBJbnZpdGVzUGVybUNoZWNrcyhib3QpO1xuICBzZXR1cE1lbWJlclBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBNZXNzYWdlUGVybUNoZWNrcyhib3QpO1xuICBzZXR1cE1pc2NQZXJtQ2hlY2tzKGJvdCk7XG4gIHNldHVwUm9sZVBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBXZWJob29rc1Blcm1DaGVja3MoYm90KTtcblxuICAvLyBQTFVHSU5TIE1VU1QgUkVUVVJOIFRIRSBCT1RcbiAgcmV0dXJuIGJvdDtcbn1cblxuLy8gRVhQT1JUIEFMTCBVVElMIEZVTkNUSU9OU1xuZXhwb3J0ICogZnJvbSBcIi4vc3JjL3Blcm1pc3Npb25zLnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zcmMvY29tcG9uZW50cy50c1wiO1xuLy8gREVGQVVMVCBNQUtFUyBJVCBTTElHSFRMWSBFQVNJRVIgVE8gVVNFXG5leHBvcnQgZGVmYXVsdCBlbmFibGVQZXJtaXNzaW9uc1BsdWdpbjtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLHNCQUFzQixNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sd0JBQXdCLE1BQU0sb0JBQW9CLENBQUM7QUFDMUQsT0FBTyxlQUFlLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxvQkFBb0IsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLG9CQUFvQixNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sMEJBQTBCLE1BQU0sdUJBQXVCLENBQUM7QUFDL0QsT0FBTywwQkFBMEIsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRSxPQUFPLHNCQUFzQixNQUFNLGtCQUFrQixDQUFDO0FBQ3RELE9BQU8scUJBQXFCLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxzQkFBc0IsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLG1CQUFtQixNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sbUJBQW1CLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyx1QkFBdUIsTUFBTSx1QkFBdUIsQ0FBQztBQUU1RCwwREFBMEQ7QUFDMUQsT0FBTyxTQUFTLHVCQUF1QixDQUF3QyxHQUFNLEVBQUs7SUFDeEYsaUNBQWlDO0lBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7S0FDNUU7SUFFRCw4QkFBOEI7SUFDOUIsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFdEMsb0NBQW9DO0lBQ3BDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQixvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQiwwQkFBMEIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQywwQkFBMEIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6Qix1QkFBdUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU3Qiw4QkFBOEI7SUFDOUIsT0FBTyxHQUFHLENBQUM7Q0FDWjtBQUVELDRCQUE0QjtBQUM1QixjQUFjLHNCQUFzQixDQUFDO0FBQ3JDLGNBQWMscUJBQXFCLENBQUM7QUFDcEMsMENBQTBDO0FBQzFDLGVBQWUsdUJBQXVCLENBQUMifQ==