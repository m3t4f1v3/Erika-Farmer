import setupChannelPermChecks from "./src/channels/mod.ts";
import setupDiscoveryPermChecks from "./src/discovery.ts";
import setupEditMember from "./src/editMember.ts";
import setupEmojiPermChecks from "./src/emojis.ts";
import setupGuildPermChecks from "./src/guilds/mod.ts";
import setupIntegrationPermChecks from "./src/integrations.ts";
import setupInteractionPermChecks from "./src/interactions/mod.ts";
import setupInvitesPermChecks from "./src/invites.ts";
import setupMemberPermChecks from "./src/members/mod.ts";
import setupMessagePermChecks from "./src/messages/mod.ts";
import setupMiscPermChecks from "./src/misc/mod.ts";
import setupRolePermChecks from "./src/roles/mod.ts";
import setupWebhooksPermChecks from "./src/webhooks/mod.ts";
export function enablePermissionsPlugin(bot) {
    if (!bot.enabledPlugins?.has("CACHE")) {
        throw new Error("The PERMISSIONS plugin requires the CACHE plugin first.");
    }
    bot.enabledPlugins.add("PERMISSIONS");
    setupChannelPermChecks(bot);
    setupDiscoveryPermChecks(bot);
    setupEmojiPermChecks(bot);
    setupEditMember(bot);
    setupGuildPermChecks(bot);
    setupIntegrationPermChecks(bot);
    setupInteractionPermChecks(bot);
    setupInvitesPermChecks(bot);
    setupMemberPermChecks(bot);
    setupMessagePermChecks(bot);
    setupMiscPermChecks(bot);
    setupRolePermChecks(bot);
    setupWebhooksPermChecks(bot);
    return bot;
}
export * from "./src/permissions.ts";
export * from "./src/components.ts";
export default enablePermissionsPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sc0JBQXNCLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyx3QkFBd0IsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRCxPQUFPLGVBQWUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLG9CQUFvQixNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sb0JBQW9CLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTywwQkFBMEIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLDBCQUEwQixNQUFNLDJCQUEyQixDQUFDO0FBQ25FLE9BQU8sc0JBQXNCLE1BQU0sa0JBQWtCLENBQUM7QUFDdEQsT0FBTyxxQkFBcUIsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLHNCQUFzQixNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sbUJBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxtQkFBbUIsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLHVCQUF1QixNQUFNLHVCQUF1QixDQUFDO0FBRzVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBd0MsR0FBTTtJQUVuRixJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO0tBQzVFO0lBR0QsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFHdEMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsd0JBQXdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRzdCLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUdELGNBQWMsc0JBQXNCLENBQUM7QUFDckMsY0FBYyxxQkFBcUIsQ0FBQztBQUVwQyxlQUFlLHVCQUF1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm90LCBCb3RXaXRoQ2FjaGUgfSBmcm9tIFwiLi9kZXBzLnRzXCI7XG5pbXBvcnQgc2V0dXBDaGFubmVsUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvY2hhbm5lbHMvbW9kLnRzXCI7XG5pbXBvcnQgc2V0dXBEaXNjb3ZlcnlQZXJtQ2hlY2tzIGZyb20gXCIuL3NyYy9kaXNjb3ZlcnkudHNcIjtcbmltcG9ydCBzZXR1cEVkaXRNZW1iZXIgZnJvbSBcIi4vc3JjL2VkaXRNZW1iZXIudHNcIjtcbmltcG9ydCBzZXR1cEVtb2ppUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvZW1vamlzLnRzXCI7XG5pbXBvcnQgc2V0dXBHdWlsZFBlcm1DaGVja3MgZnJvbSBcIi4vc3JjL2d1aWxkcy9tb2QudHNcIjtcbmltcG9ydCBzZXR1cEludGVncmF0aW9uUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvaW50ZWdyYXRpb25zLnRzXCI7XG5pbXBvcnQgc2V0dXBJbnRlcmFjdGlvblBlcm1DaGVja3MgZnJvbSBcIi4vc3JjL2ludGVyYWN0aW9ucy9tb2QudHNcIjtcbmltcG9ydCBzZXR1cEludml0ZXNQZXJtQ2hlY2tzIGZyb20gXCIuL3NyYy9pbnZpdGVzLnRzXCI7XG5pbXBvcnQgc2V0dXBNZW1iZXJQZXJtQ2hlY2tzIGZyb20gXCIuL3NyYy9tZW1iZXJzL21vZC50c1wiO1xuaW1wb3J0IHNldHVwTWVzc2FnZVBlcm1DaGVja3MgZnJvbSBcIi4vc3JjL21lc3NhZ2VzL21vZC50c1wiO1xuaW1wb3J0IHNldHVwTWlzY1Blcm1DaGVja3MgZnJvbSBcIi4vc3JjL21pc2MvbW9kLnRzXCI7XG5pbXBvcnQgc2V0dXBSb2xlUGVybUNoZWNrcyBmcm9tIFwiLi9zcmMvcm9sZXMvbW9kLnRzXCI7XG5pbXBvcnQgc2V0dXBXZWJob29rc1Blcm1DaGVja3MgZnJvbSBcIi4vc3JjL3dlYmhvb2tzL21vZC50c1wiO1xuXG4vLyBQTFVHSU5TIE1VU1QgVEFLRSBBIEJPVCBBUkdVTUVOVCBXSElDSCBXSUxMIEJFIE1PRElGSUVEXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlUGVybWlzc2lvbnNQbHVnaW48QiBleHRlbmRzIEJvdFdpdGhDYWNoZSA9IEJvdFdpdGhDYWNoZT4oYm90OiBCKTogQiB7XG4gIC8vIFBFUk0gQ0hFQ0tTIFJFUVVJUkUgQ0FDSEUgRFVIIVxuICBpZiAoIWJvdC5lbmFibGVkUGx1Z2lucz8uaGFzKFwiQ0FDSEVcIikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgUEVSTUlTU0lPTlMgcGx1Z2luIHJlcXVpcmVzIHRoZSBDQUNIRSBwbHVnaW4gZmlyc3QuXCIpO1xuICB9XG5cbiAgLy8gTUFSSyBUSElTIFBMVUdJTiBCRUlORyBVU0VEXG4gIGJvdC5lbmFibGVkUGx1Z2lucy5hZGQoXCJQRVJNSVNTSU9OU1wiKTtcblxuICAvLyBCRUdJTiBPVkVSUklESU5HIEhFTFBFUiBGVU5DVElPTlNcbiAgc2V0dXBDaGFubmVsUGVybUNoZWNrcyhib3QpO1xuICBzZXR1cERpc2NvdmVyeVBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBFbW9qaVBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBFZGl0TWVtYmVyKGJvdCk7XG4gIHNldHVwR3VpbGRQZXJtQ2hlY2tzKGJvdCk7XG4gIHNldHVwSW50ZWdyYXRpb25QZXJtQ2hlY2tzKGJvdCk7XG4gIHNldHVwSW50ZXJhY3Rpb25QZXJtQ2hlY2tzKGJvdCk7XG4gIHNldHVwSW52aXRlc1Blcm1DaGVja3MoYm90KTtcbiAgc2V0dXBNZW1iZXJQZXJtQ2hlY2tzKGJvdCk7XG4gIHNldHVwTWVzc2FnZVBlcm1DaGVja3MoYm90KTtcbiAgc2V0dXBNaXNjUGVybUNoZWNrcyhib3QpO1xuICBzZXR1cFJvbGVQZXJtQ2hlY2tzKGJvdCk7XG4gIHNldHVwV2ViaG9va3NQZXJtQ2hlY2tzKGJvdCk7XG5cbiAgLy8gUExVR0lOUyBNVVNUIFJFVFVSTiBUSEUgQk9UXG4gIHJldHVybiBib3Q7XG59XG5cbi8vIEVYUE9SVCBBTEwgVVRJTCBGVU5DVElPTlNcbmV4cG9ydCAqIGZyb20gXCIuL3NyYy9wZXJtaXNzaW9ucy50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3JjL2NvbXBvbmVudHMudHNcIjtcbi8vIERFRkFVTFQgTUFLRVMgSVQgU0xJR0hUTFkgRUFTSUVSIFRPIFVTRVxuZXhwb3J0IGRlZmF1bHQgZW5hYmxlUGVybWlzc2lvbnNQbHVnaW47XG4iXX0=