// Left out proxy request, because it's not needed here
// this file could also be moved to a plugin.
export async function runProxyMethod(rest, method, url, body, retryCount = 0, bucketId) {
    rest.debug(`[REST - RequestCreate] Method: ${method} | URL: ${url} | Retry Count: ${retryCount} | Bucket ID: ${bucketId} | Body: ${JSON.stringify(body)}`);
    // No proxy so we need to handle all rate limiting and such
    return new Promise((resolve, reject)=>{
        rest.processRequest(rest, {
            url,
            method,
            reject: (data)=>{
                const { body: b , ...r } = data;
                reject({
                    body: data.status !== 204 ? JSON.parse(b ?? "{}") : undefined,
                    ...r
                });
            },
            respond: (data)=>{
                const { body: b , ...r } = data;
                resolve({
                    body: data.status !== 204 ? JSON.parse(b ?? "{}") : undefined,
                    ...r
                });
            }
        }, {
            bucketId,
            body: body,
            retryCount
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN0TWFuYWdlciB9IGZyb20gXCIuLi9ib3QudHNcIjtcbmltcG9ydCB7IFJlc3RSZXF1ZXN0UmVqZWN0aW9uLCBSZXN0UmVxdWVzdFJlc3BvbnNlIH0gZnJvbSBcIi4vcmVzdC50c1wiO1xuXG5leHBvcnQgdHlwZSBQcm94eU1ldGhvZFJlc3BvbnNlPFQ+ID0gT21pdDxSZXN0UmVxdWVzdFJlc3BvbnNlIHwgUmVzdFJlcXVlc3RSZWplY3Rpb24sIFwiYm9keVwiPiAmIHsgYm9keT86IFQgfTtcblxuLy8gTGVmdCBvdXQgcHJveHkgcmVxdWVzdCwgYmVjYXVzZSBpdCdzIG5vdCBuZWVkZWQgaGVyZVxuLy8gdGhpcyBmaWxlIGNvdWxkIGFsc28gYmUgbW92ZWQgdG8gYSBwbHVnaW4uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuUHJveHlNZXRob2Q8VCA9IGFueT4oXG4gIHJlc3Q6IFJlc3RNYW5hZ2VyLFxuICBtZXRob2Q6IFwiR0VUXCIgfCBcIlBPU1RcIiB8IFwiUFVUXCIgfCBcIkRFTEVURVwiIHwgXCJQQVRDSFwiLFxuICB1cmw6IHN0cmluZyxcbiAgYm9keT86IHVua25vd24sXG4gIHJldHJ5Q291bnQgPSAwLFxuICBidWNrZXRJZD86IHN0cmluZyxcbik6IFByb21pc2U8UHJveHlNZXRob2RSZXNwb25zZTxUPj4ge1xuICByZXN0LmRlYnVnKFxuICAgIGBbUkVTVCAtIFJlcXVlc3RDcmVhdGVdIE1ldGhvZDogJHttZXRob2R9IHwgVVJMOiAke3VybH0gfCBSZXRyeSBDb3VudDogJHtyZXRyeUNvdW50fSB8IEJ1Y2tldCBJRDogJHtidWNrZXRJZH0gfCBCb2R5OiAke1xuICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIGJvZHksXG4gICAgICApXG4gICAgfWAsXG4gICk7XG5cbiAgLy8gTm8gcHJveHkgc28gd2UgbmVlZCB0byBoYW5kbGUgYWxsIHJhdGUgbGltaXRpbmcgYW5kIHN1Y2hcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXN0LnByb2Nlc3NSZXF1ZXN0KFxuICAgICAgcmVzdCxcbiAgICAgIHtcbiAgICAgICAgdXJsLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIHJlamVjdDogKGRhdGE6IFJlc3RSZXF1ZXN0UmVqZWN0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBib2R5OiBiLCAuLi5yIH0gPSBkYXRhO1xuICAgICAgICAgIHJlamVjdCh7IGJvZHk6IGRhdGEuc3RhdHVzICE9PSAyMDQgPyBKU09OLnBhcnNlKGIgPz8gXCJ7fVwiKSA6ICh1bmRlZmluZWQgYXMgdW5rbm93biBhcyBUKSwgLi4uciB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uZDogKGRhdGE6IFJlc3RSZXF1ZXN0UmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGJvZHk6IGIsIC4uLnIgfSA9IGRhdGE7XG4gICAgICAgICAgcmVzb2x2ZSh7IGJvZHk6IGRhdGEuc3RhdHVzICE9PSAyMDQgPyBKU09OLnBhcnNlKGIgPz8gXCJ7fVwiKSA6ICh1bmRlZmluZWQgYXMgdW5rbm93biBhcyBUKSwgLi4uciB9KTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJ1Y2tldElkLFxuICAgICAgICBib2R5OiBib2R5IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5kZWZpbmVkLFxuICAgICAgICByZXRyeUNvdW50LFxuICAgICAgfSxcbiAgICApO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSx1REFBdUQ7QUFDdkQsNkNBQTZDO0FBQzdDLE9BQU8sZUFBZSxjQUFjLENBQ2xDLElBQWlCLEVBQ2pCLE1BQW1ELEVBQ25ELEdBQVcsRUFDWCxJQUFjLEVBQ2QsVUFBVSxHQUFHLENBQUMsRUFDZCxRQUFpQixFQUNnQjtJQUNqQyxJQUFJLENBQUMsS0FBSyxDQUNSLENBQUMsK0JBQStCLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsU0FBUyxFQUNwSCxJQUFJLENBQUMsU0FBUyxDQUNaLElBQUksQ0FDTCxDQUNGLENBQUMsQ0FDSCxDQUFDO0lBRUYsMkRBQTJEO0lBQzNELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxHQUFLO1FBQ3RDLElBQUksQ0FBQyxjQUFjLENBQ2pCLElBQUksRUFDSjtZQUNFLEdBQUc7WUFDSCxNQUFNO1lBQ04sTUFBTSxFQUFFLENBQUMsSUFBMEIsR0FBSztnQkFDdEMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUEsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQUFBQztnQkFDL0IsTUFBTSxDQUFDO29CQUFFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBSSxTQUFTLEFBQWlCO29CQUFFLEdBQUcsQ0FBQztpQkFBRSxDQUFDLENBQUM7YUFDbkc7WUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUF5QixHQUFLO2dCQUN0QyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxBQUFDO2dCQUMvQixPQUFPLENBQUM7b0JBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEtBQUssR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFJLFNBQVMsQUFBaUI7b0JBQUUsR0FBRyxDQUFDO2lCQUFFLENBQUMsQ0FBQzthQUNwRztTQUNGLEVBQ0Q7WUFDRSxRQUFRO1lBQ1IsSUFBSSxFQUFFLElBQUk7WUFDVixVQUFVO1NBQ1gsQ0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFDO0NBQ0oifQ==