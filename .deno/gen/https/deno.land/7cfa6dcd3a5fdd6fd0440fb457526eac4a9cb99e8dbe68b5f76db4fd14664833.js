export async function runProxyMethod(rest, method, url, body, retryCount = 0, bucketId) {
    rest.debug(`[REST - RequestCreate] Method: ${method} | URL: ${url} | Retry Count: ${retryCount} | Bucket ID: ${bucketId} | Body: ${JSON.stringify(body)}`);
    return new Promise((resolve, reject) => {
        rest.processRequest(rest, {
            url,
            method,
            reject: (data) => {
                const { body: b, ...r } = data;
                reject({ body: data.status !== 204 ? JSON.parse(b ?? "{}") : undefined, ...r });
            },
            respond: (data) => {
                const { body: b, ...r } = data;
                resolve({ body: data.status !== 204 ? JSON.parse(b ?? "{}") : undefined, ...r });
            },
        }, {
            bucketId,
            body: body,
            retryCount,
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuUHJveHlNZXRob2QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJydW5Qcm94eU1ldGhvZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FDbEMsSUFBaUIsRUFDakIsTUFBbUQsRUFDbkQsR0FBVyxFQUNYLElBQWMsRUFDZCxVQUFVLEdBQUcsQ0FBQyxFQUNkLFFBQWlCO0lBRWpCLElBQUksQ0FBQyxLQUFLLENBQ1Isa0NBQWtDLE1BQU0sV0FBVyxHQUFHLG1CQUFtQixVQUFVLGlCQUFpQixRQUFRLFlBQzFHLElBQUksQ0FBQyxTQUFTLENBQ1osSUFBSSxDQUVSLEVBQUUsQ0FDSCxDQUFDO0lBR0YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxJQUFJLENBQUMsY0FBYyxDQUNqQixJQUFJLEVBQ0o7WUFDRSxHQUFHO1lBQ0gsTUFBTTtZQUNOLE1BQU0sRUFBRSxDQUFDLElBQTBCLEVBQUUsRUFBRTtnQkFDckMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFLFNBQTBCLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BHLENBQUM7WUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUF5QixFQUFFLEVBQUU7Z0JBQ3JDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUMvQixPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBRSxTQUEwQixFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNyRyxDQUFDO1NBQ0YsRUFDRDtZQUNFLFFBQVE7WUFDUixJQUFJLEVBQUUsSUFBMkM7WUFDakQsVUFBVTtTQUNYLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3RNYW5hZ2VyIH0gZnJvbSBcIi4uL2JvdC50c1wiO1xuaW1wb3J0IHsgUmVzdFJlcXVlc3RSZWplY3Rpb24sIFJlc3RSZXF1ZXN0UmVzcG9uc2UgfSBmcm9tIFwiLi9yZXN0LnRzXCI7XG5cbmV4cG9ydCB0eXBlIFByb3h5TWV0aG9kUmVzcG9uc2U8VD4gPSBPbWl0PFJlc3RSZXF1ZXN0UmVzcG9uc2UgfCBSZXN0UmVxdWVzdFJlamVjdGlvbiwgXCJib2R5XCI+ICYgeyBib2R5PzogVCB9O1xuXG4vLyBMZWZ0IG91dCBwcm94eSByZXF1ZXN0LCBiZWNhdXNlIGl0J3Mgbm90IG5lZWRlZCBoZXJlXG4vLyB0aGlzIGZpbGUgY291bGQgYWxzbyBiZSBtb3ZlZCB0byBhIHBsdWdpbi5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5Qcm94eU1ldGhvZDxUID0gYW55PihcbiAgcmVzdDogUmVzdE1hbmFnZXIsXG4gIG1ldGhvZDogXCJHRVRcIiB8IFwiUE9TVFwiIHwgXCJQVVRcIiB8IFwiREVMRVRFXCIgfCBcIlBBVENIXCIsXG4gIHVybDogc3RyaW5nLFxuICBib2R5PzogdW5rbm93bixcbiAgcmV0cnlDb3VudCA9IDAsXG4gIGJ1Y2tldElkPzogc3RyaW5nLFxuKTogUHJvbWlzZTxQcm94eU1ldGhvZFJlc3BvbnNlPFQ+PiB7XG4gIHJlc3QuZGVidWcoXG4gICAgYFtSRVNUIC0gUmVxdWVzdENyZWF0ZV0gTWV0aG9kOiAke21ldGhvZH0gfCBVUkw6ICR7dXJsfSB8IFJldHJ5IENvdW50OiAke3JldHJ5Q291bnR9IHwgQnVja2V0IElEOiAke2J1Y2tldElkfSB8IEJvZHk6ICR7XG4gICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgYm9keSxcbiAgICAgIClcbiAgICB9YCxcbiAgKTtcblxuICAvLyBObyBwcm94eSBzbyB3ZSBuZWVkIHRvIGhhbmRsZSBhbGwgcmF0ZSBsaW1pdGluZyBhbmQgc3VjaFxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHJlc3QucHJvY2Vzc1JlcXVlc3QoXG4gICAgICByZXN0LFxuICAgICAge1xuICAgICAgICB1cmwsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcmVqZWN0OiAoZGF0YTogUmVzdFJlcXVlc3RSZWplY3Rpb24pID0+IHtcbiAgICAgICAgICBjb25zdCB7IGJvZHk6IGIsIC4uLnIgfSA9IGRhdGE7XG4gICAgICAgICAgcmVqZWN0KHsgYm9keTogZGF0YS5zdGF0dXMgIT09IDIwNCA/IEpTT04ucGFyc2UoYiA/PyBcInt9XCIpIDogKHVuZGVmaW5lZCBhcyB1bmtub3duIGFzIFQpLCAuLi5yIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZXNwb25kOiAoZGF0YTogUmVzdFJlcXVlc3RSZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgYm9keTogYiwgLi4uciB9ID0gZGF0YTtcbiAgICAgICAgICByZXNvbHZlKHsgYm9keTogZGF0YS5zdGF0dXMgIT09IDIwNCA/IEpTT04ucGFyc2UoYiA/PyBcInt9XCIpIDogKHVuZGVmaW5lZCBhcyB1bmtub3duIGFzIFQpLCAuLi5yIH0pO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYnVja2V0SWQsXG4gICAgICAgIGJvZHk6IGJvZHkgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCB1bmRlZmluZWQsXG4gICAgICAgIHJldHJ5Q291bnQsXG4gICAgICB9LFxuICAgICk7XG4gIH0pO1xufVxuIl19