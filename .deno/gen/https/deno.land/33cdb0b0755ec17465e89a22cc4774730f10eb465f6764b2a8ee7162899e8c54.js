export function setupCacheEdits(bot) {
    const { GUILD_MEMBER_ADD, GUILD_MEMBER_REMOVE, MESSAGE_REACTION_ADD, MESSAGE_REACTION_REMOVE, MESSAGE_REACTION_REMOVE_ALL, } = bot.handlers;
    bot.handlers.GUILD_MEMBER_ADD = function (_, data, shardId) {
        const payload = data.d;
        const guild = bot.guilds.get(bot.transformers.snowflake(payload.guild_id));
        if (guild)
            guild.memberCount++;
        GUILD_MEMBER_ADD(bot, data, shardId);
    };
    bot.handlers.GUILD_MEMBER_REMOVE = function (_, data, shardId) {
        const payload = data.d;
        const guild = bot.guilds.get(bot.transformers.snowflake(payload.guild_id));
        if (guild)
            guild.memberCount--;
        GUILD_MEMBER_REMOVE(bot, data, shardId);
    };
    bot.handlers.MESSAGE_REACTION_ADD = function (_, data, shardId) {
        const payload = data.d;
        const messageId = bot.transformers.snowflake(payload.message_id);
        const message = bot.messages.get(messageId);
        const emoji = bot.transformers.emoji(bot, payload.emoji);
        if (message) {
            const reactions = message.reactions?.map((r) => r.emoji.name);
            const toSet = {
                count: 1,
                me: bot.transformers.snowflake(payload.user_id) === bot.id,
                emoji: emoji,
            };
            if (!message.reactions || !reactions) {
                message.reactions = [toSet];
            }
            else if (!reactions.includes(emoji.name)) {
                message.reactions?.push(toSet);
            }
            else {
                const current = message.reactions?.[reactions.indexOf(emoji.name)];
                if (current) {
                    current.count++;
                }
            }
        }
        MESSAGE_REACTION_ADD(bot, data, shardId);
    };
    bot.handlers.MESSAGE_REACTION_REMOVE = function (_, data, shardId) {
        const payload = data.d;
        const messageId = bot.transformers.snowflake(payload.message_id);
        const message = bot.messages.get(messageId);
        const emoji = bot.transformers.emoji(bot, payload.emoji);
        if (message) {
            const reactions = message.reactions?.map((r) => r.emoji.name);
            if (reactions?.indexOf(emoji.name) !== undefined) {
                const current = message.reactions?.[reactions.indexOf(emoji.name)];
                if (current) {
                    if (current.count > 0) {
                        current.count--;
                    }
                    if (current.count === 0) {
                        message.reactions?.splice(reactions?.indexOf(emoji.name), 1);
                    }
                }
            }
        }
        MESSAGE_REACTION_REMOVE(bot, data, shardId);
    };
    bot.handlers.MESSAGE_REACTION_REMOVE_ALL = function (_, data, shardId) {
        const payload = data.d;
        const messageId = bot.transformers.snowflake(payload.message_id);
        const message = bot.messages.get(messageId);
        if (message) {
            message.reactions = undefined;
        }
        MESSAGE_REACTION_REMOVE_ALL(bot, data, shardId);
    };
}
//# sourceMappingURL=data:application/json;base64,