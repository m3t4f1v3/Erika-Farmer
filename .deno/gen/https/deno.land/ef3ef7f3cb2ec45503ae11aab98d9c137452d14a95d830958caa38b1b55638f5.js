import { hasProperty } from "../../util/utils.ts";
export async function getMessages(bot, channelId, options) {
    if (options?.limit && (options.limit < 0 || options.limit > 100)) {
        throw new Error(bot.constants.Errors.INVALID_GET_MESSAGES_LIMIT);
    }
    const result = await bot.rest.runMethod(bot.rest, "GET", bot.constants.routes.CHANNEL_MESSAGES(channelId, options));
    return await Promise.all(result.map((res) => bot.transformers.message(bot, res)));
}
export function isGetMessagesAfter(options) {
    return hasProperty(options, "after");
}
export function isGetMessagesBefore(options) {
    return hasProperty(options, "before");
}
export function isGetMessagesAround(options) {
    return hasProperty(options, "around");
}
export function isGetMessagesLimit(options) {
    return hasProperty(options, "limit");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0TWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZXRNZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHbEQsTUFBTSxDQUFDLEtBQUssVUFBVSxXQUFXLENBQy9CLEdBQVEsRUFDUixTQUFpQixFQUNqQixPQUE0QjtJQUU1QixJQUFJLE9BQU8sRUFBRSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFO1FBQ2hFLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQztLQUNsRTtJQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQ3JDLEdBQUcsQ0FBQyxJQUFJLEVBQ1IsS0FBSyxFQUNMLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FDMUQsQ0FBQztJQUVGLE9BQU8sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQTRCRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsT0FBMkI7SUFDNUQsT0FBTyxXQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsT0FBMkI7SUFDN0QsT0FBTyxXQUFXLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsT0FBMkI7SUFDN0QsT0FBTyxXQUFXLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsT0FBMkI7SUFDNUQsT0FBTyxXQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJvdCB9IGZyb20gXCIuLi8uLi9ib3QudHNcIjtcbmltcG9ydCB7IERpc2NvcmRNZXNzYWdlIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IGhhc1Byb3BlcnR5IH0gZnJvbSBcIi4uLy4uL3V0aWwvdXRpbHMudHNcIjtcblxuLyoqIEZldGNoZXMgYmV0d2VlbiAyLTEwMCBtZXNzYWdlcy4gUmVxdWlyZXMgVklFV19DSEFOTkVMIGFuZCBSRUFEX01FU1NBR0VfSElTVE9SWSAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1lc3NhZ2VzKFxuICBib3Q6IEJvdCxcbiAgY2hhbm5lbElkOiBiaWdpbnQsXG4gIG9wdGlvbnM/OiBHZXRNZXNzYWdlc09wdGlvbnMsXG4pIHtcbiAgaWYgKG9wdGlvbnM/LmxpbWl0ICYmIChvcHRpb25zLmxpbWl0IDwgMCB8fCBvcHRpb25zLmxpbWl0ID4gMTAwKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihib3QuY29uc3RhbnRzLkVycm9ycy5JTlZBTElEX0dFVF9NRVNTQUdFU19MSU1JVCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBib3QucmVzdC5ydW5NZXRob2Q8RGlzY29yZE1lc3NhZ2VbXT4oXG4gICAgYm90LnJlc3QsXG4gICAgXCJHRVRcIixcbiAgICBib3QuY29uc3RhbnRzLnJvdXRlcy5DSEFOTkVMX01FU1NBR0VTKGNoYW5uZWxJZCwgb3B0aW9ucyksXG4gICk7XG5cbiAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHJlc3VsdC5tYXAoKHJlcykgPT4gYm90LnRyYW5zZm9ybWVycy5tZXNzYWdlKGJvdCwgcmVzKSkpO1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2NoYW5uZWwjZ2V0LWNoYW5uZWwtbWVzc2FnZXMtcXVlcnktc3RyaW5nLXBhcmFtcyAqL1xuZXhwb3J0IGludGVyZmFjZSBHZXRNZXNzYWdlc0xpbWl0IHtcbiAgLyoqIE1heCBudW1iZXIgb2YgbWVzc2FnZXMgdG8gcmV0dXJuICgxLTEwMCkgZGVmYXVsdCA1MCAqL1xuICBsaW1pdD86IG51bWJlcjtcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9jaGFubmVsI2dldC1jaGFubmVsLW1lc3NhZ2VzLXF1ZXJ5LXN0cmluZy1wYXJhbXMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TWVzc2FnZXNBcm91bmQgZXh0ZW5kcyBHZXRNZXNzYWdlc0xpbWl0IHtcbiAgLyoqIEdldCBtZXNzYWdlcyBhcm91bmQgdGhpcyBtZXNzYWdlIGlkICovXG4gIGFyb3VuZD86IGJpZ2ludDtcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9jaGFubmVsI2dldC1jaGFubmVsLW1lc3NhZ2VzLXF1ZXJ5LXN0cmluZy1wYXJhbXMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TWVzc2FnZXNCZWZvcmUgZXh0ZW5kcyBHZXRNZXNzYWdlc0xpbWl0IHtcbiAgLyoqIEdldCBtZXNzYWdlcyBiZWZvcmUgdGhpcyBtZXNzYWdlIGlkICovXG4gIGJlZm9yZT86IGJpZ2ludDtcbn1cblxuLyoqIGh0dHBzOi8vZGlzY29yZC5jb20vZGV2ZWxvcGVycy9kb2NzL3Jlc291cmNlcy9jaGFubmVsI2dldC1jaGFubmVsLW1lc3NhZ2VzLXF1ZXJ5LXN0cmluZy1wYXJhbXMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TWVzc2FnZXNBZnRlciBleHRlbmRzIEdldE1lc3NhZ2VzTGltaXQge1xuICAvKiogR2V0IG1lc3NhZ2VzIGFmdGVyIHRoaXMgbWVzc2FnZSBpZCAqL1xuICBhZnRlcj86IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgR2V0TWVzc2FnZXNPcHRpb25zID0gR2V0TWVzc2FnZXNBZnRlciB8IEdldE1lc3NhZ2VzQmVmb3JlIHwgR2V0TWVzc2FnZXNBcm91bmQgfCBHZXRNZXNzYWdlc0xpbWl0O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNHZXRNZXNzYWdlc0FmdGVyKG9wdGlvbnM6IEdldE1lc3NhZ2VzT3B0aW9ucyk6IG9wdGlvbnMgaXMgR2V0TWVzc2FnZXNBZnRlciB7XG4gIHJldHVybiBoYXNQcm9wZXJ0eShvcHRpb25zLCBcImFmdGVyXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNHZXRNZXNzYWdlc0JlZm9yZShvcHRpb25zOiBHZXRNZXNzYWdlc09wdGlvbnMpOiBvcHRpb25zIGlzIEdldE1lc3NhZ2VzQmVmb3JlIHtcbiAgcmV0dXJuIGhhc1Byb3BlcnR5KG9wdGlvbnMsIFwiYmVmb3JlXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNHZXRNZXNzYWdlc0Fyb3VuZChvcHRpb25zOiBHZXRNZXNzYWdlc09wdGlvbnMpOiBvcHRpb25zIGlzIEdldE1lc3NhZ2VzQXJvdW5kIHtcbiAgcmV0dXJuIGhhc1Byb3BlcnR5KG9wdGlvbnMsIFwiYXJvdW5kXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNHZXRNZXNzYWdlc0xpbWl0KG9wdGlvbnM6IEdldE1lc3NhZ2VzT3B0aW9ucyk6IG9wdGlvbnMgaXMgR2V0TWVzc2FnZXNMaW1pdCB7XG4gIHJldHVybiBoYXNQcm9wZXJ0eShvcHRpb25zLCBcImxpbWl0XCIpO1xufVxuIl19