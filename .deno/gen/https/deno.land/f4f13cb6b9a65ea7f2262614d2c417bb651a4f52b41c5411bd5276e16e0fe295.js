import { Collection } from "../../../util/collection.ts";
import { isContextApplicationCommand, makeOptionsForCommand, } from "./createApplicationCommand.ts";
export async function upsertApplicationCommands(bot, options, guildId) {
    const result = await bot.rest.runMethod(bot.rest, "PUT", guildId
        ? bot.constants.routes.COMMANDS_GUILD(bot.applicationId, guildId)
        : bot.constants.routes.COMMANDS(bot.applicationId), options.map((option) => (isContextApplicationCommand(option)
        ? {
            name: option.name,
            type: option.type,
        }
        : {
            name: option.name,
            description: option.description,
            type: option.type,
            options: option.options ? makeOptionsForCommand(option.options) : undefined,
        })));
    return new Collection(result.map((res) => {
        const command = bot.transformers.applicationCommand(bot, res);
        return [command.id, command];
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBzZXJ0QXBwbGljYXRpb25Db21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwc2VydEFwcGxpY2F0aW9uQ29tbWFuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3pELE9BQU8sRUFHTCwyQkFBMkIsRUFDM0IscUJBQXFCLEdBQ3RCLE1BQU0sK0JBQStCLENBQUM7QUFTdkMsTUFBTSxDQUFDLEtBQUssVUFBVSx5QkFBeUIsQ0FDN0MsR0FBUSxFQUNSLE9BQXdFLEVBQ3hFLE9BQWdCO0lBRWhCLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQ3JDLEdBQUcsQ0FBQyxJQUFJLEVBQ1IsS0FBSyxFQUNMLE9BQU87UUFDTCxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQztRQUMxRCxDQUFDLENBQUM7WUFDQSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDakIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1NBQ2xCO1FBQ0QsQ0FBQyxDQUFDO1lBQ0EsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLFdBQVcsRUFBRSxNQUFNLENBQUMsV0FBVztZQUMvQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDakIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztTQUM1RSxDQUFDLENBQ0gsQ0FDRixDQUFDO0lBRUYsT0FBTyxJQUFJLFVBQVUsQ0FDbkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlELE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCb3QgfSBmcm9tIFwiLi4vLi4vLi4vYm90LnRzXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWwvY29sbGVjdGlvbi50c1wiO1xuaW1wb3J0IHtcbiAgQ3JlYXRlQXBwbGljYXRpb25Db21tYW5kLFxuICBDcmVhdGVDb250ZXh0QXBwbGljYXRpb25Db21tYW5kLFxuICBpc0NvbnRleHRBcHBsaWNhdGlvbkNvbW1hbmQsXG4gIG1ha2VPcHRpb25zRm9yQ29tbWFuZCxcbn0gZnJvbSBcIi4vY3JlYXRlQXBwbGljYXRpb25Db21tYW5kLnRzXCI7XG5pbXBvcnQgeyBEaXNjb3JkQXBwbGljYXRpb25Db21tYW5kIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IE1ha2VSZXF1aXJlZCB9IGZyb20gXCIuLi8uLi8uLi90eXBlcy9zaGFyZWQudHNcIjtcblxuLyoqXG4gKiBCdWxrIGVkaXQgZXhpc3RpbmcgYXBwbGljYXRpb24gY29tbWFuZHMuIElmIGEgY29tbWFuZCBkb2VzIG5vdCBleGlzdCwgaXQgd2lsbCBjcmVhdGUgaXQuXG4gKlxuICogKipOT1RFOioqIEFueSBhcHBsaWNhdGlvbiBjb21tYW5kcyB0aGF0IGFyZSBub3Qgc3BlY2lmaWVkIGluIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSAqKmRlbGV0ZWQqKi4gSWYgeW91IGRvbid0IHByb3ZpZGUgdGhlIGNvbW1hbmRJZCBhbmQgcmVuYW1lIHlvdXIgY29tbWFuZCwgdGhlIGNvbW1hbmQgZ2V0cyBhIG5ldyBJZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwc2VydEFwcGxpY2F0aW9uQ29tbWFuZHMoXG4gIGJvdDogQm90LFxuICBvcHRpb25zOiAoVXBzZXJ0QXBwbGljYXRpb25Db21tYW5kcyB8IENyZWF0ZUNvbnRleHRBcHBsaWNhdGlvbkNvbW1hbmQpW10sXG4gIGd1aWxkSWQ/OiBiaWdpbnQsXG4pIHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kPERpc2NvcmRBcHBsaWNhdGlvbkNvbW1hbmRbXT4oXG4gICAgYm90LnJlc3QsXG4gICAgXCJQVVRcIixcbiAgICBndWlsZElkXG4gICAgICA/IGJvdC5jb25zdGFudHMucm91dGVzLkNPTU1BTkRTX0dVSUxEKGJvdC5hcHBsaWNhdGlvbklkLCBndWlsZElkKVxuICAgICAgOiBib3QuY29uc3RhbnRzLnJvdXRlcy5DT01NQU5EUyhib3QuYXBwbGljYXRpb25JZCksXG4gICAgb3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKGlzQ29udGV4dEFwcGxpY2F0aW9uQ29tbWFuZChvcHRpb24pXG4gICAgICA/IHtcbiAgICAgICAgbmFtZTogb3B0aW9uLm5hbWUsXG4gICAgICAgIHR5cGU6IG9wdGlvbi50eXBlLFxuICAgICAgfVxuICAgICAgOiB7XG4gICAgICAgIG5hbWU6IG9wdGlvbi5uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogb3B0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgICB0eXBlOiBvcHRpb24udHlwZSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9uLm9wdGlvbnMgPyBtYWtlT3B0aW9uc0ZvckNvbW1hbmQob3B0aW9uLm9wdGlvbnMpIDogdW5kZWZpbmVkLFxuICAgICAgfSlcbiAgICApLFxuICApO1xuXG4gIHJldHVybiBuZXcgQ29sbGVjdGlvbihcbiAgICByZXN1bHQubWFwKChyZXMpID0+IHtcbiAgICAgIGNvbnN0IGNvbW1hbmQgPSBib3QudHJhbnNmb3JtZXJzLmFwcGxpY2F0aW9uQ29tbWFuZChib3QsIHJlcyk7XG4gICAgICByZXR1cm4gW2NvbW1hbmQuaWQsIGNvbW1hbmRdO1xuICAgIH0pLFxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVwc2VydEFwcGxpY2F0aW9uQ29tbWFuZHMgZXh0ZW5kcyBDcmVhdGVBcHBsaWNhdGlvbkNvbW1hbmQge1xuICAvKiogSUQgb2YgdGhlIGNvbW1hbmQsIGlmIGtub3duICovXG4gIGlkPzogYmlnaW50O1xufVxuIl19