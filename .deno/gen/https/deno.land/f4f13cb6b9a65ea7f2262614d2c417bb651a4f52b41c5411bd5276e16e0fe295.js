import { Collection } from "../../../util/collection.ts";
import { isContextApplicationCommand, makeOptionsForCommand } from "./createApplicationCommand.ts";
/**
 * Bulk edit existing application commands. If a command does not exist, it will create it.
 *
 * **NOTE:** Any application commands that are not specified in this function will be **deleted**. If you don't provide the commandId and rename your command, the command gets a new Id.
 */ export async function upsertApplicationCommands(bot, options, guildId) {
    const result = await bot.rest.runMethod(bot.rest, "PUT", guildId ? bot.constants.routes.COMMANDS_GUILD(bot.applicationId, guildId) : bot.constants.routes.COMMANDS(bot.applicationId), options.map((option)=>isContextApplicationCommand(option) ? {
            name: option.name,
            type: option.type
        } : {
            name: option.name,
            description: option.description,
            type: option.type,
            options: option.options ? makeOptionsForCommand(option.options) : undefined
        }
    ));
    return new Collection(result.map((res)=>{
        const command = bot.transformers.applicationCommand(bot, res);
        return [
            command.id,
            command
        ];
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJvdCB9IGZyb20gXCIuLi8uLi8uLi9ib3QudHNcIjtcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbC9jb2xsZWN0aW9uLnRzXCI7XG5pbXBvcnQge1xuICBDcmVhdGVBcHBsaWNhdGlvbkNvbW1hbmQsXG4gIENyZWF0ZUNvbnRleHRBcHBsaWNhdGlvbkNvbW1hbmQsXG4gIGlzQ29udGV4dEFwcGxpY2F0aW9uQ29tbWFuZCxcbiAgbWFrZU9wdGlvbnNGb3JDb21tYW5kLFxufSBmcm9tIFwiLi9jcmVhdGVBcHBsaWNhdGlvbkNvbW1hbmQudHNcIjtcbmltcG9ydCB7IERpc2NvcmRBcHBsaWNhdGlvbkNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZXMvZGlzY29yZC50c1wiO1xuaW1wb3J0IHsgTWFrZVJlcXVpcmVkIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL3NoYXJlZC50c1wiO1xuXG4vKipcbiAqIEJ1bGsgZWRpdCBleGlzdGluZyBhcHBsaWNhdGlvbiBjb21tYW5kcy4gSWYgYSBjb21tYW5kIGRvZXMgbm90IGV4aXN0LCBpdCB3aWxsIGNyZWF0ZSBpdC5cbiAqXG4gKiAqKk5PVEU6KiogQW55IGFwcGxpY2F0aW9uIGNvbW1hbmRzIHRoYXQgYXJlIG5vdCBzcGVjaWZpZWQgaW4gdGhpcyBmdW5jdGlvbiB3aWxsIGJlICoqZGVsZXRlZCoqLiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSB0aGUgY29tbWFuZElkIGFuZCByZW5hbWUgeW91ciBjb21tYW5kLCB0aGUgY29tbWFuZCBnZXRzIGEgbmV3IElkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBzZXJ0QXBwbGljYXRpb25Db21tYW5kcyhcbiAgYm90OiBCb3QsXG4gIG9wdGlvbnM6IChVcHNlcnRBcHBsaWNhdGlvbkNvbW1hbmRzIHwgQ3JlYXRlQ29udGV4dEFwcGxpY2F0aW9uQ29tbWFuZClbXSxcbiAgZ3VpbGRJZD86IGJpZ2ludCxcbikge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBib3QucmVzdC5ydW5NZXRob2Q8RGlzY29yZEFwcGxpY2F0aW9uQ29tbWFuZFtdPihcbiAgICBib3QucmVzdCxcbiAgICBcIlBVVFwiLFxuICAgIGd1aWxkSWRcbiAgICAgID8gYm90LmNvbnN0YW50cy5yb3V0ZXMuQ09NTUFORFNfR1VJTEQoYm90LmFwcGxpY2F0aW9uSWQsIGd1aWxkSWQpXG4gICAgICA6IGJvdC5jb25zdGFudHMucm91dGVzLkNPTU1BTkRTKGJvdC5hcHBsaWNhdGlvbklkKSxcbiAgICBvcHRpb25zLm1hcCgob3B0aW9uKSA9PiAoaXNDb250ZXh0QXBwbGljYXRpb25Db21tYW5kKG9wdGlvbilcbiAgICAgID8ge1xuICAgICAgICBuYW1lOiBvcHRpb24ubmFtZSxcbiAgICAgICAgdHlwZTogb3B0aW9uLnR5cGUsXG4gICAgICB9XG4gICAgICA6IHtcbiAgICAgICAgbmFtZTogb3B0aW9uLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBvcHRpb24uZGVzY3JpcHRpb24sXG4gICAgICAgIHR5cGU6IG9wdGlvbi50eXBlLFxuICAgICAgICBvcHRpb25zOiBvcHRpb24ub3B0aW9ucyA/IG1ha2VPcHRpb25zRm9yQ29tbWFuZChvcHRpb24ub3B0aW9ucykgOiB1bmRlZmluZWQsXG4gICAgICB9KVxuICAgICksXG4gICk7XG5cbiAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKFxuICAgIHJlc3VsdC5tYXAoKHJlcykgPT4ge1xuICAgICAgY29uc3QgY29tbWFuZCA9IGJvdC50cmFuc2Zvcm1lcnMuYXBwbGljYXRpb25Db21tYW5kKGJvdCwgcmVzKTtcbiAgICAgIHJldHVybiBbY29tbWFuZC5pZCwgY29tbWFuZF07XG4gICAgfSksXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBzZXJ0QXBwbGljYXRpb25Db21tYW5kcyBleHRlbmRzIENyZWF0ZUFwcGxpY2F0aW9uQ29tbWFuZCB7XG4gIC8qKiBJRCBvZiB0aGUgY29tbWFuZCwgaWYga25vd24gKi9cbiAgaWQ/OiBiaWdpbnQ7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxVQUFVLFFBQVEsNkJBQTZCLENBQUM7QUFDekQsU0FHRSwyQkFBMkIsRUFDM0IscUJBQXFCLFFBQ2hCLCtCQUErQixDQUFDO0FBSXZDOzs7O0dBSUcsQ0FDSCxPQUFPLGVBQWUseUJBQXlCLENBQzdDLEdBQVEsRUFDUixPQUF3RSxFQUN4RSxPQUFnQixFQUNoQjtJQUNBLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQ3JDLEdBQUcsQ0FBQyxJQUFJLEVBQ1IsS0FBSyxFQUNMLE9BQU8sR0FDSCxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsR0FDL0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBTSwyQkFBMkIsQ0FBQyxNQUFNLENBQUMsR0FDeEQ7WUFDQSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDakIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1NBQ2xCLEdBQ0M7WUFDQSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDakIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXO1lBQy9CLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtZQUNqQixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsU0FBUztTQUM1RTtJQUFDLENBQ0gsQ0FDRixBQUFDO0lBRUYsT0FBTyxJQUFJLFVBQVUsQ0FDbkIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBSztRQUNsQixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQUFBQztRQUM5RCxPQUFPO1lBQUMsT0FBTyxDQUFDLEVBQUU7WUFBRSxPQUFPO1NBQUMsQ0FBQztLQUM5QixDQUFDLENBQ0gsQ0FBQztDQUNIIn0=