import { BitwisePermissionFlags, Errors, separateOverwrites, } from "../deps.ts";
export function calculateBasePermissions(bot, guildOrId, memberOrId) {
    const guild = typeof guildOrId === "bigint" ? bot.guilds.get(guildOrId) : guildOrId;
    const member = typeof memberOrId === "bigint" ? bot.members.get(memberOrId) : memberOrId;
    if (!guild || !member)
        return 8n;
    let permissions = 0n;
    permissions |= [...member.roles, guild.id]
        .map((id) => guild.roles.get(id)?.permissions)
        .filter((perm) => perm)
        .reduce((bits, perms) => {
        bits |= perms;
        return bits;
    }, 0n) || 0n;
    if (guild.ownerId === member.id)
        permissions |= 8n;
    return permissions;
}
export function calculateChannelOverwrites(bot, channelOrId, memberOrId) {
    const channel = typeof channelOrId === "bigint" ? bot.channels.get(channelOrId) : channelOrId;
    if (!channel?.guildId)
        return 8n;
    const member = typeof memberOrId === "bigint" ? bot.members.get(memberOrId) : memberOrId;
    if (!channel || !member)
        return 8n;
    let permissions = calculateBasePermissions(bot, channel.guildId, member);
    const overwriteEveryone = channel.permissionOverwrites?.find((overwrite) => {
        const [_, id] = separateOverwrites(overwrite);
        return id === channel.guildId;
    });
    if (overwriteEveryone) {
        const [_type, _id, allow, deny] = separateOverwrites(overwriteEveryone);
        permissions &= ~deny;
        permissions |= allow;
    }
    const overwrites = channel.permissionOverwrites;
    let allow = 0n;
    let deny = 0n;
    const memberRoles = member.roles || [];
    for (const overwrite of overwrites || []) {
        const [_type, id, allowBits, denyBits] = separateOverwrites(overwrite);
        if (!memberRoles.includes(id))
            continue;
        deny |= denyBits;
        allow |= allowBits;
    }
    permissions &= ~deny;
    permissions |= allow;
    const overwriteMember = overwrites?.find((overwrite) => {
        const [_, id] = separateOverwrites(overwrite);
        return id === member.id;
    });
    if (overwriteMember) {
        const [_type, _id, allowBits, denyBits] = separateOverwrites(overwriteMember);
        permissions &= ~denyBits;
        permissions |= allowBits;
    }
    return permissions;
}
export function validatePermissions(permissionBits, permissions) {
    if (permissionBits & 8n)
        return true;
    return permissions.every((permission) => permissionBits & BigInt(BitwisePermissionFlags[permission]));
}
export function hasGuildPermissions(bot, guild, member, permissions) {
    const basePermissions = calculateBasePermissions(bot, guild, member);
    return validatePermissions(basePermissions, permissions);
}
export function botHasGuildPermissions(bot, guild, permissions) {
    return hasGuildPermissions(bot, guild, bot.id, permissions);
}
export function hasChannelPermissions(bot, channel, member, permissions) {
    const channelOverwrites = calculateChannelOverwrites(bot, channel, member);
    return validatePermissions(channelOverwrites, permissions);
}
export function botHasChannelPermissions(bot, channel, permissions) {
    return hasChannelPermissions(bot, channel, bot.id, permissions);
}
export function missingPermissions(permissionBits, permissions) {
    if (permissionBits & 8n)
        return [];
    return permissions.filter((permission) => !(permissionBits & BigInt(BitwisePermissionFlags[permission])));
}
export function getMissingGuildPermissions(bot, guild, member, permissions) {
    const permissionBits = calculateBasePermissions(bot, guild, member);
    return missingPermissions(permissionBits, permissions);
}
export function getMissingChannelPermissions(bot, channel, member, permissions) {
    const permissionBits = calculateChannelOverwrites(bot, channel, member);
    return missingPermissions(permissionBits, permissions);
}
export function requireGuildPermissions(bot, guild, member, permissions) {
    const missing = getMissingGuildPermissions(bot, guild, member, permissions);
    if (missing.length) {
        throw new Error(`Missing Permissions: ${missing.join(" & ")}`);
    }
}
export function requireBotGuildPermissions(bot, guild, permissions) {
    return requireGuildPermissions(bot, guild, bot.id, permissions);
}
export function requireChannelPermissions(bot, channel, member, permissions) {
    const missing = getMissingChannelPermissions(bot, channel, member, permissions);
    if (missing.length) {
        throw new Error(`Missing Permissions: ${missing.join(" & ")}`);
    }
}
export function requireBotChannelPermissions(bot, channel, permissions) {
    return requireChannelPermissions(bot, channel, bot.id, permissions);
}
export function calculatePermissions(permissionBits) {
    return Object.keys(BitwisePermissionFlags).filter((permission) => {
        if (Number(permission))
            return false;
        return permissionBits &
            BigInt(BitwisePermissionFlags[permission]);
    });
}
export function calculateBits(permissions) {
    return permissions
        .reduce((bits, perm) => {
        bits |= BigInt(BitwisePermissionFlags[perm]);
        return bits;
    }, 0n)
        .toString();
}
export function requireOverwritePermissions(bot, guildOrId, overwrites) {
    let requiredPerms = new Set(["MANAGE_CHANNELS"]);
    overwrites?.forEach((overwrite) => {
        if (overwrite.allow) {
            overwrite.allow.forEach(requiredPerms.add, requiredPerms);
        }
        if (overwrite.deny) {
            overwrite.deny.forEach(requiredPerms.add, requiredPerms);
        }
    });
    if (requiredPerms.has("MANAGE_ROLES")) {
        requiredPerms = new Set(["ADMINISTRATOR"]);
    }
    requireGuildPermissions(bot, guildOrId, bot.id, [
        ...requiredPerms,
    ]);
}
export function highestRole(bot, guildOrId, memberOrId) {
    const guild = typeof guildOrId === "bigint" ? bot.guilds.get(guildOrId) : guildOrId;
    if (!guild)
        throw new Error(Errors.GUILD_NOT_FOUND);
    const memberRoles = (typeof memberOrId === "bigint" ? bot.members.get(memberOrId) : memberOrId)
        ?.roles;
    if (!memberRoles)
        return guild.roles.get(guild.id);
    let memberHighestRole;
    for (const roleId of memberRoles) {
        const role = guild.roles.get(roleId);
        if (!role)
            continue;
        if (!memberHighestRole ||
            memberHighestRole.position < role.position ||
            memberHighestRole.position === role.position) {
            memberHighestRole = role;
        }
    }
    return memberHighestRole;
}
export function higherRolePosition(bot, guildOrId, roleId, otherRoleId) {
    const guild = typeof guildOrId === "bigint" ? bot.guilds.get(guildOrId) : guildOrId;
    if (!guild)
        return true;
    const role = guild.roles.get(roleId);
    const otherRole = guild.roles.get(otherRoleId);
    if (!role || !otherRole)
        throw new Error(Errors.ROLE_NOT_FOUND);
    if (role.position === otherRole.position) {
        return role.id < otherRole.id;
    }
    return role.position > otherRole.position;
}
export function isHigherPosition(bot, guildOrId, memberId, compareRoleId) {
    const guild = typeof guildOrId === "bigint" ? bot.guilds.get(guildOrId) : guildOrId;
    if (!guild || guild.ownerId === memberId)
        return true;
    const memberHighestRole = highestRole(bot, guild, memberId);
    return higherRolePosition(bot, guild.id, memberHighestRole.id, compareRoleId);
}
export function channelOverwriteHasPermission(guildId, id, overwrites, permissions) {
    const overwrite = overwrites.find((perm) => {
        const [_, bitID] = separateOverwrites(perm);
        return id === bitID;
    }) ||
        overwrites.find((perm) => {
            const [_, bitID] = separateOverwrites(perm);
            return bitID === guildId;
        });
    if (!overwrite)
        return false;
    return permissions.every((perm) => {
        const [_type, _id, allowBits, denyBits] = separateOverwrites(overwrite);
        if (BigInt(denyBits) & BigInt(BitwisePermissionFlags[perm])) {
            return false;
        }
        if (BigInt(allowBits) & BigInt(BitwisePermissionFlags[perm])) {
            return true;
        }
    });
}
//# sourceMappingURL=data:application/json;base64,