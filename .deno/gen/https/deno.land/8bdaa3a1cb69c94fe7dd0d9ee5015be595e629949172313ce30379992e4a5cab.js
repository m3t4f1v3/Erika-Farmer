import { checkRateLimits } from "./checkRateLimits.ts";
import { cleanupQueues } from "./cleanupQueues.ts";
import { createRequestBody } from "./createRequestBody.ts";
import { processQueue } from "./processQueue.ts";
import { processRateLimitedPaths } from "./processRateLimitedPaths.ts";
import { processRequest } from "./processRequest.ts";
import { processRequestHeaders } from "./processRequestHeaders.ts";
import { runMethod } from "./runMethod.ts";
import { runProxyMethod } from "./runProxyMethod.ts";
import { simplifyUrl } from "./simplifyUrl.ts";
import { convertRestError } from "./convertRestError.ts";
export const rest = {
    token: "",
    maxRetryCount: 10,
    apiVersion: "9",
    authorization: "discordeno_best_lib_ever",
    pathQueues: new Map(),
    processingQueue: false,
    processingRateLimitedPaths: false,
    globallyRateLimited: false,
    rateLimitedPaths: new Map(),
    eventHandlers: {
        error: function (...args) { },
        debug: function (type, error) { },
        fetching(payload) { },
        fetched(payload) { },
        fetchSuccess(payload) { },
        fetchFailed(payload, error) { },
        globallyRateLimited(url, resetsAt) { },
        retriesMaxed(payload) { },
    },
    checkRateLimits,
    cleanupQueues,
    processQueue,
    processRateLimitedPaths,
    processRequestHeaders,
    processRequest,
    createRequestBody,
    runMethod,
    runProxyMethod,
    simplifyUrl,
    convertRestError,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXpELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRztJQUVsQixLQUFLLEVBQUUsRUFBRTtJQUVULGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFVBQVUsRUFBRSxHQUFHO0lBRWYsYUFBYSxFQUFFLDBCQUEwQjtJQUN6QyxVQUFVLEVBQUUsSUFBSSxHQUFHLEVBTWhCO0lBQ0gsZUFBZSxFQUFFLEtBQUs7SUFDdEIsMEJBQTBCLEVBQUUsS0FBSztJQUNqQyxtQkFBbUIsRUFBRSxLQUFLO0lBQzFCLGdCQUFnQixFQUFFLElBQUksR0FBRyxFQUErQjtJQUN4RCxhQUFhLEVBQUU7UUFFYixLQUFLLEVBQUUsVUFBVSxHQUFHLElBQWUsSUFBRyxDQUFDO1FBRXZDLEtBQUssRUFBRSxVQUFVLElBQVksRUFBRSxLQUF1QyxJQUFHLENBQUM7UUFDMUUsUUFBUSxDQUFDLE9BQW9CLElBQUcsQ0FBQztRQUNqQyxPQUFPLENBQUMsT0FBb0IsSUFBRyxDQUFDO1FBQ2hDLFlBQVksQ0FBQyxPQUFvQixJQUFHLENBQUM7UUFDckMsV0FBVyxDQUFDLE9BQW9CLEVBQUUsS0FBYyxJQUFHLENBQUM7UUFDcEQsbUJBQW1CLENBQUMsR0FBVyxFQUFFLFFBQWdCLElBQUcsQ0FBQztRQUNyRCxZQUFZLENBQUMsT0FBb0IsSUFBRyxDQUFDO0tBQ3RDO0lBRUQsZUFBZTtJQUNmLGFBQWE7SUFDYixZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLHFCQUFxQjtJQUNyQixjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLFNBQVM7SUFDVCxjQUFjO0lBQ2QsV0FBVztJQUNYLGdCQUFnQjtDQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZGVuby1saW50LWlnbm9yZS1maWxlIG5vLXVudXNlZC12YXJzXG5pbXBvcnQgeyBjaGVja1JhdGVMaW1pdHMgfSBmcm9tIFwiLi9jaGVja1JhdGVMaW1pdHMudHNcIjtcbmltcG9ydCB7IGNsZWFudXBRdWV1ZXMgfSBmcm9tIFwiLi9jbGVhbnVwUXVldWVzLnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVSZXF1ZXN0Qm9keSB9IGZyb20gXCIuL2NyZWF0ZVJlcXVlc3RCb2R5LnRzXCI7XG5pbXBvcnQgeyBwcm9jZXNzUXVldWUgfSBmcm9tIFwiLi9wcm9jZXNzUXVldWUudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NSYXRlTGltaXRlZFBhdGhzIH0gZnJvbSBcIi4vcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NSZXF1ZXN0IH0gZnJvbSBcIi4vcHJvY2Vzc1JlcXVlc3QudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NSZXF1ZXN0SGVhZGVycyB9IGZyb20gXCIuL3Byb2Nlc3NSZXF1ZXN0SGVhZGVycy50c1wiO1xuaW1wb3J0IHsgcnVuTWV0aG9kIH0gZnJvbSBcIi4vcnVuTWV0aG9kLnRzXCI7XG5pbXBvcnQgeyBydW5Qcm94eU1ldGhvZCB9IGZyb20gXCIuL3J1blByb3h5TWV0aG9kLnRzXCI7XG5pbXBvcnQgeyBzaW1wbGlmeVVybCB9IGZyb20gXCIuL3NpbXBsaWZ5VXJsLnRzXCI7XG5pbXBvcnQgeyBjb252ZXJ0UmVzdEVycm9yIH0gZnJvbSBcIi4vY29udmVydFJlc3RFcnJvci50c1wiO1xuXG5leHBvcnQgY29uc3QgcmVzdCA9IHtcbiAgLyoqIFRoZSBib3QgdG9rZW4gZm9yIHRoaXMgcmVzdCBjbGllbnQuICovXG4gIHRva2VuOiBcIlwiLFxuICAvKiogVGhlIG1heGltdW0gYW1vdW50IG9mIHJldHJpZXMgYWxsb3dlZCAqL1xuICBtYXhSZXRyeUNvdW50OiAxMCxcbiAgYXBpVmVyc2lvbjogXCI5XCIsXG4gIC8qKiBUaGUgc2VjcmV0IGF1dGhvcml6YXRpb24ga2V5IHRvIGNvbmZpcm0gdGhhdCB0aGlzIHdhcyBhIHJlcXVlc3QgbWFkZSBieSB5b3UgYW5kIG5vdCBhIERET1MgYXR0YWNrLiAqL1xuICBhdXRob3JpemF0aW9uOiBcImRpc2NvcmRlbm9fYmVzdF9saWJfZXZlclwiLFxuICBwYXRoUXVldWVzOiBuZXcgTWFwPFxuICAgIHN0cmluZyxcbiAgICB7XG4gICAgICByZXF1ZXN0OiBSZXN0UmVxdWVzdDtcbiAgICAgIHBheWxvYWQ6IFJlc3RQYXlsb2FkO1xuICAgIH1bXVxuICA+KCksXG4gIHByb2Nlc3NpbmdRdWV1ZTogZmFsc2UsXG4gIHByb2Nlc3NpbmdSYXRlTGltaXRlZFBhdGhzOiBmYWxzZSxcbiAgZ2xvYmFsbHlSYXRlTGltaXRlZDogZmFsc2UsXG4gIHJhdGVMaW1pdGVkUGF0aHM6IG5ldyBNYXA8c3RyaW5nLCBSZXN0UmF0ZUxpbWl0ZWRQYXRoPigpLFxuICBldmVudEhhbmRsZXJzOiB7XG4gICAgLy8gQlkgREVGQVVMVCBXRSBXSUxMIExPRyBBTEwgRVJST1JTIFRPIENPTlNPTEUuIFVTRVIgQ0FOIENIT09TRSBUTyBPVkVSUklERVxuICAgIGVycm9yOiBmdW5jdGlvbiAoLi4uYXJnczogdW5rbm93bltdKSB7fSxcbiAgICAvLyBQTEFDRUhPTERFUlMgVE8gQUxMT1cgVVNFUlMgVE8gQ1VTVE9NSVpFXG4gICAgZGVidWc6IGZ1bmN0aW9uICh0eXBlOiBzdHJpbmcsIGVycm9yOiBzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikge30sXG4gICAgZmV0Y2hpbmcocGF5bG9hZDogUmVzdFBheWxvYWQpIHt9LFxuICAgIGZldGNoZWQocGF5bG9hZDogUmVzdFBheWxvYWQpIHt9LFxuICAgIGZldGNoU3VjY2VzcyhwYXlsb2FkOiBSZXN0UGF5bG9hZCkge30sXG4gICAgZmV0Y2hGYWlsZWQocGF5bG9hZDogUmVzdFBheWxvYWQsIGVycm9yOiB1bmtub3duKSB7fSxcbiAgICBnbG9iYWxseVJhdGVMaW1pdGVkKHVybDogc3RyaW5nLCByZXNldHNBdDogbnVtYmVyKSB7fSxcbiAgICByZXRyaWVzTWF4ZWQocGF5bG9hZDogUmVzdFBheWxvYWQpIHt9LFxuICB9LFxuICAvKiogSGFuZGxlciBmdW5jdGlvbiBmb3IgZXZlcnkgcmVxdWVzdC4gQ29udmVydHMgdG8ganNvbiwgdmVyaWZpZWQgYXV0aG9yaXphdGlvbiAmIHJlcXVpcmVtZW50cyBhbmQgYmVnaW5zIHByb2Nlc3NpbmcgdGhlIHJlcXVlc3QgKi9cbiAgY2hlY2tSYXRlTGltaXRzLFxuICBjbGVhbnVwUXVldWVzLFxuICBwcm9jZXNzUXVldWUsXG4gIHByb2Nlc3NSYXRlTGltaXRlZFBhdGhzLFxuICBwcm9jZXNzUmVxdWVzdEhlYWRlcnMsXG4gIHByb2Nlc3NSZXF1ZXN0LFxuICBjcmVhdGVSZXF1ZXN0Qm9keSxcbiAgcnVuTWV0aG9kLFxuICBydW5Qcm94eU1ldGhvZCxcbiAgc2ltcGxpZnlVcmwsXG4gIGNvbnZlcnRSZXN0RXJyb3IsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3RSZXF1ZXN0IHtcbiAgdXJsOiBzdHJpbmc7XG4gIG1ldGhvZDogc3RyaW5nO1xuICByZXNwb25kOiAocGF5bG9hZDogUmVzdFJlcXVlc3RSZXNwb25zZSkgPT4gdW5rbm93bjtcbiAgcmVqZWN0OiAocGF5bG9hZDogUmVzdFJlcXVlc3RSZWplY3Rpb24pID0+IHVua25vd247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdFJlcXVlc3RSZXNwb25zZSB7XG4gIG9rOiBib29sZWFuO1xuICBzdGF0dXM6IG51bWJlcjtcbiAgYm9keT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXN0UmVxdWVzdFJlamVjdGlvbiBleHRlbmRzIFJlc3RSZXF1ZXN0UmVzcG9uc2Uge1xuICBlcnJvcjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3RQYXlsb2FkIHtcbiAgYnVja2V0SWQ/OiBzdHJpbmc7XG4gIGJvZHk/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgcmV0cnlDb3VudDogbnVtYmVyO1xuICBoZWFkZXJzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXN0UmF0ZUxpbWl0ZWRQYXRoIHtcbiAgdXJsOiBzdHJpbmc7XG4gIHJlc2V0VGltZXN0YW1wOiBudW1iZXI7XG4gIGJ1Y2tldElkPzogc3RyaW5nO1xufVxuIl19