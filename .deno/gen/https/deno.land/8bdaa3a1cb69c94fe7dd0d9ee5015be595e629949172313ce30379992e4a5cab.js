// deno-lint-ignore-file no-unused-vars
import { checkRateLimits } from "./checkRateLimits.ts";
import { cleanupQueues } from "./cleanupQueues.ts";
import { createRequestBody } from "./createRequestBody.ts";
import { processQueue } from "./processQueue.ts";
import { processRateLimitedPaths } from "./processRateLimitedPaths.ts";
import { processRequest } from "./processRequest.ts";
import { processRequestHeaders } from "./processRequestHeaders.ts";
import { runMethod } from "./runMethod.ts";
import { runProxyMethod } from "./runProxyMethod.ts";
import { simplifyUrl } from "./simplifyUrl.ts";
import { convertRestError } from "./convertRestError.ts";
export const rest = {
    /** The bot token for this rest client. */ token: "",
    /** The maximum amount of retries allowed */ maxRetryCount: 10,
    apiVersion: "9",
    /** The secret authorization key to confirm that this was a request made by you and not a DDOS attack. */ authorization: "discordeno_best_lib_ever",
    pathQueues: new Map(),
    processingQueue: false,
    processingRateLimitedPaths: false,
    globallyRateLimited: false,
    rateLimitedPaths: new Map(),
    eventHandlers: {
        // BY DEFAULT WE WILL LOG ALL ERRORS TO CONSOLE. USER CAN CHOOSE TO OVERRIDE
        error: function(...args) {},
        // PLACEHOLDERS TO ALLOW USERS TO CUSTOMIZE
        debug: function(type, error) {},
        fetching (payload) {},
        fetched (payload) {},
        fetchSuccess (payload) {},
        fetchFailed (payload, error) {},
        globallyRateLimited (url, resetsAt) {},
        retriesMaxed (payload) {}
    },
    /** Handler function for every request. Converts to json, verified authorization & requirements and begins processing the request */ checkRateLimits,
    cleanupQueues,
    processQueue,
    processRateLimitedPaths,
    processRequestHeaders,
    processRequest,
    createRequestBody,
    runMethod,
    runProxyMethod,
    simplifyUrl,
    convertRestError
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkZW5vLWxpbnQtaWdub3JlLWZpbGUgbm8tdW51c2VkLXZhcnNcbmltcG9ydCB7IGNoZWNrUmF0ZUxpbWl0cyB9IGZyb20gXCIuL2NoZWNrUmF0ZUxpbWl0cy50c1wiO1xuaW1wb3J0IHsgY2xlYW51cFF1ZXVlcyB9IGZyb20gXCIuL2NsZWFudXBRdWV1ZXMudHNcIjtcbmltcG9ydCB7IGNyZWF0ZVJlcXVlc3RCb2R5IH0gZnJvbSBcIi4vY3JlYXRlUmVxdWVzdEJvZHkudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NRdWV1ZSB9IGZyb20gXCIuL3Byb2Nlc3NRdWV1ZS50c1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMgfSBmcm9tIFwiLi9wcm9jZXNzUmF0ZUxpbWl0ZWRQYXRocy50c1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1JlcXVlc3QgfSBmcm9tIFwiLi9wcm9jZXNzUmVxdWVzdC50c1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1JlcXVlc3RIZWFkZXJzIH0gZnJvbSBcIi4vcHJvY2Vzc1JlcXVlc3RIZWFkZXJzLnRzXCI7XG5pbXBvcnQgeyBydW5NZXRob2QgfSBmcm9tIFwiLi9ydW5NZXRob2QudHNcIjtcbmltcG9ydCB7IHJ1blByb3h5TWV0aG9kIH0gZnJvbSBcIi4vcnVuUHJveHlNZXRob2QudHNcIjtcbmltcG9ydCB7IHNpbXBsaWZ5VXJsIH0gZnJvbSBcIi4vc2ltcGxpZnlVcmwudHNcIjtcbmltcG9ydCB7IGNvbnZlcnRSZXN0RXJyb3IgfSBmcm9tIFwiLi9jb252ZXJ0UmVzdEVycm9yLnRzXCI7XG5cbmV4cG9ydCBjb25zdCByZXN0ID0ge1xuICAvKiogVGhlIGJvdCB0b2tlbiBmb3IgdGhpcyByZXN0IGNsaWVudC4gKi9cbiAgdG9rZW46IFwiXCIsXG4gIC8qKiBUaGUgbWF4aW11bSBhbW91bnQgb2YgcmV0cmllcyBhbGxvd2VkICovXG4gIG1heFJldHJ5Q291bnQ6IDEwLFxuICBhcGlWZXJzaW9uOiBcIjlcIixcbiAgLyoqIFRoZSBzZWNyZXQgYXV0aG9yaXphdGlvbiBrZXkgdG8gY29uZmlybSB0aGF0IHRoaXMgd2FzIGEgcmVxdWVzdCBtYWRlIGJ5IHlvdSBhbmQgbm90IGEgRERPUyBhdHRhY2suICovXG4gIGF1dGhvcml6YXRpb246IFwiZGlzY29yZGVub19iZXN0X2xpYl9ldmVyXCIsXG4gIHBhdGhRdWV1ZXM6IG5ldyBNYXA8XG4gICAgc3RyaW5nLFxuICAgIHtcbiAgICAgIHJlcXVlc3Q6IFJlc3RSZXF1ZXN0O1xuICAgICAgcGF5bG9hZDogUmVzdFBheWxvYWQ7XG4gICAgfVtdXG4gID4oKSxcbiAgcHJvY2Vzc2luZ1F1ZXVlOiBmYWxzZSxcbiAgcHJvY2Vzc2luZ1JhdGVMaW1pdGVkUGF0aHM6IGZhbHNlLFxuICBnbG9iYWxseVJhdGVMaW1pdGVkOiBmYWxzZSxcbiAgcmF0ZUxpbWl0ZWRQYXRoczogbmV3IE1hcDxzdHJpbmcsIFJlc3RSYXRlTGltaXRlZFBhdGg+KCksXG4gIGV2ZW50SGFuZGxlcnM6IHtcbiAgICAvLyBCWSBERUZBVUxUIFdFIFdJTEwgTE9HIEFMTCBFUlJPUlMgVE8gQ09OU09MRS4gVVNFUiBDQU4gQ0hPT1NFIFRPIE9WRVJSSURFXG4gICAgZXJyb3I6IGZ1bmN0aW9uICguLi5hcmdzOiB1bmtub3duW10pIHt9LFxuICAgIC8vIFBMQUNFSE9MREVSUyBUTyBBTExPVyBVU0VSUyBUTyBDVVNUT01JWkVcbiAgICBkZWJ1ZzogZnVuY3Rpb24gKHR5cGU6IHN0cmluZywgZXJyb3I6IHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSB7fSxcbiAgICBmZXRjaGluZyhwYXlsb2FkOiBSZXN0UGF5bG9hZCkge30sXG4gICAgZmV0Y2hlZChwYXlsb2FkOiBSZXN0UGF5bG9hZCkge30sXG4gICAgZmV0Y2hTdWNjZXNzKHBheWxvYWQ6IFJlc3RQYXlsb2FkKSB7fSxcbiAgICBmZXRjaEZhaWxlZChwYXlsb2FkOiBSZXN0UGF5bG9hZCwgZXJyb3I6IHVua25vd24pIHt9LFxuICAgIGdsb2JhbGx5UmF0ZUxpbWl0ZWQodXJsOiBzdHJpbmcsIHJlc2V0c0F0OiBudW1iZXIpIHt9LFxuICAgIHJldHJpZXNNYXhlZChwYXlsb2FkOiBSZXN0UGF5bG9hZCkge30sXG4gIH0sXG4gIC8qKiBIYW5kbGVyIGZ1bmN0aW9uIGZvciBldmVyeSByZXF1ZXN0LiBDb252ZXJ0cyB0byBqc29uLCB2ZXJpZmllZCBhdXRob3JpemF0aW9uICYgcmVxdWlyZW1lbnRzIGFuZCBiZWdpbnMgcHJvY2Vzc2luZyB0aGUgcmVxdWVzdCAqL1xuICBjaGVja1JhdGVMaW1pdHMsXG4gIGNsZWFudXBRdWV1ZXMsXG4gIHByb2Nlc3NRdWV1ZSxcbiAgcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMsXG4gIHByb2Nlc3NSZXF1ZXN0SGVhZGVycyxcbiAgcHJvY2Vzc1JlcXVlc3QsXG4gIGNyZWF0ZVJlcXVlc3RCb2R5LFxuICBydW5NZXRob2QsXG4gIHJ1blByb3h5TWV0aG9kLFxuICBzaW1wbGlmeVVybCxcbiAgY29udmVydFJlc3RFcnJvcixcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdFJlcXVlc3Qge1xuICB1cmw6IHN0cmluZztcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIHJlc3BvbmQ6IChwYXlsb2FkOiBSZXN0UmVxdWVzdFJlc3BvbnNlKSA9PiB1bmtub3duO1xuICByZWplY3Q6IChwYXlsb2FkOiBSZXN0UmVxdWVzdFJlamVjdGlvbikgPT4gdW5rbm93bjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXN0UmVxdWVzdFJlc3BvbnNlIHtcbiAgb2s6IGJvb2xlYW47XG4gIHN0YXR1czogbnVtYmVyO1xuICBib2R5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3RSZXF1ZXN0UmVqZWN0aW9uIGV4dGVuZHMgUmVzdFJlcXVlc3RSZXNwb25zZSB7XG4gIGVycm9yOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdFBheWxvYWQge1xuICBidWNrZXRJZD86IHN0cmluZztcbiAgYm9keT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICByZXRyeUNvdW50OiBudW1iZXI7XG4gIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3RSYXRlTGltaXRlZFBhdGgge1xuICB1cmw6IHN0cmluZztcbiAgcmVzZXRUaW1lc3RhbXA6IG51bWJlcjtcbiAgYnVja2V0SWQ/OiBzdHJpbmc7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InVDQUF1QztBQUN2QyxTQUFTLGVBQWUsUUFBUSxzQkFBc0IsQ0FBQztBQUN2RCxTQUFTLGFBQWEsUUFBUSxvQkFBb0IsQ0FBQztBQUNuRCxTQUFTLGlCQUFpQixRQUFRLHdCQUF3QixDQUFDO0FBQzNELFNBQVMsWUFBWSxRQUFRLG1CQUFtQixDQUFDO0FBQ2pELFNBQVMsdUJBQXVCLFFBQVEsOEJBQThCLENBQUM7QUFDdkUsU0FBUyxjQUFjLFFBQVEscUJBQXFCLENBQUM7QUFDckQsU0FBUyxxQkFBcUIsUUFBUSw0QkFBNEIsQ0FBQztBQUNuRSxTQUFTLFNBQVMsUUFBUSxnQkFBZ0IsQ0FBQztBQUMzQyxTQUFTLGNBQWMsUUFBUSxxQkFBcUIsQ0FBQztBQUNyRCxTQUFTLFdBQVcsUUFBUSxrQkFBa0IsQ0FBQztBQUMvQyxTQUFTLGdCQUFnQixRQUFRLHVCQUF1QixDQUFDO0FBRXpELE9BQU8sTUFBTSxJQUFJLEdBQUc7SUFDbEIsMENBQTBDLENBQzFDLEtBQUssRUFBRSxFQUFFO0lBQ1QsNENBQTRDLENBQzVDLGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFVBQVUsRUFBRSxHQUFHO0lBQ2YseUdBQXlHLENBQ3pHLGFBQWEsRUFBRSwwQkFBMEI7SUFDekMsVUFBVSxFQUFFLElBQUksR0FBRyxFQU1oQjtJQUNILGVBQWUsRUFBRSxLQUFLO0lBQ3RCLDBCQUEwQixFQUFFLEtBQUs7SUFDakMsbUJBQW1CLEVBQUUsS0FBSztJQUMxQixnQkFBZ0IsRUFBRSxJQUFJLEdBQUcsRUFBK0I7SUFDeEQsYUFBYSxFQUFFO1FBQ2IsNEVBQTRFO1FBQzVFLEtBQUssRUFBRSxTQUFVLEdBQUcsSUFBSSxBQUFXLEVBQUUsRUFBRTtRQUN2QywyQ0FBMkM7UUFDM0MsS0FBSyxFQUFFLFNBQVUsSUFBWSxFQUFFLEtBQXVDLEVBQUUsRUFBRTtRQUMxRSxRQUFRLEVBQUMsT0FBb0IsRUFBRSxFQUFFO1FBQ2pDLE9BQU8sRUFBQyxPQUFvQixFQUFFLEVBQUU7UUFDaEMsWUFBWSxFQUFDLE9BQW9CLEVBQUUsRUFBRTtRQUNyQyxXQUFXLEVBQUMsT0FBb0IsRUFBRSxLQUFjLEVBQUUsRUFBRTtRQUNwRCxtQkFBbUIsRUFBQyxHQUFXLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO1FBQ3JELFlBQVksRUFBQyxPQUFvQixFQUFFLEVBQUU7S0FDdEM7SUFDRCxvSUFBb0ksQ0FDcEksZUFBZTtJQUNmLGFBQWE7SUFDYixZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLHFCQUFxQjtJQUNyQixjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLFNBQVM7SUFDVCxjQUFjO0lBQ2QsV0FBVztJQUNYLGdCQUFnQjtDQUNqQixDQUFDIn0=