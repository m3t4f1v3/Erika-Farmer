import { GuildFeatures } from "../../types/shared.ts";
import { ToggleBitfieldBigint } from "./ToggleBitfield.ts";
export const GuildToggle = {
    /** Whether the bot is the owner of the guild */ owner: 1n << 0n,
    /** Whether the server widget is enabled */ widgetEnabled: 1n << 1n,
    /** Whether this is considered a large guild */ large: 1n << 2n,
    /** Whether this guild is unavailable due to an outage */ unavailable: 1n << 3n,
    /** Whether the guild has the boost progress bar enabled */ premiumProgressBarEnabled: 1n << 4n,
    // GUILD FEATURES ARE BELOW THIS
    /** Whether the guild has access to set an invite splash background */ inviteSplash: 1n << 5n,
    /** Whether the guild has access to set 384 kbps bitrate in voice (previously VIP voice servers) */ vipRegions: 1n << 6n,
    /** Whether the guild has access to set a vanity URL */ vanityUrl: 1n << 7n,
    /** Whether the guild is verified */ verified: 1n << 8n,
    /** Whether the guild is partnered */ partnered: 1n << 9n,
    /** Whether the guild can enable welcome screen, Membership Screening, stage channels and discovery, and receives community updates */ community: 1n << 10n,
    /** Whether the guild has access to use commerce features (i.e. create store channels) */ commerce: 1n << 11n,
    /** Whether the guild has access to create news channels */ news: 1n << 12n,
    /** Whether the guild is able to be discovered in the directory */ discoverable: 1n << 13n,
    /** Whether the guild cannot be discoverable */ discoverableDisabled: 1n << 14n,
    /** Whether the guild is able to be featured in the directory */ feature: 1n << 15n,
    /** Whether the guild has access to set an animated guild icon */ animatedIcon: 1n << 16n,
    /** Whether the guild has access to set a guild banner image */ banner: 1n << 17n,
    /** Whether the guild has enabled the welcome screen */ welcomeScreenEnabled: 1n << 18n,
    /** Whether the guild has enabled [Membership Screening](https://discord.com/developers/docs/resources/guild#membership-screening-object) */ memberVerificationGateEnabled: 1n << 19n,
    /** Whether the guild can be previewed before joining via Membership Screening or the directory */ previewEnabled: 1n << 20n,
    /** Whether the guild has enabled ticketed events */ ticketedEventsEnabled: 1n << 21n,
    /** Whether the guild has enabled monetization */ monetizationEnabled: 1n << 22n,
    /** Whether the guild has increased custom sticker slots */ moreStickers: 1n << 23n,
    /** Whether the guild has access to create private threads */ privateThreads: 1n << 26n,
    /** Whether the guild is able to set role icons */ roleIcons: 1n << 27n
};
export class GuildToggles extends ToggleBitfieldBigint {
    constructor(guild){
        super();
        if (guild.owner) this.add(GuildToggle.owner);
        if (guild.widget_enabled) this.add(GuildToggle.widgetEnabled);
        if (guild.large) this.add(GuildToggle.large);
        if (guild.unavailable) this.add(GuildToggle.unavailable);
        if (guild.premium_progress_bar_enabled) this.add(GuildToggle.premiumProgressBarEnabled);
        if (guild.features.includes(GuildFeatures.InviteSplash)) this.add(GuildToggle.inviteSplash);
        if (guild.features.includes(GuildFeatures.VipRegions)) this.add(GuildToggle.vipRegions);
        if (guild.features.includes(GuildFeatures.VanityUrl)) this.add(GuildToggle.vanityUrl);
        if (guild.features.includes(GuildFeatures.Verified)) this.add(GuildToggle.verified);
        if (guild.features.includes(GuildFeatures.Partnered)) this.add(GuildToggle.partnered);
        if (guild.features.includes(GuildFeatures.Community)) this.add(GuildToggle.community);
        if (guild.features.includes(GuildFeatures.Commerce)) this.add(GuildToggle.commerce);
        if (guild.features.includes(GuildFeatures.News)) this.add(GuildToggle.news);
        if (guild.features.includes(GuildFeatures.Discoverable)) this.add(GuildToggle.discoverable);
        if (guild.features.includes(GuildFeatures.DiscoverableDisabled)) this.add(GuildToggle.discoverableDisabled);
        if (guild.features.includes(GuildFeatures.Feature)) this.add(GuildToggle.feature);
        if (guild.features.includes(GuildFeatures.AnimatedIcon)) this.add(GuildToggle.animatedIcon);
        if (guild.features.includes(GuildFeatures.Banner)) this.add(GuildToggle.banner);
        if (guild.features.includes(GuildFeatures.WelcomeScreenEnabled)) this.add(GuildToggle.welcomeScreenEnabled);
        if (guild.features.includes(GuildFeatures.MemberVerificationGateEnabled)) {
            this.add(GuildToggle.memberVerificationGateEnabled);
        }
        if (guild.features.includes(GuildFeatures.PreviewEnabled)) this.add(GuildToggle.previewEnabled);
        if (guild.features.includes(GuildFeatures.TicketedEventsEnabled)) this.add(GuildToggle.ticketedEventsEnabled);
        if (guild.features.includes(GuildFeatures.MonetizationEnabled)) this.add(GuildToggle.monetizationEnabled);
        if (guild.features.includes(GuildFeatures.MoreStickers)) this.add(GuildToggle.moreStickers);
        if (guild.features.includes(GuildFeatures.PrivateThreads)) this.add(GuildToggle.privateThreads);
        if (guild.features.includes(GuildFeatures.RoleIcons)) this.add(GuildToggle.roleIcons);
    }
    /** Whether the bot is the owner of the guild */ get owner() {
        return this.has("owner");
    }
    /** Whether the server widget is enabled */ get widgetEnabled() {
        return this.has("widgetEnabled");
    }
    /** Whether this is considered a large guild */ get large() {
        return this.has("large");
    }
    /** Whether this guild is unavailable due to an outage */ get unavailable() {
        return this.has("unavailable");
    }
    /** Whether the guild has the boost progress bar enabled */ get premiumProgressBarEnabled() {
        return this.has("premiumProgressBarEnabled");
    }
    /** Whether the guild has access to set an invite splash background */ get inviteSplash() {
        return this.has("inviteSplash");
    }
    /** Whether the guild has access to set 384 kbps bitrate in voice (previously VIP voice servers) */ get vipRegions() {
        return this.has("vipRegions");
    }
    /** Whether the guild has access to set a vanity URL */ get vanityUrl() {
        return this.has("vanityUrl");
    }
    /** Whether the guild is verified */ get verified() {
        return this.has("verified");
    }
    /** Whether the guild is partnered */ get partnered() {
        return this.has("partnered");
    }
    /** Whether the guild can enable welcome screen, Membership Screening, stage channels and discovery, and receives community updates */ get community() {
        return this.has("community");
    }
    /** Whether the guild has access to use commerce features (i.e. create store channels) */ get commerce() {
        return this.has("commerce");
    }
    /** Whether the guild has access to create news channels */ get news() {
        return this.has("news");
    }
    /** Whether the guild is able to be discovered in the directory */ get discoverable() {
        return this.has("discoverable");
    }
    /** Whether the guild cannot be discoverable */ get discoverableDisabled() {
        return this.has("discoverableDisabled");
    }
    /** Whether the guild is able to be featured in the directory */ get feature() {
        return this.has("feature");
    }
    /** Whether the guild has access to set an animated guild icon */ get animatedIcon() {
        return this.has("animatedIcon");
    }
    /** Whether the guild has access to set a guild banner image */ get banner() {
        return this.has("banner");
    }
    /** Whether the guild has enabled the welcome screen */ get welcomeScreenEnabled() {
        return this.has("welcomeScreenEnabled");
    }
    /** Whether the guild has enabled [Membership Screening](https://discord.com/developers/docs/resources/guild#membership-screening-object) */ get memberVerificationGateEnabled() {
        return this.has("memberVerificationGateEnabled");
    }
    /** Whether the guild can be previewed before joining via Membership Screening or the directory */ get previewEnabled() {
        return this.has("previewEnabled");
    }
    /** Whether the guild has enabled ticketed events */ get ticketedEventsEnabled() {
        return this.has("ticketedEventsEnabled");
    }
    /** Whether the guild has enabled monetization */ get monetizationEnabled() {
        return this.has("monetizationEnabled");
    }
    /** Whether the guild has increased custom sticker slots */ get moreStickers() {
        return this.has("moreStickers");
    }
    /** Whether the guild has access to create private threads */ get privateThreads() {
        return this.has("privateThreads");
    }
    /** Whether the guild is able to set role icons */ get roleIcons() {
        return this.has("roleIcons");
    }
    /** Checks whether or not the permissions exist in this */ has(permissions) {
        if (!Array.isArray(permissions)) return super.contains(GuildToggle[permissions]);
        return super.contains(permissions.reduce((a, b)=>a |= GuildToggle[b]
        , 0n));
    }
    /** Lists all the toggles for the role and whether or not each is true or false. */ list() {
        const json = {};
        for (const [key, value] of Object.entries(GuildToggle)){
            json[key] = super.contains(value);
        }
        return json;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXNjb3JkR3VpbGQgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZGlzY29yZC50c1wiO1xuaW1wb3J0IHsgR3VpbGRGZWF0dXJlcyB9IGZyb20gXCIuLi8uLi90eXBlcy9zaGFyZWQudHNcIjtcbmltcG9ydCB7IFRvZ2dsZUJpdGZpZWxkLCBUb2dnbGVCaXRmaWVsZEJpZ2ludCB9IGZyb20gXCIuL1RvZ2dsZUJpdGZpZWxkLnRzXCI7XG5cbmV4cG9ydCBjb25zdCBHdWlsZFRvZ2dsZSA9IHtcbiAgLyoqIFdoZXRoZXIgdGhlIGJvdCBpcyB0aGUgb3duZXIgb2YgdGhlIGd1aWxkICovXG4gIG93bmVyOiAxbiA8PCAwbixcbiAgLyoqIFdoZXRoZXIgdGhlIHNlcnZlciB3aWRnZXQgaXMgZW5hYmxlZCAqL1xuICB3aWRnZXRFbmFibGVkOiAxbiA8PCAxbixcbiAgLyoqIFdoZXRoZXIgdGhpcyBpcyBjb25zaWRlcmVkIGEgbGFyZ2UgZ3VpbGQgKi9cbiAgbGFyZ2U6IDFuIDw8IDJuLFxuICAvKiogV2hldGhlciB0aGlzIGd1aWxkIGlzIHVuYXZhaWxhYmxlIGR1ZSB0byBhbiBvdXRhZ2UgKi9cbiAgdW5hdmFpbGFibGU6IDFuIDw8IDNuLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIHRoZSBib29zdCBwcm9ncmVzcyBiYXIgZW5hYmxlZCAqL1xuICBwcmVtaXVtUHJvZ3Jlc3NCYXJFbmFibGVkOiAxbiA8PCA0bixcblxuICAvLyBHVUlMRCBGRUFUVVJFUyBBUkUgQkVMT1cgVEhJU1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBoYXMgYWNjZXNzIHRvIHNldCBhbiBpbnZpdGUgc3BsYXNoIGJhY2tncm91bmQgKi9cbiAgaW52aXRlU3BsYXNoOiAxbiA8PCA1bixcbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBhY2Nlc3MgdG8gc2V0IDM4NCBrYnBzIGJpdHJhdGUgaW4gdm9pY2UgKHByZXZpb3VzbHkgVklQIHZvaWNlIHNlcnZlcnMpICovXG4gIHZpcFJlZ2lvbnM6IDFuIDw8IDZuLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGFjY2VzcyB0byBzZXQgYSB2YW5pdHkgVVJMICovXG4gIHZhbml0eVVybDogMW4gPDwgN24sXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBpcyB2ZXJpZmllZCAqL1xuICB2ZXJpZmllZDogMW4gPDwgOG4sXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBpcyBwYXJ0bmVyZWQgKi9cbiAgcGFydG5lcmVkOiAxbiA8PCA5bixcbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGNhbiBlbmFibGUgd2VsY29tZSBzY3JlZW4sIE1lbWJlcnNoaXAgU2NyZWVuaW5nLCBzdGFnZSBjaGFubmVscyBhbmQgZGlzY292ZXJ5LCBhbmQgcmVjZWl2ZXMgY29tbXVuaXR5IHVwZGF0ZXMgKi9cbiAgY29tbXVuaXR5OiAxbiA8PCAxMG4sXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBoYXMgYWNjZXNzIHRvIHVzZSBjb21tZXJjZSBmZWF0dXJlcyAoaS5lLiBjcmVhdGUgc3RvcmUgY2hhbm5lbHMpICovXG4gIGNvbW1lcmNlOiAxbiA8PCAxMW4sXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBoYXMgYWNjZXNzIHRvIGNyZWF0ZSBuZXdzIGNoYW5uZWxzICovXG4gIG5ld3M6IDFuIDw8IDEybixcbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGlzIGFibGUgdG8gYmUgZGlzY292ZXJlZCBpbiB0aGUgZGlyZWN0b3J5ICovXG4gIGRpc2NvdmVyYWJsZTogMW4gPDwgMTNuLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgY2Fubm90IGJlIGRpc2NvdmVyYWJsZSAqL1xuICBkaXNjb3ZlcmFibGVEaXNhYmxlZDogMW4gPDwgMTRuLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaXMgYWJsZSB0byBiZSBmZWF0dXJlZCBpbiB0aGUgZGlyZWN0b3J5ICovXG4gIGZlYXR1cmU6IDFuIDw8IDE1bixcbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBhY2Nlc3MgdG8gc2V0IGFuIGFuaW1hdGVkIGd1aWxkIGljb24gKi9cbiAgYW5pbWF0ZWRJY29uOiAxbiA8PCAxNm4sXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBoYXMgYWNjZXNzIHRvIHNldCBhIGd1aWxkIGJhbm5lciBpbWFnZSAqL1xuICBiYW5uZXI6IDFuIDw8IDE3bixcbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBlbmFibGVkIHRoZSB3ZWxjb21lIHNjcmVlbiAqL1xuICB3ZWxjb21lU2NyZWVuRW5hYmxlZDogMW4gPDwgMThuLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGVuYWJsZWQgW01lbWJlcnNoaXAgU2NyZWVuaW5nXShodHRwczovL2Rpc2NvcmQuY29tL2RldmVsb3BlcnMvZG9jcy9yZXNvdXJjZXMvZ3VpbGQjbWVtYmVyc2hpcC1zY3JlZW5pbmctb2JqZWN0KSAqL1xuICBtZW1iZXJWZXJpZmljYXRpb25HYXRlRW5hYmxlZDogMW4gPDwgMTluLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgY2FuIGJlIHByZXZpZXdlZCBiZWZvcmUgam9pbmluZyB2aWEgTWVtYmVyc2hpcCBTY3JlZW5pbmcgb3IgdGhlIGRpcmVjdG9yeSAqL1xuICBwcmV2aWV3RW5hYmxlZDogMW4gPDwgMjBuLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGVuYWJsZWQgdGlja2V0ZWQgZXZlbnRzICovXG4gIHRpY2tldGVkRXZlbnRzRW5hYmxlZDogMW4gPDwgMjFuLFxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGVuYWJsZWQgbW9uZXRpemF0aW9uICovXG4gIG1vbmV0aXphdGlvbkVuYWJsZWQ6IDFuIDw8IDIybixcbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBpbmNyZWFzZWQgY3VzdG9tIHN0aWNrZXIgc2xvdHMgKi9cbiAgbW9yZVN0aWNrZXJzOiAxbiA8PCAyM24sXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBoYXMgYWNjZXNzIHRvIGNyZWF0ZSBwcml2YXRlIHRocmVhZHMgKi9cbiAgcHJpdmF0ZVRocmVhZHM6IDFuIDw8IDI2bixcbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGlzIGFibGUgdG8gc2V0IHJvbGUgaWNvbnMgKi9cbiAgcm9sZUljb25zOiAxbiA8PCAyN24sXG59O1xuXG5leHBvcnQgY2xhc3MgR3VpbGRUb2dnbGVzIGV4dGVuZHMgVG9nZ2xlQml0ZmllbGRCaWdpbnQge1xuICBjb25zdHJ1Y3RvcihndWlsZDogRGlzY29yZEd1aWxkKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmIChndWlsZC5vd25lcikgdGhpcy5hZGQoR3VpbGRUb2dnbGUub3duZXIpO1xuICAgIGlmIChndWlsZC53aWRnZXRfZW5hYmxlZCkgdGhpcy5hZGQoR3VpbGRUb2dnbGUud2lkZ2V0RW5hYmxlZCk7XG4gICAgaWYgKGd1aWxkLmxhcmdlKSB0aGlzLmFkZChHdWlsZFRvZ2dsZS5sYXJnZSk7XG4gICAgaWYgKGd1aWxkLnVuYXZhaWxhYmxlKSB0aGlzLmFkZChHdWlsZFRvZ2dsZS51bmF2YWlsYWJsZSk7XG4gICAgaWYgKGd1aWxkLnByZW1pdW1fcHJvZ3Jlc3NfYmFyX2VuYWJsZWQpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLnByZW1pdW1Qcm9ncmVzc0JhckVuYWJsZWQpO1xuXG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuSW52aXRlU3BsYXNoKSkgdGhpcy5hZGQoR3VpbGRUb2dnbGUuaW52aXRlU3BsYXNoKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5WaXBSZWdpb25zKSkgdGhpcy5hZGQoR3VpbGRUb2dnbGUudmlwUmVnaW9ucyk7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuVmFuaXR5VXJsKSkgdGhpcy5hZGQoR3VpbGRUb2dnbGUudmFuaXR5VXJsKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5WZXJpZmllZCkpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLnZlcmlmaWVkKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5QYXJ0bmVyZWQpKSB0aGlzLmFkZChHdWlsZFRvZ2dsZS5wYXJ0bmVyZWQpO1xuICAgIGlmIChndWlsZC5mZWF0dXJlcy5pbmNsdWRlcyhHdWlsZEZlYXR1cmVzLkNvbW11bml0eSkpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLmNvbW11bml0eSk7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuQ29tbWVyY2UpKSB0aGlzLmFkZChHdWlsZFRvZ2dsZS5jb21tZXJjZSk7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuTmV3cykpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLm5ld3MpO1xuICAgIGlmIChndWlsZC5mZWF0dXJlcy5pbmNsdWRlcyhHdWlsZEZlYXR1cmVzLkRpc2NvdmVyYWJsZSkpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLmRpc2NvdmVyYWJsZSk7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuRGlzY292ZXJhYmxlRGlzYWJsZWQpKSB0aGlzLmFkZChHdWlsZFRvZ2dsZS5kaXNjb3ZlcmFibGVEaXNhYmxlZCk7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuRmVhdHVyZSkpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLmZlYXR1cmUpO1xuICAgIGlmIChndWlsZC5mZWF0dXJlcy5pbmNsdWRlcyhHdWlsZEZlYXR1cmVzLkFuaW1hdGVkSWNvbikpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLmFuaW1hdGVkSWNvbik7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuQmFubmVyKSkgdGhpcy5hZGQoR3VpbGRUb2dnbGUuYmFubmVyKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5XZWxjb21lU2NyZWVuRW5hYmxlZCkpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLndlbGNvbWVTY3JlZW5FbmFibGVkKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5NZW1iZXJWZXJpZmljYXRpb25HYXRlRW5hYmxlZCkpIHtcbiAgICAgIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLm1lbWJlclZlcmlmaWNhdGlvbkdhdGVFbmFibGVkKTtcbiAgICB9XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuUHJldmlld0VuYWJsZWQpKSB0aGlzLmFkZChHdWlsZFRvZ2dsZS5wcmV2aWV3RW5hYmxlZCk7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuVGlja2V0ZWRFdmVudHNFbmFibGVkKSkgdGhpcy5hZGQoR3VpbGRUb2dnbGUudGlja2V0ZWRFdmVudHNFbmFibGVkKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5Nb25ldGl6YXRpb25FbmFibGVkKSkgdGhpcy5hZGQoR3VpbGRUb2dnbGUubW9uZXRpemF0aW9uRW5hYmxlZCk7XG4gICAgaWYgKGd1aWxkLmZlYXR1cmVzLmluY2x1ZGVzKEd1aWxkRmVhdHVyZXMuTW9yZVN0aWNrZXJzKSkgdGhpcy5hZGQoR3VpbGRUb2dnbGUubW9yZVN0aWNrZXJzKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5Qcml2YXRlVGhyZWFkcykpIHRoaXMuYWRkKEd1aWxkVG9nZ2xlLnByaXZhdGVUaHJlYWRzKTtcbiAgICBpZiAoZ3VpbGQuZmVhdHVyZXMuaW5jbHVkZXMoR3VpbGRGZWF0dXJlcy5Sb2xlSWNvbnMpKSB0aGlzLmFkZChHdWlsZFRvZ2dsZS5yb2xlSWNvbnMpO1xuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhlIGJvdCBpcyB0aGUgb3duZXIgb2YgdGhlIGd1aWxkICovXG4gIGdldCBvd25lcigpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoXCJvd25lclwiKTtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoZSBzZXJ2ZXIgd2lkZ2V0IGlzIGVuYWJsZWQgKi9cbiAgZ2V0IHdpZGdldEVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwid2lkZ2V0RW5hYmxlZFwiKTtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoaXMgaXMgY29uc2lkZXJlZCBhIGxhcmdlIGd1aWxkICovXG4gIGdldCBsYXJnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoXCJsYXJnZVwiKTtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoaXMgZ3VpbGQgaXMgdW5hdmFpbGFibGUgZHVlIHRvIGFuIG91dGFnZSAqL1xuICBnZXQgdW5hdmFpbGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwidW5hdmFpbGFibGVcIik7XG4gIH1cblxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIHRoZSBib29zdCBwcm9ncmVzcyBiYXIgZW5hYmxlZCAqL1xuICBnZXQgcHJlbWl1bVByb2dyZXNzQmFyRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoXCJwcmVtaXVtUHJvZ3Jlc3NCYXJFbmFibGVkXCIpO1xuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBhY2Nlc3MgdG8gc2V0IGFuIGludml0ZSBzcGxhc2ggYmFja2dyb3VuZCAqL1xuICBnZXQgaW52aXRlU3BsYXNoKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcImludml0ZVNwbGFzaFwiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGFjY2VzcyB0byBzZXQgMzg0IGticHMgYml0cmF0ZSBpbiB2b2ljZSAocHJldmlvdXNseSBWSVAgdm9pY2Ugc2VydmVycykgKi9cbiAgZ2V0IHZpcFJlZ2lvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwidmlwUmVnaW9uc1wiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGFjY2VzcyB0byBzZXQgYSB2YW5pdHkgVVJMICovXG4gIGdldCB2YW5pdHlVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwidmFuaXR5VXJsXCIpO1xuICB9XG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBpcyB2ZXJpZmllZCAqL1xuICBnZXQgdmVyaWZpZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwidmVyaWZpZWRcIik7XG4gIH1cbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGlzIHBhcnRuZXJlZCAqL1xuICBnZXQgcGFydG5lcmVkKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcInBhcnRuZXJlZFwiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgY2FuIGVuYWJsZSB3ZWxjb21lIHNjcmVlbiwgTWVtYmVyc2hpcCBTY3JlZW5pbmcsIHN0YWdlIGNoYW5uZWxzIGFuZCBkaXNjb3ZlcnksIGFuZCByZWNlaXZlcyBjb21tdW5pdHkgdXBkYXRlcyAqL1xuICBnZXQgY29tbXVuaXR5KCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcImNvbW11bml0eVwiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGFjY2VzcyB0byB1c2UgY29tbWVyY2UgZmVhdHVyZXMgKGkuZS4gY3JlYXRlIHN0b3JlIGNoYW5uZWxzKSAqL1xuICBnZXQgY29tbWVyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwiY29tbWVyY2VcIik7XG4gIH1cbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBhY2Nlc3MgdG8gY3JlYXRlIG5ld3MgY2hhbm5lbHMgKi9cbiAgZ2V0IG5ld3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwibmV3c1wiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaXMgYWJsZSB0byBiZSBkaXNjb3ZlcmVkIGluIHRoZSBkaXJlY3RvcnkgKi9cbiAgZ2V0IGRpc2NvdmVyYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoXCJkaXNjb3ZlcmFibGVcIik7XG4gIH1cbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGNhbm5vdCBiZSBkaXNjb3ZlcmFibGUgKi9cbiAgZ2V0IGRpc2NvdmVyYWJsZURpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcImRpc2NvdmVyYWJsZURpc2FibGVkXCIpO1xuICB9XG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBpcyBhYmxlIHRvIGJlIGZlYXR1cmVkIGluIHRoZSBkaXJlY3RvcnkgKi9cbiAgZ2V0IGZlYXR1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwiZmVhdHVyZVwiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGFjY2VzcyB0byBzZXQgYW4gYW5pbWF0ZWQgZ3VpbGQgaWNvbiAqL1xuICBnZXQgYW5pbWF0ZWRJY29uKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcImFuaW1hdGVkSWNvblwiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGFjY2VzcyB0byBzZXQgYSBndWlsZCBiYW5uZXIgaW1hZ2UgKi9cbiAgZ2V0IGJhbm5lcigpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoXCJiYW5uZXJcIik7XG4gIH1cbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBlbmFibGVkIHRoZSB3ZWxjb21lIHNjcmVlbiAqL1xuICBnZXQgd2VsY29tZVNjcmVlbkVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwid2VsY29tZVNjcmVlbkVuYWJsZWRcIik7XG4gIH1cbiAgLyoqIFdoZXRoZXIgdGhlIGd1aWxkIGhhcyBlbmFibGVkIFtNZW1iZXJzaGlwIFNjcmVlbmluZ10oaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2d1aWxkI21lbWJlcnNoaXAtc2NyZWVuaW5nLW9iamVjdCkgKi9cbiAgZ2V0IG1lbWJlclZlcmlmaWNhdGlvbkdhdGVFbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcIm1lbWJlclZlcmlmaWNhdGlvbkdhdGVFbmFibGVkXCIpO1xuICB9XG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBjYW4gYmUgcHJldmlld2VkIGJlZm9yZSBqb2luaW5nIHZpYSBNZW1iZXJzaGlwIFNjcmVlbmluZyBvciB0aGUgZGlyZWN0b3J5ICovXG4gIGdldCBwcmV2aWV3RW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoXCJwcmV2aWV3RW5hYmxlZFwiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGVuYWJsZWQgdGlja2V0ZWQgZXZlbnRzICovXG4gIGdldCB0aWNrZXRlZEV2ZW50c0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwidGlja2V0ZWRFdmVudHNFbmFibGVkXCIpO1xuICB9XG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBoYXMgZW5hYmxlZCBtb25ldGl6YXRpb24gKi9cbiAgZ2V0IG1vbmV0aXphdGlvbkVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwibW9uZXRpemF0aW9uRW5hYmxlZFwiKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgZ3VpbGQgaGFzIGluY3JlYXNlZCBjdXN0b20gc3RpY2tlciBzbG90cyAqL1xuICBnZXQgbW9yZVN0aWNrZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcIm1vcmVTdGlja2Vyc1wiKTtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBoYXMgYWNjZXNzIHRvIGNyZWF0ZSBwcml2YXRlIHRocmVhZHMgKi9cbiAgZ2V0IHByaXZhdGVUaHJlYWRzKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcInByaXZhdGVUaHJlYWRzXCIpO1xuICB9XG4gIC8qKiBXaGV0aGVyIHRoZSBndWlsZCBpcyBhYmxlIHRvIHNldCByb2xlIGljb25zICovXG4gIGdldCByb2xlSWNvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwicm9sZUljb25zXCIpO1xuICB9XG5cbiAgLyoqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGUgcGVybWlzc2lvbnMgZXhpc3QgaW4gdGhpcyAqL1xuICBoYXMocGVybWlzc2lvbnM6IEd1aWxkVG9nZ2xlS2V5cyB8IEd1aWxkVG9nZ2xlS2V5c1tdKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBlcm1pc3Npb25zKSkgcmV0dXJuIHN1cGVyLmNvbnRhaW5zKEd1aWxkVG9nZ2xlW3Blcm1pc3Npb25zXSk7XG5cbiAgICByZXR1cm4gc3VwZXIuY29udGFpbnMocGVybWlzc2lvbnMucmVkdWNlKChhLCBiKSA9PiAoYSB8PSBHdWlsZFRvZ2dsZVtiXSksIDBuKSk7XG4gIH1cblxuICAvKiogTGlzdHMgYWxsIHRoZSB0b2dnbGVzIGZvciB0aGUgcm9sZSBhbmQgd2hldGhlciBvciBub3QgZWFjaCBpcyB0cnVlIG9yIGZhbHNlLiAqL1xuICBsaXN0KCkge1xuICAgIGNvbnN0IGpzb246IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoR3VpbGRUb2dnbGUpKSB7XG4gICAgICBqc29uW2tleV0gPSBzdXBlci5jb250YWlucyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb24gYXMgUmVjb3JkPEd1aWxkVG9nZ2xlS2V5cywgYm9vbGVhbj47XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgR3VpbGRUb2dnbGVLZXlzID0ga2V5b2YgdHlwZW9mIEd1aWxkVG9nZ2xlO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsYUFBYSxRQUFRLHVCQUF1QixDQUFDO0FBQ3RELFNBQXlCLG9CQUFvQixRQUFRLHFCQUFxQixDQUFDO0FBRTNFLE9BQU8sTUFBTSxXQUFXLEdBQUc7SUFDekIsZ0RBQWdELENBQ2hELEtBQUssRUFBRSxFQUFFLElBQUksRUFBRTtJQUNmLDJDQUEyQyxDQUMz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eEYsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEYsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEYsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEYsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEYsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEYsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUYsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzVHLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xGLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVGLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hGLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM1RyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFO1lBQ3hFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDOUcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzFHLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVGLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hHLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZGO0lBRUQsZ0RBQWdELENBQ2hELElBQUksS0FBSyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzFCO0lBRUQsMkNBQTJDLENBQzNDLElBQUksYUFBYSxHQUFHO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUNsQztJQUVELCtDQUErQyxDQUMvQyxJQUFJLEtBQUssR0FBRztRQUNWLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMxQjtJQUVELHlEQUF5RCxDQUN6RCxJQUFJLFdBQVcsR0FBRztRQUNoQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDaEM7SUFFRCwyREFBMkQsQ0FDM0QsSUFBSSx5QkFBeUIsR0FBRztRQUM5QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUM5QztJQUVELHNFQUFzRSxDQUN0RSxJQUFJLFlBQVksR0FBRztRQUNqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDakM7SUFDRCxtR0FBbUcsQ0FDbkcsSUFBSSxVQUFVLEdBQUc7UUFDZixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDL0I7SUFDRCx1REFBdUQsQ0FDdkQsSUFBSSxTQUFTLEdBQUc7UUFDZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDOUI7SUFDRCxvQ0FBb0MsQ0FDcEMsSUFBSSxRQUFRLEdBQUc7UUFDYixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDN0I7SUFDRCxxQ0FBcUMsQ0FDckMsSUFBSSxTQUFTLEdBQUc7UUFDZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDOUI7SUFDRCxzSUFBc0ksQ0FDdEksSUFBSSxTQUFTLEdBQUc7UUFDZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDOUI7SUFDRCx5RkFBeUYsQ0FDekYsSUFBSSxRQUFRLEdBQUc7UUFDYixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDN0I7SUFDRCwyREFBMkQsQ0FDM0QsSUFBSSxJQUFJLEdBQUc7UUFDVCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDekI7SUFDRCxrRUFBa0UsQ0FDbEUsSUFBSSxZQUFZLEdBQUc7UUFDakIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ2pDO0lBQ0QsK0NBQStDLENBQy9DLElBQUksb0JBQW9CLEdBQUc7UUFDekIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7S0FDekM7SUFDRCxnRUFBZ0UsQ0FDaEUsSUFBSSxPQUFPLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDNUI7SUFDRCxpRUFBaUUsQ0FDakUsSUFBSSxZQUFZLEdBQUc7UUFDakIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ2pDO0lBQ0QsK0RBQStELENBQy9ELElBQUksTUFBTSxHQUFHO1FBQ1gsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzNCO0lBQ0QsdURBQXVELENBQ3ZELElBQUksb0JBQW9CLEdBQUc7UUFDekIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7S0FDekM7SUFDRCw0SUFBNEksQ0FDNUksSUFBSSw2QkFBNkIsR0FBRztRQUNsQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsQ0FBQztLQUNsRDtJQUNELGtHQUFrRyxDQUNsRyxJQUFJLGNBQWMsR0FBRztRQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUNuQztJQUNELG9EQUFvRCxDQUNwRCxJQUFJLHFCQUFxQixHQUFHO1FBQzFCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsaURBQWlELENBQ2pELElBQUksbUJBQW1CLEdBQUc7UUFDeEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7S0FDeEM7SUFDRCwyREFBMkQsQ0FDM0QsSUFBSSxZQUFZLEdBQUc7UUFDakIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsNkRBQTZELENBQzdELElBQUksY0FBYyxHQUFHO1FBQ25CLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ25DO0lBQ0Qsa0RBQWtELENBQ2xELElBQUksU0FBUyxHQUFHO1FBQ2QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsMERBQTBELENBQzFELEdBQUcsQ0FBQyxXQUFnRCxFQUFFO1FBQ3BELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUVqRixPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDaEY7SUFFRCxtRkFBbUYsQ0FDbkYsSUFBSSxHQUFHO1FBQ0wsTUFBTSxJQUFJLEdBQTRCLEVBQUUsQUFBQztRQUN6QyxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBRTtZQUN0RCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQztRQUVELE9BQU8sSUFBSSxDQUFxQztLQUNqRDtDQUNGIn0=