import { ToggleBitfield } from "./ToggleBitfield.ts";
export const MemberToggle = {
    deaf: 1 << 0,
    mute: 1 << 1,
    pending: 1 << 2,
};
export class MemberToggles extends ToggleBitfield {
    constructor(member) {
        super();
        if (member.deaf)
            this.add(MemberToggle.deaf);
        if (member.mute)
            this.add(MemberToggle.mute);
        if (member.pending)
            this.add(MemberToggle.pending);
    }
    get deaf() {
        return this.has("deaf");
    }
    get mute() {
        return this.has("mute");
    }
    get pending() {
        return this.has("pending");
    }
    has(permissions) {
        if (!Array.isArray(permissions))
            return super.contains(MemberToggle[permissions]);
        return super.contains(permissions.reduce((a, b) => (a |= MemberToggle[b]), 0));
    }
    list() {
        const json = {};
        for (const [key, value] of Object.entries(MemberToggle)) {
            json[key] = super.contains(value);
        }
        return json;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVtYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFFMUIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDO0lBRVosSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDO0lBRVosT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO0NBQ2hCLENBQUM7QUFFRixNQUFNLE9BQU8sYUFBYyxTQUFRLGNBQWM7SUFDL0MsWUFBWSxNQUE4QjtRQUN4QyxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksTUFBTSxDQUFDLElBQUk7WUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLE1BQU0sQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsSUFBSSxNQUFNLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFHRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUdELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBR0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFHRCxHQUFHLENBQUMsV0FBa0Q7UUFDcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRWxGLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBR0QsSUFBSTtRQUNGLE1BQU0sSUFBSSxHQUE0QixFQUFFLENBQUM7UUFDekMsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7UUFFRCxPQUFPLElBQXlDLENBQUM7SUFDbkQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlzY29yZE1lbWJlciwgRGlzY29yZFVzZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZGlzY29yZC50c1wiO1xuaW1wb3J0IHsgVG9nZ2xlQml0ZmllbGQgfSBmcm9tIFwiLi9Ub2dnbGVCaXRmaWVsZC50c1wiO1xuXG5leHBvcnQgY29uc3QgTWVtYmVyVG9nZ2xlID0ge1xuICAvKiogV2hldGhlciB0aGUgdXNlciBpcyBkZWFmZW5lZCBpbiB2b2ljZSBjaGFubmVscyAqL1xuICBkZWFmOiAxIDw8IDAsXG4gIC8qKiBXaGV0aGVyIHRoZSB1c2VyIGlzIG11dGVkIGluIHZvaWNlIGNoYW5uZWxzICovXG4gIG11dGU6IDEgPDwgMSxcbiAgLyoqIFdoZXRoZXIgdGhlIHVzZXIgaGFzIG5vdCB5ZXQgcGFzc2VkIHRoZSBndWlsZCdzIE1lbWJlcnNoaXAgU2NyZWVuaW5nIHJlcXVpcmVtZW50cyAqL1xuICBwZW5kaW5nOiAxIDw8IDIsXG59O1xuXG5leHBvcnQgY2xhc3MgTWVtYmVyVG9nZ2xlcyBleHRlbmRzIFRvZ2dsZUJpdGZpZWxkIHtcbiAgY29uc3RydWN0b3IobWVtYmVyOiBQYXJ0aWFsPERpc2NvcmRNZW1iZXI+KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmIChtZW1iZXIuZGVhZikgdGhpcy5hZGQoTWVtYmVyVG9nZ2xlLmRlYWYpO1xuICAgIGlmIChtZW1iZXIubXV0ZSkgdGhpcy5hZGQoTWVtYmVyVG9nZ2xlLm11dGUpO1xuICAgIGlmIChtZW1iZXIucGVuZGluZykgdGhpcy5hZGQoTWVtYmVyVG9nZ2xlLnBlbmRpbmcpO1xuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhlIHVzZXIgYmVsb25ncyB0byBhbiBPQXV0aDIgYXBwbGljYXRpb24gKi9cbiAgZ2V0IGRlYWYoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKFwiZGVhZlwiKTtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoZSB1c2VyIGlzIG11dGVkIGluIHZvaWNlIGNoYW5uZWxzICovXG4gIGdldCBtdXRlKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcIm11dGVcIik7XG4gIH1cblxuICAvKiogV2hldGhlciB0aGUgdXNlciBoYXMgbm90IHlldCBwYXNzZWQgdGhlIGd1aWxkJ3MgTWVtYmVyc2hpcCBTY3JlZW5pbmcgcmVxdWlyZW1lbnRzICovXG4gIGdldCBwZW5kaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmhhcyhcInBlbmRpbmdcIik7XG4gIH1cblxuICAvKiogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoZSBwZXJtaXNzaW9ucyBleGlzdCBpbiB0aGlzICovXG4gIGhhcyhwZXJtaXNzaW9uczogTWVtYmVyVG9nZ2xlS2V5cyB8IE1lbWJlclRvZ2dsZUtleXNbXSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwZXJtaXNzaW9ucykpIHJldHVybiBzdXBlci5jb250YWlucyhNZW1iZXJUb2dnbGVbcGVybWlzc2lvbnNdKTtcblxuICAgIHJldHVybiBzdXBlci5jb250YWlucyhwZXJtaXNzaW9ucy5yZWR1Y2UoKGEsIGIpID0+IChhIHw9IE1lbWJlclRvZ2dsZVtiXSksIDApKTtcbiAgfVxuXG4gIC8qKiBMaXN0cyBhbGwgdGhlIHRvZ2dsZXMgZm9yIHRoZSByb2xlIGFuZCB3aGV0aGVyIG9yIG5vdCBlYWNoIGlzIHRydWUgb3IgZmFsc2UuICovXG4gIGxpc3QoKSB7XG4gICAgY29uc3QganNvbjogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhNZW1iZXJUb2dnbGUpKSB7XG4gICAgICBqc29uW2tleV0gPSBzdXBlci5jb250YWlucyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb24gYXMgUmVjb3JkPE1lbWJlclRvZ2dsZUtleXMsIGJvb2xlYW4+O1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIE1lbWJlclRvZ2dsZUtleXMgPSBrZXlvZiB0eXBlb2YgTWVtYmVyVG9nZ2xlO1xuIl19