import { HTTPResponseCodes } from "../types/shared.ts";
export async function processGlobalQueue(rest) {
    // IF QUEUE IS EMPTY EXIT
    if (!rest.globalQueue.length) return;
    // IF QUEUE IS ALREADY RUNNING EXIT
    if (rest.globalQueueProcessing) return;
    // SET AS TRUE SO OTHER QUEUES DON'T START
    rest.globalQueueProcessing = true;
    while(rest.globalQueue.length){
        // IF THE BOT IS GLOBALLY RATE LIMITED TRY AGAIN
        if (rest.globallyRateLimited) {
            setTimeout(()=>{
                rest.debug(`[REST - processGlobalQueue] Globally rate limited, running setTimeout.`);
                rest.processGlobalQueue(rest);
            }, 1000);
            break;
        }
        if (rest.invalidRequests === rest.maxInvalidRequests - rest.invalidRequestsSafetyAmount) {
            setTimeout(()=>{
                const time = rest.invalidRequestsInterval - (Date.now() - rest.invalidRequestFrozenAt);
                rest.debug(`[REST - processGlobalQueue] Freeze global queue because of invalid requests. Time Remaining: ${time / 1000} seconds.`);
                rest.processGlobalQueue(rest);
            }, 1000);
            break;
        }
        const request = rest.globalQueue.shift();
        // REMOVES ANY POTENTIAL INVALID CONFLICTS
        if (!request) continue;
        // CHECK RATE LIMITS FOR 429 REPEATS
        // IF THIS URL IS STILL RATE LIMITED, TRY AGAIN
        const urlResetIn = rest.checkRateLimits(rest, request.basicURL);
        // IF A BUCKET EXISTS, CHECK THE BUCKET'S RATE LIMITS
        const bucketResetIn = request.payload.bucketId ? rest.checkRateLimits(rest, request.payload.bucketId) : false;
        if (urlResetIn || bucketResetIn) {
            // ONLY ADD TIMEOUT IF ANOTHER QUEUE IS NOT PENDING
            setTimeout(()=>{
                rest.debug(`[REST - processGlobalQueue] rate limited, running setTimeout.`);
                // THIS REST IS RATE LIMITED, SO PUSH BACK TO START
                rest.globalQueue.unshift(request);
                // START QUEUE IF NOT STARTED
                rest.processGlobalQueue(rest);
            }, urlResetIn || bucketResetIn);
            continue;
        }
        try {
            // CUSTOM HANDLER FOR USER TO LOG OR WHATEVER WHENEVER A FETCH IS MADE
            rest.debug(`[REST - fetching] URL: ${request.urlToUse} | ${JSON.stringify(request.payload)}`);
            const response = await fetch(request.urlToUse, rest.createRequestBody(rest, request));
            rest.debug(`[REST - fetched] URL: ${request.urlToUse} | ${JSON.stringify(request.payload)}`);
            const bucketIdFromHeaders = rest.processRequestHeaders(rest, request.basicURL, response.headers);
            // SET THE BUCKET Id IF IT WAS PRESENT
            if (bucketIdFromHeaders) {
                request.payload.bucketId = bucketIdFromHeaders;
            }
            if (response.status < 200 || response.status >= 400) {
                rest.debug(`[REST - httpError] Payload: ${JSON.stringify(request.payload)} | Response: ${JSON.stringify(response)}`);
                let error = "REQUEST_UNKNOWN_ERROR";
                switch(response.status){
                    case HTTPResponseCodes.BadRequest:
                        error = "The request was improperly formatted, or the server couldn't understand it.";
                        break;
                    case HTTPResponseCodes.Unauthorized:
                        error = "The Authorization header was missing or invalid.";
                        break;
                    case HTTPResponseCodes.Forbidden:
                        error = "The Authorization token you passed did not have permission to the resource.";
                        break;
                    case HTTPResponseCodes.NotFound:
                        error = "The resource at the location specified doesn't exist.";
                        break;
                    case HTTPResponseCodes.MethodNotAllowed:
                        error = "The HTTP method used is not valid for the location specified.";
                        break;
                    case HTTPResponseCodes.GatewayUnavailable:
                        error = "There was not a gateway available to process your request. Wait a bit and retry.";
                        break;
                }
                if (rest.invalidRequestErrorStatuses.includes(response.status) && !(response.status === 429 && response.headers.get("X-RateLimit-Scope"))) {
                    // INCREMENT CURRENT INVALID REQUESTS
                    ++rest.invalidRequests;
                    if (!rest.invalidRequestsTimeoutId) {
                        rest.invalidRequestsTimeoutId = setTimeout(()=>{
                            rest.debug(`[REST - processGlobalQueue] Resetting invalid requests counter in setTimeout.`);
                            rest.invalidRequests = 0;
                            rest.invalidRequestsTimeoutId = 0;
                        }, rest.invalidRequestsInterval);
                    }
                }
                // If NOT rate limited remove from queue
                if (response.status !== 429) {
                    let json = undefined;
                    if (response.type) {
                        json = JSON.stringify(await response.json());
                    }
                    request.request.reject({
                        ok: false,
                        status: response.status,
                        error,
                        body: json
                    });
                } else {
                    if ((request.payload.retryCount++) >= rest.maxRetryCount) {
                        rest.debug(`[REST - RetriesMaxed] ${JSON.stringify(request.payload)}`);
                        // REMOVE ITEM FROM QUEUE TO PREVENT RETRY
                        request.request.reject({
                            ok: false,
                            status: response.status,
                            error: "The request was rate limited and it maxed out the retries limit."
                        });
                        continue;
                    }
                    // WAS RATE LIMITED. PUSH TO END OF GLOBAL QUEUE, SO WE DON'T BLOCK OTHER REQUESTS.
                    rest.globalQueue.push(request);
                }
                continue;
            }
            // SOMETIMES DISCORD RETURNS AN EMPTY 204 RESPONSE THAT CAN'T BE MADE TO JSON
            if (response.status === 204) {
                rest.debug(`[REST - FetchSuccess] URL: ${request.urlToUse} | ${JSON.stringify(request.payload)}`);
                request.request.respond({
                    ok: true,
                    status: 204
                });
            } else {
                // CONVERT THE RESPONSE TO JSON
                const json = JSON.stringify(await response.json());
                rest.debug(`[REST - fetchSuccess] ${JSON.stringify(request.payload)}`);
                request.request.respond({
                    ok: true,
                    status: 200,
                    body: json
                });
            }
        } catch (error) {
            // SOMETHING WENT WRONG, LOG AND RESPOND WITH ERROR
            rest.debug(`[REST - fetchFailed] Payload: ${JSON.stringify(request.payload)} | Error: ${error}`);
            request.request.reject({
                ok: false,
                status: 599,
                error: "Internal Proxy Error"
            });
        }
    }
    // ALLOW OTHER QUEUES TO START WHEN NEW REQUEST IS MADE
    rest.globalQueueProcessing = false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN0TWFuYWdlciB9IGZyb20gXCIuLi9ib3QudHNcIjtcbmltcG9ydCB7IEhUVFBSZXNwb25zZUNvZGVzIH0gZnJvbSBcIi4uL3R5cGVzL3NoYXJlZC50c1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0dsb2JhbFF1ZXVlKHJlc3Q6IFJlc3RNYW5hZ2VyKSB7XG4gIC8vIElGIFFVRVVFIElTIEVNUFRZIEVYSVRcbiAgaWYgKCFyZXN0Lmdsb2JhbFF1ZXVlLmxlbmd0aCkgcmV0dXJuO1xuICAvLyBJRiBRVUVVRSBJUyBBTFJFQURZIFJVTk5JTkcgRVhJVFxuICBpZiAocmVzdC5nbG9iYWxRdWV1ZVByb2Nlc3NpbmcpIHJldHVybjtcblxuICAvLyBTRVQgQVMgVFJVRSBTTyBPVEhFUiBRVUVVRVMgRE9OJ1QgU1RBUlRcbiAgcmVzdC5nbG9iYWxRdWV1ZVByb2Nlc3NpbmcgPSB0cnVlO1xuXG4gIHdoaWxlIChyZXN0Lmdsb2JhbFF1ZXVlLmxlbmd0aCkge1xuICAgIC8vIElGIFRIRSBCT1QgSVMgR0xPQkFMTFkgUkFURSBMSU1JVEVEIFRSWSBBR0FJTlxuICAgIGlmIChyZXN0Lmdsb2JhbGx5UmF0ZUxpbWl0ZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZXN0LmRlYnVnKGBbUkVTVCAtIHByb2Nlc3NHbG9iYWxRdWV1ZV0gR2xvYmFsbHkgcmF0ZSBsaW1pdGVkLCBydW5uaW5nIHNldFRpbWVvdXQuYCk7XG4gICAgICAgIHJlc3QucHJvY2Vzc0dsb2JhbFF1ZXVlKHJlc3QpO1xuICAgICAgfSwgMTAwMCk7XG5cbiAgICAgIC8vIEJSRUFLIFdISUxFIExPT1BcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChyZXN0LmludmFsaWRSZXF1ZXN0cyA9PT0gcmVzdC5tYXhJbnZhbGlkUmVxdWVzdHMgLSByZXN0LmludmFsaWRSZXF1ZXN0c1NhZmV0eUFtb3VudCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWUgPSByZXN0LmludmFsaWRSZXF1ZXN0c0ludGVydmFsIC0gKERhdGUubm93KCkgLSByZXN0LmludmFsaWRSZXF1ZXN0RnJvemVuQXQpO1xuICAgICAgICByZXN0LmRlYnVnKFxuICAgICAgICAgIGBbUkVTVCAtIHByb2Nlc3NHbG9iYWxRdWV1ZV0gRnJlZXplIGdsb2JhbCBxdWV1ZSBiZWNhdXNlIG9mIGludmFsaWQgcmVxdWVzdHMuIFRpbWUgUmVtYWluaW5nOiAke1xuICAgICAgICAgICAgdGltZSAvIDEwMDBcbiAgICAgICAgICB9IHNlY29uZHMuYCxcbiAgICAgICAgKTtcbiAgICAgICAgcmVzdC5wcm9jZXNzR2xvYmFsUXVldWUocmVzdCk7XG4gICAgICB9LCAxMDAwKTtcblxuICAgICAgLy8gQlJFQUsgV0hJTEUgTE9PUFxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgcmVxdWVzdCA9IHJlc3QuZ2xvYmFsUXVldWUuc2hpZnQoKTtcbiAgICAvLyBSRU1PVkVTIEFOWSBQT1RFTlRJQUwgSU5WQUxJRCBDT05GTElDVFNcbiAgICBpZiAoIXJlcXVlc3QpIGNvbnRpbnVlO1xuXG4gICAgLy8gQ0hFQ0sgUkFURSBMSU1JVFMgRk9SIDQyOSBSRVBFQVRTXG4gICAgLy8gSUYgVEhJUyBVUkwgSVMgU1RJTEwgUkFURSBMSU1JVEVELCBUUlkgQUdBSU5cbiAgICBjb25zdCB1cmxSZXNldEluID0gcmVzdC5jaGVja1JhdGVMaW1pdHMocmVzdCwgcmVxdWVzdC5iYXNpY1VSTCk7XG4gICAgLy8gSUYgQSBCVUNLRVQgRVhJU1RTLCBDSEVDSyBUSEUgQlVDS0VUJ1MgUkFURSBMSU1JVFNcbiAgICBjb25zdCBidWNrZXRSZXNldEluID0gcmVxdWVzdC5wYXlsb2FkLmJ1Y2tldElkID8gcmVzdC5jaGVja1JhdGVMaW1pdHMocmVzdCwgcmVxdWVzdC5wYXlsb2FkLmJ1Y2tldElkKSA6IGZhbHNlO1xuXG4gICAgaWYgKHVybFJlc2V0SW4gfHwgYnVja2V0UmVzZXRJbikge1xuICAgICAgLy8gT05MWSBBREQgVElNRU9VVCBJRiBBTk9USEVSIFFVRVVFIElTIE5PVCBQRU5ESU5HXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVzdC5kZWJ1ZyhgW1JFU1QgLSBwcm9jZXNzR2xvYmFsUXVldWVdIHJhdGUgbGltaXRlZCwgcnVubmluZyBzZXRUaW1lb3V0LmApO1xuICAgICAgICAvLyBUSElTIFJFU1QgSVMgUkFURSBMSU1JVEVELCBTTyBQVVNIIEJBQ0sgVE8gU1RBUlRcbiAgICAgICAgcmVzdC5nbG9iYWxRdWV1ZS51bnNoaWZ0KHJlcXVlc3QpO1xuICAgICAgICAvLyBTVEFSVCBRVUVVRSBJRiBOT1QgU1RBUlRFRFxuICAgICAgICByZXN0LnByb2Nlc3NHbG9iYWxRdWV1ZShyZXN0KTtcbiAgICAgIH0sIHVybFJlc2V0SW4gfHwgKGJ1Y2tldFJlc2V0SW4gYXMgbnVtYmVyKSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBDVVNUT00gSEFORExFUiBGT1IgVVNFUiBUTyBMT0cgT1IgV0hBVEVWRVIgV0hFTkVWRVIgQSBGRVRDSCBJUyBNQURFXG4gICAgICByZXN0LmRlYnVnKGBbUkVTVCAtIGZldGNoaW5nXSBVUkw6ICR7cmVxdWVzdC51cmxUb1VzZX0gfCAke0pTT04uc3RyaW5naWZ5KHJlcXVlc3QucGF5bG9hZCl9YCk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdC51cmxUb1VzZSwgcmVzdC5jcmVhdGVSZXF1ZXN0Qm9keShyZXN0LCByZXF1ZXN0KSk7XG4gICAgICByZXN0LmRlYnVnKGBbUkVTVCAtIGZldGNoZWRdIFVSTDogJHtyZXF1ZXN0LnVybFRvVXNlfSB8ICR7SlNPTi5zdHJpbmdpZnkocmVxdWVzdC5wYXlsb2FkKX1gKTtcblxuICAgICAgY29uc3QgYnVja2V0SWRGcm9tSGVhZGVycyA9IHJlc3QucHJvY2Vzc1JlcXVlc3RIZWFkZXJzKHJlc3QsIHJlcXVlc3QuYmFzaWNVUkwsIHJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgLy8gU0VUIFRIRSBCVUNLRVQgSWQgSUYgSVQgV0FTIFBSRVNFTlRcbiAgICAgIGlmIChidWNrZXRJZEZyb21IZWFkZXJzKSB7XG4gICAgICAgIHJlcXVlc3QucGF5bG9hZC5idWNrZXRJZCA9IGJ1Y2tldElkRnJvbUhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPCAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzID49IDQwMCkge1xuICAgICAgICByZXN0LmRlYnVnKFxuICAgICAgICAgIGBbUkVTVCAtIGh0dHBFcnJvcl0gUGF5bG9hZDogJHtKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnBheWxvYWQpfSB8IFJlc3BvbnNlOiAke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlKX1gLFxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBlcnJvciA9IFwiUkVRVUVTVF9VTktOT1dOX0VSUk9SXCI7XG4gICAgICAgIHN3aXRjaCAocmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSBIVFRQUmVzcG9uc2VDb2Rlcy5CYWRSZXF1ZXN0OlxuICAgICAgICAgICAgZXJyb3IgPSBcIlRoZSByZXF1ZXN0IHdhcyBpbXByb3Blcmx5IGZvcm1hdHRlZCwgb3IgdGhlIHNlcnZlciBjb3VsZG4ndCB1bmRlcnN0YW5kIGl0LlwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBIVFRQUmVzcG9uc2VDb2Rlcy5VbmF1dGhvcml6ZWQ6XG4gICAgICAgICAgICBlcnJvciA9IFwiVGhlIEF1dGhvcml6YXRpb24gaGVhZGVyIHdhcyBtaXNzaW5nIG9yIGludmFsaWQuXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIEhUVFBSZXNwb25zZUNvZGVzLkZvcmJpZGRlbjpcbiAgICAgICAgICAgIGVycm9yID0gXCJUaGUgQXV0aG9yaXphdGlvbiB0b2tlbiB5b3UgcGFzc2VkIGRpZCBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHRoZSByZXNvdXJjZS5cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgSFRUUFJlc3BvbnNlQ29kZXMuTm90Rm91bmQ6XG4gICAgICAgICAgICBlcnJvciA9IFwiVGhlIHJlc291cmNlIGF0IHRoZSBsb2NhdGlvbiBzcGVjaWZpZWQgZG9lc24ndCBleGlzdC5cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgSFRUUFJlc3BvbnNlQ29kZXMuTWV0aG9kTm90QWxsb3dlZDpcbiAgICAgICAgICAgIGVycm9yID0gXCJUaGUgSFRUUCBtZXRob2QgdXNlZCBpcyBub3QgdmFsaWQgZm9yIHRoZSBsb2NhdGlvbiBzcGVjaWZpZWQuXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIEhUVFBSZXNwb25zZUNvZGVzLkdhdGV3YXlVbmF2YWlsYWJsZTpcbiAgICAgICAgICAgIGVycm9yID0gXCJUaGVyZSB3YXMgbm90IGEgZ2F0ZXdheSBhdmFpbGFibGUgdG8gcHJvY2VzcyB5b3VyIHJlcXVlc3QuIFdhaXQgYSBiaXQgYW5kIHJldHJ5LlwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdC5pbnZhbGlkUmVxdWVzdEVycm9yU3RhdHVzZXMuaW5jbHVkZXMocmVzcG9uc2Uuc3RhdHVzKSAmJlxuICAgICAgICAgICEocmVzcG9uc2Uuc3RhdHVzID09PSA0MjkgJiYgcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJYLVJhdGVMaW1pdC1TY29wZVwiKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gSU5DUkVNRU5UIENVUlJFTlQgSU5WQUxJRCBSRVFVRVNUU1xuICAgICAgICAgICsrcmVzdC5pbnZhbGlkUmVxdWVzdHM7XG5cbiAgICAgICAgICBpZiAoIXJlc3QuaW52YWxpZFJlcXVlc3RzVGltZW91dElkKSB7XG4gICAgICAgICAgICByZXN0LmludmFsaWRSZXF1ZXN0c1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICByZXN0LmRlYnVnKGBbUkVTVCAtIHByb2Nlc3NHbG9iYWxRdWV1ZV0gUmVzZXR0aW5nIGludmFsaWQgcmVxdWVzdHMgY291bnRlciBpbiBzZXRUaW1lb3V0LmApO1xuICAgICAgICAgICAgICByZXN0LmludmFsaWRSZXF1ZXN0cyA9IDA7XG4gICAgICAgICAgICAgIHJlc3QuaW52YWxpZFJlcXVlc3RzVGltZW91dElkID0gMDtcbiAgICAgICAgICAgIH0sIHJlc3QuaW52YWxpZFJlcXVlc3RzSW50ZXJ2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIE5PVCByYXRlIGxpbWl0ZWQgcmVtb3ZlIGZyb20gcXVldWVcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gNDI5KSB7XG4gICAgICAgICAgbGV0IGpzb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnR5cGUpIHtcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnN0cmluZ2lmeShhd2FpdCByZXNwb25zZS5qc29uKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXF1ZXN0LnJlcXVlc3QucmVqZWN0KHtcbiAgICAgICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICBib2R5OiBqc29uLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyZXF1ZXN0LnBheWxvYWQucmV0cnlDb3VudCsrID49IHJlc3QubWF4UmV0cnlDb3VudCkge1xuICAgICAgICAgICAgcmVzdC5kZWJ1ZyhgW1JFU1QgLSBSZXRyaWVzTWF4ZWRdICR7SlNPTi5zdHJpbmdpZnkocmVxdWVzdC5wYXlsb2FkKX1gKTtcbiAgICAgICAgICAgIC8vIFJFTU9WRSBJVEVNIEZST00gUVVFVUUgVE8gUFJFVkVOVCBSRVRSWVxuICAgICAgICAgICAgcmVxdWVzdC5yZXF1ZXN0LnJlamVjdCh7XG4gICAgICAgICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgIGVycm9yOiBcIlRoZSByZXF1ZXN0IHdhcyByYXRlIGxpbWl0ZWQgYW5kIGl0IG1heGVkIG91dCB0aGUgcmV0cmllcyBsaW1pdC5cIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gV0FTIFJBVEUgTElNSVRFRC4gUFVTSCBUTyBFTkQgT0YgR0xPQkFMIFFVRVVFLCBTTyBXRSBET04nVCBCTE9DSyBPVEhFUiBSRVFVRVNUUy5cbiAgICAgICAgICByZXN0Lmdsb2JhbFF1ZXVlLnB1c2gocmVxdWVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gU09NRVRJTUVTIERJU0NPUkQgUkVUVVJOUyBBTiBFTVBUWSAyMDQgUkVTUE9OU0UgVEhBVCBDQU4nVCBCRSBNQURFIFRPIEpTT05cbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICByZXN0LmRlYnVnKGBbUkVTVCAtIEZldGNoU3VjY2Vzc10gVVJMOiAke3JlcXVlc3QudXJsVG9Vc2V9IHwgJHtKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnBheWxvYWQpfWApO1xuICAgICAgICByZXF1ZXN0LnJlcXVlc3QucmVzcG9uZCh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ09OVkVSVCBUSEUgUkVTUE9OU0UgVE8gSlNPTlxuICAgICAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcblxuICAgICAgICByZXN0LmRlYnVnKGBbUkVTVCAtIGZldGNoU3VjY2Vzc10gJHtKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnBheWxvYWQpfWApO1xuICAgICAgICByZXF1ZXN0LnJlcXVlc3QucmVzcG9uZCh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgYm9keToganNvbixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNPTUVUSElORyBXRU5UIFdST05HLCBMT0cgQU5EIFJFU1BPTkQgV0lUSCBFUlJPUlxuICAgICAgcmVzdC5kZWJ1ZyhgW1JFU1QgLSBmZXRjaEZhaWxlZF0gUGF5bG9hZDogJHtKU09OLnN0cmluZ2lmeShyZXF1ZXN0LnBheWxvYWQpfSB8IEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgcmVxdWVzdC5yZXF1ZXN0LnJlamVjdCh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiA1OTksXG4gICAgICAgIGVycm9yOiBcIkludGVybmFsIFByb3h5IEVycm9yXCIsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvLyBBTExPVyBPVEhFUiBRVUVVRVMgVE8gU1RBUlQgV0hFTiBORVcgUkVRVUVTVCBJUyBNQURFXG4gIHJlc3QuZ2xvYmFsUXVldWVQcm9jZXNzaW5nID0gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxpQkFBaUIsUUFBUSxvQkFBb0IsQ0FBQztBQUV2RCxPQUFPLGVBQWUsa0JBQWtCLENBQUMsSUFBaUIsRUFBRTtJQUMxRCx5QkFBeUI7SUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE9BQU87SUFDckMsbUNBQW1DO0lBQ25DLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLE9BQU87SUFFdkMsMENBQTBDO0lB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