import { HTTPResponseCodes } from "../types/shared.ts";
export async function processGlobalQueue(rest) {
    if (!rest.globalQueue.length)
        return;
    if (rest.globalQueueProcessing)
        return;
    rest.globalQueueProcessing = true;
    while (rest.globalQueue.length) {
        if (rest.globallyRateLimited) {
            setTimeout(() => {
                rest.debug(`[REST - processGlobalQueue] Globally rate limited, running setTimeout.`);
                rest.processGlobalQueue(rest);
            }, 1000);
            break;
        }
        if (rest.invalidRequests === rest.maxInvalidRequests - rest.invalidRequestsSafetyAmount) {
            setTimeout(() => {
                const time = rest.invalidRequestsInterval - (Date.now() - rest.invalidRequestFrozenAt);
                rest.debug(`[REST - processGlobalQueue] Freeze global queue because of invalid requests. Time Remaining: ${time / 1000} seconds.`);
                rest.processGlobalQueue(rest);
            }, 1000);
            break;
        }
        const request = rest.globalQueue.shift();
        if (!request)
            continue;
        const urlResetIn = rest.checkRateLimits(rest, request.basicURL);
        const bucketResetIn = request.payload.bucketId ? rest.checkRateLimits(rest, request.payload.bucketId) : false;
        if (urlResetIn || bucketResetIn) {
            setTimeout(() => {
                rest.debug(`[REST - processGlobalQueue] rate limited, running setTimeout.`);
                rest.globalQueue.unshift(request);
                rest.processGlobalQueue(rest);
            }, urlResetIn || bucketResetIn);
            continue;
        }
        try {
            rest.debug(`[REST - fetching] URL: ${request.urlToUse} | ${JSON.stringify(request.payload)}`);
            const response = await fetch(request.urlToUse, rest.createRequestBody(rest, request));
            rest.debug(`[REST - fetched] URL: ${request.urlToUse} | ${JSON.stringify(request.payload)}`);
            const bucketIdFromHeaders = rest.processRequestHeaders(rest, request.basicURL, response.headers);
            if (bucketIdFromHeaders) {
                request.payload.bucketId = bucketIdFromHeaders;
            }
            if (response.status < 200 || response.status >= 400) {
                rest.debug(`[REST - httpError] Payload: ${JSON.stringify(request.payload)} | Response: ${JSON.stringify(response)}`);
                let error = "REQUEST_UNKNOWN_ERROR";
                switch (response.status) {
                    case HTTPResponseCodes.BadRequest:
                        error = "The request was improperly formatted, or the server couldn't understand it.";
                        break;
                    case HTTPResponseCodes.Unauthorized:
                        error = "The Authorization header was missing or invalid.";
                        break;
                    case HTTPResponseCodes.Forbidden:
                        error = "The Authorization token you passed did not have permission to the resource.";
                        break;
                    case HTTPResponseCodes.NotFound:
                        error = "The resource at the location specified doesn't exist.";
                        break;
                    case HTTPResponseCodes.MethodNotAllowed:
                        error = "The HTTP method used is not valid for the location specified.";
                        break;
                    case HTTPResponseCodes.GatewayUnavailable:
                        error = "There was not a gateway available to process your request. Wait a bit and retry.";
                        break;
                }
                if (rest.invalidRequestErrorStatuses.includes(response.status) &&
                    !(response.status === 429 && response.headers.get("X-RateLimit-Scope"))) {
                    ++rest.invalidRequests;
                    if (!rest.invalidRequestsTimeoutId) {
                        rest.invalidRequestsTimeoutId = setTimeout(() => {
                            rest.debug(`[REST - processGlobalQueue] Resetting invalid requests counter in setTimeout.`);
                            rest.invalidRequests = 0;
                            rest.invalidRequestsTimeoutId = 0;
                        }, rest.invalidRequestsInterval);
                    }
                }
                if (response.status !== 429) {
                    let json = undefined;
                    if (response.type) {
                        json = JSON.stringify(await response.json());
                    }
                    request.request.reject({
                        ok: false,
                        status: response.status,
                        error,
                        body: json,
                    });
                }
                else {
                    if (request.payload.retryCount++ >= rest.maxRetryCount) {
                        rest.debug(`[REST - RetriesMaxed] ${JSON.stringify(request.payload)}`);
                        request.request.reject({
                            ok: false,
                            status: response.status,
                            error: "The request was rate limited and it maxed out the retries limit.",
                        });
                        continue;
                    }
                    rest.globalQueue.push(request);
                }
                continue;
            }
            if (response.status === 204) {
                rest.debug(`[REST - FetchSuccess] URL: ${request.urlToUse} | ${JSON.stringify(request.payload)}`);
                request.request.respond({
                    ok: true,
                    status: 204,
                });
            }
            else {
                const json = JSON.stringify(await response.json());
                rest.debug(`[REST - fetchSuccess] ${JSON.stringify(request.payload)}`);
                request.request.respond({
                    ok: true,
                    status: 200,
                    body: json,
                });
            }
        }
        catch (error) {
            rest.debug(`[REST - fetchFailed] Payload: ${JSON.stringify(request.payload)} | Error: ${error}`);
            request.request.reject({
                ok: false,
                status: 599,
                error: "Internal Proxy Error",
            });
        }
    }
    rest.globalQueueProcessing = false;
}
//# sourceMappingURL=data:application/json;base64,