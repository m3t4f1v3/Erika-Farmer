import { Collection } from "../deps.ts";
/**
 * Highly recommended to **NOT** use this function to get members instead use fetchMembers().
 * REST(this function): 50/s global(across all shards) rate limit with ALL requests this included
 * GW(fetchMembers): 120/m(PER shard) rate limit. Meaning if you have 8 shards your limit is 960/m.
 */ export async function getMembersPaginated(bot, guildId, options) {
    const members = new Collection();
    let membersLeft = options?.limit ?? 1000;
    let loops = 1;
    while((options?.limit ?? 1000) > members.size && membersLeft > 0){
        bot.events.debug("Running while loop in getMembers function.");
        if (options?.limit && options.limit > 1000) {
            console.log(`Paginating get members from REST. #${loops} / ${Math.ceil((options?.limit ?? 1) / 1000)}`);
        }
        const result = await bot.rest.runMethod(bot.rest, "GET", bot.constants.routes.GUILD_MEMBERS(guildId, {
            limit: membersLeft > 1000 ? 1000 : membersLeft,
            after: options.after
        }));
        const discordenoMembers = result.map((member)=>bot.transformers.member(bot, member, guildId, bot.transformers.snowflake(member.user.id))
        );
        if (!discordenoMembers.length) break;
        discordenoMembers.forEach((member)=>{
            bot.events.debug(`Running forEach loop in get_members file.`);
            members.set(member.id, member);
        });
        options = {
            limit: options?.limit,
            after: discordenoMembers[discordenoMembers.length - 1].id.toString()
        };
        membersLeft -= 1000;
        loops++;
    }
    return members;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3QsIENvbGxlY3Rpb24sIERpc2NvcmRNZW1iZXJXaXRoVXNlciwgTGlzdEd1aWxkTWVtYmVycywgTWVtYmVyIH0gZnJvbSBcIi4uL2RlcHMudHNcIjtcblxuLyoqXG4gKiBIaWdobHkgcmVjb21tZW5kZWQgdG8gKipOT1QqKiB1c2UgdGhpcyBmdW5jdGlvbiB0byBnZXQgbWVtYmVycyBpbnN0ZWFkIHVzZSBmZXRjaE1lbWJlcnMoKS5cbiAqIFJFU1QodGhpcyBmdW5jdGlvbik6IDUwL3MgZ2xvYmFsKGFjcm9zcyBhbGwgc2hhcmRzKSByYXRlIGxpbWl0IHdpdGggQUxMIHJlcXVlc3RzIHRoaXMgaW5jbHVkZWRcbiAqIEdXKGZldGNoTWVtYmVycyk6IDEyMC9tKFBFUiBzaGFyZCkgcmF0ZSBsaW1pdC4gTWVhbmluZyBpZiB5b3UgaGF2ZSA4IHNoYXJkcyB5b3VyIGxpbWl0IGlzIDk2MC9tLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWVtYmVyc1BhZ2luYXRlZChcbiAgYm90OiBCb3QsXG4gIGd1aWxkSWQ6IGJpZ2ludCxcbiAgb3B0aW9uczogTGlzdEd1aWxkTWVtYmVycyxcbikge1xuICBjb25zdCBtZW1iZXJzID0gbmV3IENvbGxlY3Rpb248YmlnaW50LCBNZW1iZXI+KCk7XG5cbiAgbGV0IG1lbWJlcnNMZWZ0ID0gb3B0aW9ucz8ubGltaXQgPz8gMTAwMDtcbiAgbGV0IGxvb3BzID0gMTtcbiAgd2hpbGUgKFxuICAgIChvcHRpb25zPy5saW1pdCA/PyAxMDAwKSA+IG1lbWJlcnMuc2l6ZSAmJlxuICAgIG1lbWJlcnNMZWZ0ID4gMFxuICApIHtcbiAgICBib3QuZXZlbnRzLmRlYnVnKFwiUnVubmluZyB3aGlsZSBsb29wIGluIGdldE1lbWJlcnMgZnVuY3Rpb24uXCIpO1xuXG4gICAgaWYgKG9wdGlvbnM/LmxpbWl0ICYmIG9wdGlvbnMubGltaXQgPiAxMDAwKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYFBhZ2luYXRpbmcgZ2V0IG1lbWJlcnMgZnJvbSBSRVNULiAjJHtsb29wc30gLyAke1xuICAgICAgICAgIE1hdGguY2VpbChcbiAgICAgICAgICAgIChvcHRpb25zPy5saW1pdCA/PyAxKSAvIDEwMDAsXG4gICAgICAgICAgKVxuICAgICAgICB9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kPERpc2NvcmRNZW1iZXJXaXRoVXNlcltdPihcbiAgICAgIGJvdC5yZXN0LFxuICAgICAgXCJHRVRcIixcbiAgICAgIGJvdC5jb25zdGFudHMucm91dGVzLkdVSUxEX01FTUJFUlMoZ3VpbGRJZCwge1xuICAgICAgICBsaW1pdDogbWVtYmVyc0xlZnQgPiAxMDAwID8gMTAwMCA6IG1lbWJlcnNMZWZ0LFxuICAgICAgICBhZnRlcjogb3B0aW9ucy5hZnRlcixcbiAgICAgIH0pLFxuICAgICk7XG5cbiAgICBjb25zdCBkaXNjb3JkZW5vTWVtYmVycyA9IHJlc3VsdC5tYXAoKG1lbWJlcikgPT5cbiAgICAgIGJvdC50cmFuc2Zvcm1lcnMubWVtYmVyKFxuICAgICAgICBib3QsXG4gICAgICAgIG1lbWJlcixcbiAgICAgICAgZ3VpbGRJZCxcbiAgICAgICAgYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UobWVtYmVyLnVzZXIuaWQpLFxuICAgICAgKVxuICAgICk7XG5cbiAgICBpZiAoIWRpc2NvcmRlbm9NZW1iZXJzLmxlbmd0aCkgYnJlYWs7XG5cbiAgICBkaXNjb3JkZW5vTWVtYmVycy5mb3JFYWNoKChtZW1iZXIpID0+IHtcbiAgICAgIGJvdC5ldmVudHMuZGVidWcoYFJ1bm5pbmcgZm9yRWFjaCBsb29wIGluIGdldF9tZW1iZXJzIGZpbGUuYCk7XG4gICAgICBtZW1iZXJzLnNldChtZW1iZXIuaWQsIG1lbWJlcik7XG4gICAgfSk7XG5cbiAgICBvcHRpb25zID0ge1xuICAgICAgbGltaXQ6IG9wdGlvbnM/LmxpbWl0LFxuICAgICAgYWZ0ZXI6IGRpc2NvcmRlbm9NZW1iZXJzW2Rpc2NvcmRlbm9NZW1iZXJzLmxlbmd0aCAtIDFdLmlkLnRvU3RyaW5nKCksXG4gICAgfTtcblxuICAgIG1lbWJlcnNMZWZ0IC09IDEwMDA7XG5cbiAgICBsb29wcysrO1xuICB9XG5cbiAgcmV0dXJuIG1lbWJlcnM7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IlNBQWMsVUFBVSxRQUF5RCxZQUFZLENBQUM7QUFFOUY7Ozs7R0FJRyxDQUNILE9BQU8sZUFBZSxtQkFBbUIsQ0FDdkMsR0FBUSxFQUNSLE9BQWUsRUFDZixPQUF5QixFQUN6QjtJQUNBLE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxFQUFrQixBQUFDO0lBRWpELElBQUksV0FBVyxHQUFHLE9BQU8sRUFBRSxLQUFLLElBQUksSUFBSSxBQUFDO0lBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQUFBQztJQUNkLE1BQ0UsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQ3ZDLFdBQVcsR0FBRyxDQUFDLENBQ2Y7UUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBRS9ELElBQUksT0FBTyxFQUFFLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRTtZQUMxQyxPQUFPLENBQUMsR0FBRyxDQUNULENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFDN0MsSUFBSSxDQUFDLElBQUksQ0FDUCxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUM3QixDQUNGLENBQUMsQ0FDSCxDQUFDO1NBQ0g7UUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUNyQyxHQUFHLENBQUMsSUFBSSxFQUNSLEtBQUssRUFDTCxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFO1lBQzFDLEtBQUssRUFBRSxXQUFXLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxXQUFXO1lBQzlDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztTQUNyQixDQUFDLENBQ0gsQUFBQztRQUVGLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FDMUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQ3JCLEdBQUcsRUFDSCxNQUFNLEVBQ04sT0FBTyxFQUNQLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQzNDO1FBQUEsQ0FDRixBQUFDO1FBRUYsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxNQUFNO1FBRXJDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBSztZQUNwQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBQztZQUM5RCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDaEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHO1lBQ1IsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLO1lBQ3JCLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtTQUNyRSxDQUFDO1FBRUYsV0FBVyxJQUFJLElBQUksQ0FBQztRQUVwQixLQUFLLEVBQUUsQ0FBQztLQUNUO0lBRUQsT0FBTyxPQUFPLENBQUM7Q0FDaEIifQ==