import { cloneChannel } from "./src/channels.ts";
import { sendAutocompleteChoices } from "./src/sendAutoCompleteChoices.ts";
import { sendDirectMessage } from "./src/sendDirectMessage.ts";
import { suppressEmbeds } from "./src/suppressEmbeds.ts";
import { archiveThread, editThread, lockThread, unarchiveThread, unlockThread } from "./src/threads.ts";
import { disconnectMember } from "./src/disconnectMember.ts";
import { getMembersPaginated } from "./src/getMembersPaginated.ts";
import { moveMember } from "./src/moveMember.ts";
import { fetchAndRetrieveMembers } from "./src/fetchAndRetrieveMembers.ts";
import { sendTextMessage } from "./src/sendTextMessage.ts";
export function enableHelpersPlugin(rawBot) {
    const bot = rawBot;
    bot.helpers.fetchAndRetrieveMembers = (guildId) => fetchAndRetrieveMembers(bot, guildId);
    bot.helpers.sendDirectMessage = (userId, content) => sendDirectMessage(bot, userId, content);
    bot.helpers.sendTextMessage = (channelId, content) => sendTextMessage(bot, channelId, content);
    bot.helpers.suppressEmbeds = (channelId, messageId) => suppressEmbeds(bot, channelId, messageId);
    bot.helpers.archiveThread = (threadId) => archiveThread(bot, threadId);
    bot.helpers.unarchiveThread = (threadId) => unarchiveThread(bot, threadId);
    bot.helpers.lockThread = (threadId) => lockThread(bot, threadId);
    bot.helpers.unlockThread = (threadId) => unlockThread(bot, threadId);
    bot.helpers.editThread = (threadId, options, reason) => editThread(bot, threadId, options, reason);
    bot.helpers.cloneChannel = (channel, reason) => cloneChannel(bot, channel, reason);
    bot.helpers.sendAutocompleteChoices = (interactionId, interactionToken, choices) => sendAutocompleteChoices(bot, interactionId, interactionToken, choices);
    bot.helpers.disconnectMember = (guildId, memberId) => disconnectMember(bot, guildId, memberId);
    bot.helpers.getMembersPaginated = (guildId, options) => getMembersPaginated(bot, guildId, options);
    bot.helpers.moveMember = (guildId, memberId, channelId) => moveMember(bot, guildId, memberId, channelId);
    return bot;
}
export * from "./src/channels.ts";
export * from "./src/disconnectMember.ts";
export * from "./src/fetchAndRetrieveMembers.ts";
export * from "./src/getMembersPaginated.ts";
export * from "./src/moveMember.ts";
export * from "./src/sendAutoCompleteChoices.ts";
export * from "./src/sendDirectMessage.ts";
export * from "./src/sendPrivateInteractionResponse.ts";
export * from "./src/sendTextMessage.ts";
export * from "./src/suppressEmbeds.ts";
export * from "./src/threads.ts";
export default enableHelpersPlugin;
//# sourceMappingURL=data:application/json;base64,