import { ApplicationCommandTypes } from "../../../mod.ts";
export async function createApplicationCommand(bot, options, guildId) {
    const result = await bot.rest.runMethod(bot.rest, "POST", guildId
        ? bot.constants.routes.COMMANDS_GUILD(bot.applicationId, guildId)
        : bot.constants.routes.COMMANDS(bot.applicationId), isContextApplicationCommand(options)
        ? { name: options.name, name_localizations: options.nameLocalizations, type: options.type }
        : {
            name: options.name,
            name_localizations: options.nameLocalizations,
            description: options.description,
            description_localizations: options.descriptionLocalizations,
            type: options.type,
            options: options.options ? makeOptionsForCommand(options.options) : undefined,
            default_member_permissions: options.defaultMemberPermissions
                ? bot.utils.calculateBits(options.defaultMemberPermissions)
                : undefined,
            dm_permission: options.dmPermission,
        });
    return bot.transformers.applicationCommand(bot, result);
}
export function makeOptionsForCommand(options) {
    return options.map((option) => ({
        type: option.type,
        name: option.name,
        name_localizations: option.nameLocalizations,
        description: option.description,
        description_localizations: option.descriptionLocalizations,
        required: option.required,
        choices: option.choices?.map((choice) => ({
            name: choice.name,
            name_localizations: choice.nameLocalizations,
            value: choice.value,
        })),
        options: option.options ? makeOptionsForCommand(option.options) : undefined,
        channel_types: option.channelTypes,
        autocomplete: option.autocomplete,
        min_value: option.minValue,
        max_value: option.maxValue,
    }));
}
export function isContextApplicationCommand(cmd) {
    return cmd.type === ApplicationCommandTypes.Message || cmd.type === ApplicationCommandTypes.User;
}
//# sourceMappingURL=data:application/json;base64,