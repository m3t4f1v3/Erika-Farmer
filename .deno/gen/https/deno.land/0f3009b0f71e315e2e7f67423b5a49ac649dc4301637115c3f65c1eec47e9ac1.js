import { ScheduledEventEntityType } from "../../deps.ts";
import { requireBotChannelPermissions, requireBotGuildPermissions } from "../permissions.ts";
export function createScheduledEvent(bot) {
    const createScheduledEventOld = bot.helpers.createScheduledEvent;
    bot.helpers.createScheduledEvent = async function (guildId, options) {
        if (options.entityType === ScheduledEventEntityType.StageInstance) {
            if (!options.channelId) {
                throw new Error("A channel id is required for creating a stage scheduled event.");
            }
            requireBotChannelPermissions(bot, options.channelId, [
                "MANAGE_CHANNELS",
                "MUTE_MEMBERS",
                "MOVE_MEMBERS",
            ]);
            try {
                requireBotGuildPermissions(bot, guildId, [
                    "MANAGE_EVENTS",
                ]);
            }
            catch {
                requireBotChannelPermissions(bot, options.channelId, [
                    "MANAGE_EVENTS",
                ]);
            }
            return createScheduledEventOld(guildId, options);
        }
        if (options.entityType === ScheduledEventEntityType.Voice) {
            if (!options.channelId) {
                throw new Error("A channel id is required for creating a voice scheduled event.");
            }
            requireBotChannelPermissions(bot, options.channelId, [
                "VIEW_CHANNEL",
                "CONNECT",
            ]);
            try {
                requireBotGuildPermissions(bot, guildId, [
                    "MANAGE_EVENTS",
                ]);
            }
            catch {
                requireBotChannelPermissions(bot, options.channelId, [
                    "MANAGE_EVENTS",
                ]);
            }
            return createScheduledEventOld(guildId, options);
        }
        requireBotGuildPermissions(bot, guildId, [
            "MANAGE_EVENTS",
        ]);
        return await createScheduledEventOld(guildId, options);
    };
}
export function editScheduledEvent(bot) {
    const editScheduledEventOld = bot.helpers.editScheduledEvent;
    bot.helpers.editScheduledEvent = async function (guildId, eventId, options) {
        if (options.entityType === ScheduledEventEntityType.StageInstance) {
            if (!options.channelId) {
                throw new Error("A channel id is required for creating a stage scheduled event.");
            }
            requireBotChannelPermissions(bot, options.channelId, [
                "MANAGE_CHANNELS",
                "MUTE_MEMBERS",
                "MOVE_MEMBERS",
            ]);
            try {
                requireBotGuildPermissions(bot, guildId, [
                    "MANAGE_EVENTS",
                ]);
            }
            catch {
                requireBotChannelPermissions(bot, options.channelId, [
                    "MANAGE_EVENTS",
                ]);
            }
            return editScheduledEventOld(guildId, eventId, options);
        }
        if (options.entityType === ScheduledEventEntityType.Voice) {
            if (!options.channelId) {
                throw new Error("A channel id is required for creating a voice scheduled event.");
            }
            requireBotChannelPermissions(bot, options.channelId, [
                "VIEW_CHANNEL",
                "CONNECT",
            ]);
            try {
                requireBotGuildPermissions(bot, guildId, [
                    "MANAGE_EVENTS",
                ]);
            }
            catch {
                requireBotChannelPermissions(bot, options.channelId, [
                    "MANAGE_EVENTS",
                ]);
            }
            return editScheduledEventOld(guildId, eventId, options);
        }
        requireBotGuildPermissions(bot, guildId, [
            "MANAGE_EVENTS",
        ]);
        return await editScheduledEventOld(guildId, eventId, options);
    };
}
export default function setupEventsPermChecks(bot) {
    createScheduledEvent(bot);
    editScheduledEvent(bot);
}
//# sourceMappingURL=data:application/json;base64,