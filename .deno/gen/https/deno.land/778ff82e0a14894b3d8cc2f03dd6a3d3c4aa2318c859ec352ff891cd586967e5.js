/** Modify a guild scheduled event. To start or end an event, use this endpoint to modify the event's status. */ export async function editScheduledEvent(bot, guildId, eventId, options) {
    if (options.name && !bot.utils.validateLength(options.name, {
        min: 1,
        max: 100
    })) {
        throw new Error("Name must be between 1-100 characters.");
    }
    if (options.description && !bot.utils.validateLength(options.description, {
        max: 1000
    })) {
        throw new Error("Description must be below 1000 characters.");
    }
    if (options.location && !bot.utils.validateLength(options.location, {
        max: 100
    })) {
        throw new Error("Location must be below 100 characters.");
    }
    if (options.scheduledStartTime && options.scheduledEndTime && options.scheduledStartTime > options.scheduledEndTime) {
        throw new Error("Cannot schedule event to end before starting.");
    }
    const event = await bot.rest.runMethod(bot.rest, "PATCH", bot.constants.routes.GUILD_SCHEDULED_EVENT(guildId, eventId), {
        channel_id: options.channelId === null ? null : options.channelId?.toString(),
        entity_metadata: options.location ? {
            location: options.location
        } : undefined,
        name: options.name,
        description: options.description,
        scheduled_start_time: options.scheduledStartTime ? new Date(options.scheduledStartTime).toISOString() : undefined,
        scheduled_end_time: options.scheduledEndTime ? new Date(options.scheduledEndTime).toISOString() : undefined,
        privacy_level: options.privacyLevel,
        entity_type: options.entityType,
        status: options.status,
        reason: options.reason
    });
    return bot.transformers.scheduledEvent(bot, event);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3QgfSBmcm9tIFwiLi4vLi4vLi4vYm90LnRzXCI7XG5pbXBvcnQgeyBEaXNjb3JkU2NoZWR1bGVkRXZlbnQgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZXMvZGlzY29yZC50c1wiO1xuaW1wb3J0IHsgU2NoZWR1bGVkRXZlbnRFbnRpdHlUeXBlLCBTY2hlZHVsZWRFdmVudFByaXZhY3lMZXZlbCwgU2NoZWR1bGVkRXZlbnRTdGF0dXMgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZXMvc2hhcmVkLnRzXCI7XG5cbi8qKiBNb2RpZnkgYSBndWlsZCBzY2hlZHVsZWQgZXZlbnQuIFRvIHN0YXJ0IG9yIGVuZCBhbiBldmVudCwgdXNlIHRoaXMgZW5kcG9pbnQgdG8gbW9kaWZ5IHRoZSBldmVudCdzIHN0YXR1cy4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlZGl0U2NoZWR1bGVkRXZlbnQoXG4gIGJvdDogQm90LFxuICBndWlsZElkOiBiaWdpbnQsXG4gIGV2ZW50SWQ6IGJpZ2ludCxcbiAgb3B0aW9uczogUGFydGlhbDxFZGl0U2NoZWR1bGVkRXZlbnQ+LFxuKSB7XG4gIGlmIChvcHRpb25zLm5hbWUgJiYgIWJvdC51dGlscy52YWxpZGF0ZUxlbmd0aChvcHRpb25zLm5hbWUsIHsgbWluOiAxLCBtYXg6IDEwMCB9KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5hbWUgbXVzdCBiZSBiZXR3ZWVuIDEtMTAwIGNoYXJhY3RlcnMuXCIpO1xuICB9XG4gIGlmIChvcHRpb25zLmRlc2NyaXB0aW9uICYmICFib3QudXRpbHMudmFsaWRhdGVMZW5ndGgob3B0aW9ucy5kZXNjcmlwdGlvbiwgeyBtYXg6IDEwMDAgfSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZXNjcmlwdGlvbiBtdXN0IGJlIGJlbG93IDEwMDAgY2hhcmFjdGVycy5cIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMubG9jYXRpb24gJiYgIWJvdC51dGlscy52YWxpZGF0ZUxlbmd0aChvcHRpb25zLmxvY2F0aW9uLCB7IG1heDogMTAwIH0pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTG9jYXRpb24gbXVzdCBiZSBiZWxvdyAxMDAgY2hhcmFjdGVycy5cIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuc2NoZWR1bGVkU3RhcnRUaW1lICYmIG9wdGlvbnMuc2NoZWR1bGVkRW5kVGltZSAmJiBvcHRpb25zLnNjaGVkdWxlZFN0YXJ0VGltZSA+IG9wdGlvbnMuc2NoZWR1bGVkRW5kVGltZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzY2hlZHVsZSBldmVudCB0byBlbmQgYmVmb3JlIHN0YXJ0aW5nLlwiKTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50ID0gYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kPERpc2NvcmRTY2hlZHVsZWRFdmVudD4oXG4gICAgYm90LnJlc3QsXG4gICAgXCJQQVRDSFwiLFxuICAgIGJvdC5jb25zdGFudHMucm91dGVzLkdVSUxEX1NDSEVEVUxFRF9FVkVOVChndWlsZElkLCBldmVudElkKSxcbiAgICB7XG4gICAgICBjaGFubmVsX2lkOiBvcHRpb25zLmNoYW5uZWxJZCA9PT0gbnVsbCA/IG51bGwgOiBvcHRpb25zLmNoYW5uZWxJZD8udG9TdHJpbmcoKSxcbiAgICAgIGVudGl0eV9tZXRhZGF0YTogb3B0aW9ucy5sb2NhdGlvbiA/IHsgbG9jYXRpb246IG9wdGlvbnMubG9jYXRpb24gfSA6IHVuZGVmaW5lZCxcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uLFxuICAgICAgc2NoZWR1bGVkX3N0YXJ0X3RpbWU6IG9wdGlvbnMuc2NoZWR1bGVkU3RhcnRUaW1lID8gbmV3IERhdGUob3B0aW9ucy5zY2hlZHVsZWRTdGFydFRpbWUpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICBzY2hlZHVsZWRfZW5kX3RpbWU6IG9wdGlvbnMuc2NoZWR1bGVkRW5kVGltZSA/IG5ldyBEYXRlKG9wdGlvbnMuc2NoZWR1bGVkRW5kVGltZSkudG9JU09TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgIHByaXZhY3lfbGV2ZWw6IG9wdGlvbnMucHJpdmFjeUxldmVsLFxuICAgICAgZW50aXR5X3R5cGU6IG9wdGlvbnMuZW50aXR5VHlwZSxcbiAgICAgIHN0YXR1czogb3B0aW9ucy5zdGF0dXMsXG4gICAgICByZWFzb246IG9wdGlvbnMucmVhc29uLFxuICAgIH0sXG4gICk7XG5cbiAgcmV0dXJuIGJvdC50cmFuc2Zvcm1lcnMuc2NoZWR1bGVkRXZlbnQoYm90LCBldmVudCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWRpdFNjaGVkdWxlZEV2ZW50IHtcbiAgLyoqIHRoZSBjaGFubmVsIGlkIG9mIHRoZSBzY2hlZHVsZWQgZXZlbnQuIG51bGwgaWYgc3dpdGNoaW5nIHRvIGV4dGVybmFsIGV2ZW50LiAqL1xuICBjaGFubmVsSWQ6IGJpZ2ludCB8IG51bGw7XG4gIC8qKiBsb2NhdGlvbiBvZiB0aGUgZXZlbnQgKi9cbiAgbG9jYXRpb24/OiBzdHJpbmc7XG4gIC8qKiB0aGUgbmFtZSBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50ICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50ICovXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAvKiogdGhlIHRpbWUgdGhlIHNjaGVkdWxlZCBldmVudCB3aWxsIHN0YXJ0ICovXG4gIHNjaGVkdWxlZFN0YXJ0VGltZTogbnVtYmVyO1xuICAvKiogdGhlIHRpbWUgdGhlIHNjaGVkdWxlZCBldmVudCB3aWxsIGVuZCBpZiBpdCBkb2VzIGVuZC4gKi9cbiAgc2NoZWR1bGVkRW5kVGltZT86IG51bWJlcjtcbiAgLyoqIHRoZSBwcml2YWN5IGxldmVsIG9mIHRoZSBzY2hlZHVsZWQgZXZlbnQgKi9cbiAgcHJpdmFjeUxldmVsOiBTY2hlZHVsZWRFdmVudFByaXZhY3lMZXZlbDtcbiAgLyoqIHRoZSB0eXBlIG9mIGhvc3RpbmcgZW50aXR5IGFzc29jaWF0ZWQgd2l0aCBhIHNjaGVkdWxlZCBldmVudCAqL1xuICBlbnRpdHlUeXBlOiBTY2hlZHVsZWRFdmVudEVudGl0eVR5cGU7XG4gIC8qKiB0aGUgc3RhdHVzIG9mIHRoZSBzY2hlZHVsZWQgZXZlbnQgKi9cbiAgc3RhdHVzOiBTY2hlZHVsZWRFdmVudFN0YXR1cztcbiAgcmVhc29uPzogc3RyaW5nO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLGdIQUFnSCxDQUNoSCxPQUFPLGVBQWUsa0JBQWtCLENBQ3RDLEdBQVEsRUFDUixPQUFlLEVBQ2YsT0FBZSxFQUNmLE9BQW9DLEVBQ3BDO0lBQ0EsSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtRQUFFLEdBQUcsRUFBRSxDQUFDO1FBQUUsR0FBRyxFQUFFLEdBQUc7S0FBRSxDQUFDLEVBQUU7UUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQzNEO0lBQ0QsSUFBSSxPQUFPLENBQUMsV0FBVyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtRQUFFLEdBQUcsRUFBRSxJQUFJO0tBQUUsQ0FBQyxFQUFFO1FBQ3hGLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztLQUMvRDtJQUNELElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFBRSxHQUFHLEVBQUUsR0FBRztLQUFFLENBQUMsRUFBRTtRQUNqRixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7S0FDM0Q7SUFDRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLElBQUksT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtRQUNuSCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7S0FDbEU7SUFFRCxNQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUNwQyxHQUFHLENBQUMsSUFBSSxFQUNSLE9BQU8sRUFDUCxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQzVEO1FBQ0UsVUFBVSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtRQUM3RSxlQUFlLEVBQUUsT0FBTyxDQUFDLFFBQVEsR0FBRztZQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtTQUFFLEdBQUcsU0FBUztRQUM5RSxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1FBQ2hDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTO1FBQ2pILGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTO1FBQzNHLGFBQWEsRUFBRSxPQUFPLENBQUMsWUFBWTtRQUNuQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFVBQVU7UUFDL0IsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtLQUN2QixDQUNGLEFBQUM7SUFFRixPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNwRCJ9