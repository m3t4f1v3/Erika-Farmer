export async function editScheduledEvent(bot, guildId, eventId, options) {
    if (options.name && !bot.utils.validateLength(options.name, { min: 1, max: 100 })) {
        throw new Error("Name must be between 1-100 characters.");
    }
    if (options.description && !bot.utils.validateLength(options.description, { max: 1000 })) {
        throw new Error("Description must be below 1000 characters.");
    }
    if (options.location && !bot.utils.validateLength(options.location, { max: 100 })) {
        throw new Error("Location must be below 100 characters.");
    }
    if (options.scheduledStartTime && options.scheduledEndTime && options.scheduledStartTime > options.scheduledEndTime) {
        throw new Error("Cannot schedule event to end before starting.");
    }
    const event = await bot.rest.runMethod(bot.rest, "PATCH", bot.constants.routes.GUILD_SCHEDULED_EVENT(guildId, eventId), {
        channel_id: options.channelId === null ? null : options.channelId?.toString(),
        entity_metadata: options.location ? { location: options.location } : undefined,
        name: options.name,
        description: options.description,
        scheduled_start_time: options.scheduledStartTime ? new Date(options.scheduledStartTime).toISOString() : undefined,
        scheduled_end_time: options.scheduledEndTime ? new Date(options.scheduledEndTime).toISOString() : undefined,
        privacy_level: options.privacyLevel,
        entity_type: options.entityType,
        status: options.status,
        reason: options.reason,
    });
    return bot.transformers.scheduledEvent(bot, event);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdFNjaGVkdWxlZEV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWRpdFNjaGVkdWxlZEV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsa0JBQWtCLENBQ3RDLEdBQVEsRUFDUixPQUFlLEVBQ2YsT0FBZSxFQUNmLE9BQW9DO0lBRXBDLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQ2pGLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUMzRDtJQUNELElBQUksT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN4RixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7S0FDL0Q7SUFDRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7UUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQzNEO0lBQ0QsSUFBSSxPQUFPLENBQUMsa0JBQWtCLElBQUksT0FBTyxDQUFDLGdCQUFnQixJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEVBQUU7UUFDbkgsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FDcEMsR0FBRyxDQUFDLElBQUksRUFDUixPQUFPLEVBQ1AsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUM1RDtRQUNFLFVBQVUsRUFBRSxPQUFPLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtRQUM3RSxlQUFlLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQzlFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7UUFDaEMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUNqSCxrQkFBa0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQzNHLGFBQWEsRUFBRSxPQUFPLENBQUMsWUFBWTtRQUNuQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFVBQVU7UUFDL0IsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtLQUN2QixDQUNGLENBQUM7SUFFRixPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNyRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm90IH0gZnJvbSBcIi4uLy4uLy4uL2JvdC50c1wiO1xuaW1wb3J0IHsgRGlzY29yZFNjaGVkdWxlZEV2ZW50IH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IFNjaGVkdWxlZEV2ZW50RW50aXR5VHlwZSwgU2NoZWR1bGVkRXZlbnRQcml2YWN5TGV2ZWwsIFNjaGVkdWxlZEV2ZW50U3RhdHVzIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL3NoYXJlZC50c1wiO1xuXG4vKiogTW9kaWZ5IGEgZ3VpbGQgc2NoZWR1bGVkIGV2ZW50LiBUbyBzdGFydCBvciBlbmQgYW4gZXZlbnQsIHVzZSB0aGlzIGVuZHBvaW50IHRvIG1vZGlmeSB0aGUgZXZlbnQncyBzdGF0dXMuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZWRpdFNjaGVkdWxlZEV2ZW50KFxuICBib3Q6IEJvdCxcbiAgZ3VpbGRJZDogYmlnaW50LFxuICBldmVudElkOiBiaWdpbnQsXG4gIG9wdGlvbnM6IFBhcnRpYWw8RWRpdFNjaGVkdWxlZEV2ZW50Pixcbikge1xuICBpZiAob3B0aW9ucy5uYW1lICYmICFib3QudXRpbHMudmFsaWRhdGVMZW5ndGgob3B0aW9ucy5uYW1lLCB7IG1pbjogMSwgbWF4OiAxMDAgfSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOYW1lIG11c3QgYmUgYmV0d2VlbiAxLTEwMCBjaGFyYWN0ZXJzLlwiKTtcbiAgfVxuICBpZiAob3B0aW9ucy5kZXNjcmlwdGlvbiAmJiAhYm90LnV0aWxzLnZhbGlkYXRlTGVuZ3RoKG9wdGlvbnMuZGVzY3JpcHRpb24sIHsgbWF4OiAxMDAwIH0pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRGVzY3JpcHRpb24gbXVzdCBiZSBiZWxvdyAxMDAwIGNoYXJhY3RlcnMuXCIpO1xuICB9XG4gIGlmIChvcHRpb25zLmxvY2F0aW9uICYmICFib3QudXRpbHMudmFsaWRhdGVMZW5ndGgob3B0aW9ucy5sb2NhdGlvbiwgeyBtYXg6IDEwMCB9KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkxvY2F0aW9uIG11c3QgYmUgYmVsb3cgMTAwIGNoYXJhY3RlcnMuXCIpO1xuICB9XG4gIGlmIChvcHRpb25zLnNjaGVkdWxlZFN0YXJ0VGltZSAmJiBvcHRpb25zLnNjaGVkdWxlZEVuZFRpbWUgJiYgb3B0aW9ucy5zY2hlZHVsZWRTdGFydFRpbWUgPiBvcHRpb25zLnNjaGVkdWxlZEVuZFRpbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2NoZWR1bGUgZXZlbnQgdG8gZW5kIGJlZm9yZSBzdGFydGluZy5cIik7XG4gIH1cblxuICBjb25zdCBldmVudCA9IGF3YWl0IGJvdC5yZXN0LnJ1bk1ldGhvZDxEaXNjb3JkU2NoZWR1bGVkRXZlbnQ+KFxuICAgIGJvdC5yZXN0LFxuICAgIFwiUEFUQ0hcIixcbiAgICBib3QuY29uc3RhbnRzLnJvdXRlcy5HVUlMRF9TQ0hFRFVMRURfRVZFTlQoZ3VpbGRJZCwgZXZlbnRJZCksXG4gICAge1xuICAgICAgY2hhbm5lbF9pZDogb3B0aW9ucy5jaGFubmVsSWQgPT09IG51bGwgPyBudWxsIDogb3B0aW9ucy5jaGFubmVsSWQ/LnRvU3RyaW5nKCksXG4gICAgICBlbnRpdHlfbWV0YWRhdGE6IG9wdGlvbnMubG9jYXRpb24gPyB7IGxvY2F0aW9uOiBvcHRpb25zLmxvY2F0aW9uIH0gOiB1bmRlZmluZWQsXG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogb3B0aW9ucy5kZXNjcmlwdGlvbixcbiAgICAgIHNjaGVkdWxlZF9zdGFydF90aW1lOiBvcHRpb25zLnNjaGVkdWxlZFN0YXJ0VGltZSA/IG5ldyBEYXRlKG9wdGlvbnMuc2NoZWR1bGVkU3RhcnRUaW1lKS50b0lTT1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgc2NoZWR1bGVkX2VuZF90aW1lOiBvcHRpb25zLnNjaGVkdWxlZEVuZFRpbWUgPyBuZXcgRGF0ZShvcHRpb25zLnNjaGVkdWxlZEVuZFRpbWUpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICBwcml2YWN5X2xldmVsOiBvcHRpb25zLnByaXZhY3lMZXZlbCxcbiAgICAgIGVudGl0eV90eXBlOiBvcHRpb25zLmVudGl0eVR5cGUsXG4gICAgICBzdGF0dXM6IG9wdGlvbnMuc3RhdHVzLFxuICAgICAgcmVhc29uOiBvcHRpb25zLnJlYXNvbixcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLnNjaGVkdWxlZEV2ZW50KGJvdCwgZXZlbnQpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVkaXRTY2hlZHVsZWRFdmVudCB7XG4gIC8qKiB0aGUgY2hhbm5lbCBpZCBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50LiBudWxsIGlmIHN3aXRjaGluZyB0byBleHRlcm5hbCBldmVudC4gKi9cbiAgY2hhbm5lbElkOiBiaWdpbnQgfCBudWxsO1xuICAvKiogbG9jYXRpb24gb2YgdGhlIGV2ZW50ICovXG4gIGxvY2F0aW9uPzogc3RyaW5nO1xuICAvKiogdGhlIG5hbWUgb2YgdGhlIHNjaGVkdWxlZCBldmVudCAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHNjaGVkdWxlZCBldmVudCAqL1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgLyoqIHRoZSB0aW1lIHRoZSBzY2hlZHVsZWQgZXZlbnQgd2lsbCBzdGFydCAqL1xuICBzY2hlZHVsZWRTdGFydFRpbWU6IG51bWJlcjtcbiAgLyoqIHRoZSB0aW1lIHRoZSBzY2hlZHVsZWQgZXZlbnQgd2lsbCBlbmQgaWYgaXQgZG9lcyBlbmQuICovXG4gIHNjaGVkdWxlZEVuZFRpbWU/OiBudW1iZXI7XG4gIC8qKiB0aGUgcHJpdmFjeSBsZXZlbCBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50ICovXG4gIHByaXZhY3lMZXZlbDogU2NoZWR1bGVkRXZlbnRQcml2YWN5TGV2ZWw7XG4gIC8qKiB0aGUgdHlwZSBvZiBob3N0aW5nIGVudGl0eSBhc3NvY2lhdGVkIHdpdGggYSBzY2hlZHVsZWQgZXZlbnQgKi9cbiAgZW50aXR5VHlwZTogU2NoZWR1bGVkRXZlbnRFbnRpdHlUeXBlO1xuICAvKiogdGhlIHN0YXR1cyBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50ICovXG4gIHN0YXR1czogU2NoZWR1bGVkRXZlbnRTdGF0dXM7XG4gIHJlYXNvbj86IHN0cmluZztcbn1cbiJdfQ==