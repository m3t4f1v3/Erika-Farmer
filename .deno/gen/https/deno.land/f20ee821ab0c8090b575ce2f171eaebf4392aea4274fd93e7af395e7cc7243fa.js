import { ScheduledEventEntityType, ScheduledEventPrivacyLevel } from "../../../types/shared.ts";
export async function createScheduledEvent(bot, guildId, options) {
    if (!bot.utils.validateLength(options.name, { min: 1, max: 100 })) {
        throw new Error("Name must be between 1-100 characters.");
    }
    if (options.description && !bot.utils.validateLength(options.description, { max: 1000 })) {
        throw new Error("Description must be below 1000 characters.");
    }
    if (options.location) {
        if (!bot.utils.validateLength(options.location, { max: 100 })) {
            throw new Error("Location must be below 100 characters.");
        }
        if (options.entityType === ScheduledEventEntityType.Voice) {
            throw new Error("Location can not be provided for a Voice event.");
        }
    }
    if (options.entityType === ScheduledEventEntityType.External) {
        if (!options.scheduledEndTime)
            throw new Error("A scheduled end time is required when making an External event.");
        if (!options.location)
            throw new Error("A location is required when making an External event.");
    }
    if (options.scheduledStartTime && options.scheduledEndTime && options.scheduledStartTime > options.scheduledEndTime) {
        throw new Error("Cannot schedule event to end before starting.");
    }
    const event = await bot.rest.runMethod(bot.rest, "POST", bot.constants.routes.GUILD_SCHEDULED_EVENTS(guildId), {
        channel_id: options.channelId?.toString(),
        entity_metadata: options.location ? { location: options.location } : undefined,
        name: options.name,
        description: options.description,
        scheduled_start_time: new Date(options.scheduledStartTime).toISOString(),
        scheduled_end_time: options.scheduledEndTime ? new Date(options.scheduledEndTime).toISOString() : undefined,
        privacy_level: options.privacyLevel || ScheduledEventPrivacyLevel.GuildOnly,
        entity_type: options.entityType,
        reason: options.reason,
    });
    return bot.transformers.scheduledEvent(bot, event);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlU2NoZWR1bGVkRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVhdGVTY2hlZHVsZWRFdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUdoRyxNQUFNLENBQUMsS0FBSyxVQUFVLG9CQUFvQixDQUFDLEdBQVEsRUFBRSxPQUFlLEVBQUUsT0FBNkI7SUFDakcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQ2pFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUMzRDtJQUNELElBQUksT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN4RixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7S0FDL0Q7SUFDRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtZQUM3RCxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssd0JBQXdCLENBQUMsS0FBSyxFQUFFO1lBQ3pELE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztTQUNwRTtLQUNGO0lBQ0QsSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLHdCQUF3QixDQUFDLFFBQVEsRUFBRTtRQUM1RCxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUVBQWlFLENBQUMsQ0FBQztRQUNsSCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVE7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7S0FDakc7SUFDRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLElBQUksT0FBTyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtRQUNuSCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7S0FDbEU7SUFFRCxNQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUNwQyxHQUFHLENBQUMsSUFBSSxFQUNSLE1BQU0sRUFDTixHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsRUFDcEQ7UUFDRSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUU7UUFDekMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUM5RSxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1FBQ2hDLG9CQUFvQixFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFdBQVcsRUFBRTtRQUN4RSxrQkFBa0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQzNHLGFBQWEsRUFBRSxPQUFPLENBQUMsWUFBWSxJQUFJLDBCQUEwQixDQUFDLFNBQVM7UUFDM0UsV0FBVyxFQUFFLE9BQU8sQ0FBQyxVQUFVO1FBQy9CLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtLQUN2QixDQUNGLENBQUM7SUFFRixPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNyRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm90IH0gZnJvbSBcIi4uLy4uLy4uL2JvdC50c1wiO1xuaW1wb3J0IHsgRGlzY29yZFNjaGVkdWxlZEV2ZW50IH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IFNjaGVkdWxlZEV2ZW50RW50aXR5VHlwZSwgU2NoZWR1bGVkRXZlbnRQcml2YWN5TGV2ZWwgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZXMvc2hhcmVkLnRzXCI7XG5cbi8qKiBDcmVhdGUgYSBndWlsZCBzY2hlZHVsZWQgZXZlbnQgaW4gdGhlIGd1aWxkLiBBIGd1aWxkIGNhbiBoYXZlIGEgbWF4aW11bSBvZiAxMDAgZXZlbnRzIHdpdGggYFNDSEVEVUxFRGAgb3IgYEFDVElWRWAgc3RhdHVzIGF0IGFueSB0aW1lLiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVNjaGVkdWxlZEV2ZW50KGJvdDogQm90LCBndWlsZElkOiBiaWdpbnQsIG9wdGlvbnM6IENyZWF0ZVNjaGVkdWxlZEV2ZW50KSB7XG4gIGlmICghYm90LnV0aWxzLnZhbGlkYXRlTGVuZ3RoKG9wdGlvbnMubmFtZSwgeyBtaW46IDEsIG1heDogMTAwIH0pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmFtZSBtdXN0IGJlIGJldHdlZW4gMS0xMDAgY2hhcmFjdGVycy5cIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuZGVzY3JpcHRpb24gJiYgIWJvdC51dGlscy52YWxpZGF0ZUxlbmd0aChvcHRpb25zLmRlc2NyaXB0aW9uLCB7IG1heDogMTAwMCB9KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkRlc2NyaXB0aW9uIG11c3QgYmUgYmVsb3cgMTAwMCBjaGFyYWN0ZXJzLlwiKTtcbiAgfVxuICBpZiAob3B0aW9ucy5sb2NhdGlvbikge1xuICAgIGlmICghYm90LnV0aWxzLnZhbGlkYXRlTGVuZ3RoKG9wdGlvbnMubG9jYXRpb24sIHsgbWF4OiAxMDAgfSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvY2F0aW9uIG11c3QgYmUgYmVsb3cgMTAwIGNoYXJhY3RlcnMuXCIpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5lbnRpdHlUeXBlID09PSBTY2hlZHVsZWRFdmVudEVudGl0eVR5cGUuVm9pY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvY2F0aW9uIGNhbiBub3QgYmUgcHJvdmlkZWQgZm9yIGEgVm9pY2UgZXZlbnQuXCIpO1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5lbnRpdHlUeXBlID09PSBTY2hlZHVsZWRFdmVudEVudGl0eVR5cGUuRXh0ZXJuYWwpIHtcbiAgICBpZiAoIW9wdGlvbnMuc2NoZWR1bGVkRW5kVGltZSkgdGhyb3cgbmV3IEVycm9yKFwiQSBzY2hlZHVsZWQgZW5kIHRpbWUgaXMgcmVxdWlyZWQgd2hlbiBtYWtpbmcgYW4gRXh0ZXJuYWwgZXZlbnQuXCIpO1xuICAgIGlmICghb3B0aW9ucy5sb2NhdGlvbikgdGhyb3cgbmV3IEVycm9yKFwiQSBsb2NhdGlvbiBpcyByZXF1aXJlZCB3aGVuIG1ha2luZyBhbiBFeHRlcm5hbCBldmVudC5cIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuc2NoZWR1bGVkU3RhcnRUaW1lICYmIG9wdGlvbnMuc2NoZWR1bGVkRW5kVGltZSAmJiBvcHRpb25zLnNjaGVkdWxlZFN0YXJ0VGltZSA+IG9wdGlvbnMuc2NoZWR1bGVkRW5kVGltZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzY2hlZHVsZSBldmVudCB0byBlbmQgYmVmb3JlIHN0YXJ0aW5nLlwiKTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50ID0gYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kPERpc2NvcmRTY2hlZHVsZWRFdmVudD4oXG4gICAgYm90LnJlc3QsXG4gICAgXCJQT1NUXCIsXG4gICAgYm90LmNvbnN0YW50cy5yb3V0ZXMuR1VJTERfU0NIRURVTEVEX0VWRU5UUyhndWlsZElkKSxcbiAgICB7XG4gICAgICBjaGFubmVsX2lkOiBvcHRpb25zLmNoYW5uZWxJZD8udG9TdHJpbmcoKSxcbiAgICAgIGVudGl0eV9tZXRhZGF0YTogb3B0aW9ucy5sb2NhdGlvbiA/IHsgbG9jYXRpb246IG9wdGlvbnMubG9jYXRpb24gfSA6IHVuZGVmaW5lZCxcbiAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uLFxuICAgICAgc2NoZWR1bGVkX3N0YXJ0X3RpbWU6IG5ldyBEYXRlKG9wdGlvbnMuc2NoZWR1bGVkU3RhcnRUaW1lKS50b0lTT1N0cmluZygpLFxuICAgICAgc2NoZWR1bGVkX2VuZF90aW1lOiBvcHRpb25zLnNjaGVkdWxlZEVuZFRpbWUgPyBuZXcgRGF0ZShvcHRpb25zLnNjaGVkdWxlZEVuZFRpbWUpLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICBwcml2YWN5X2xldmVsOiBvcHRpb25zLnByaXZhY3lMZXZlbCB8fCBTY2hlZHVsZWRFdmVudFByaXZhY3lMZXZlbC5HdWlsZE9ubHksXG4gICAgICBlbnRpdHlfdHlwZTogb3B0aW9ucy5lbnRpdHlUeXBlLFxuICAgICAgcmVhc29uOiBvcHRpb25zLnJlYXNvbixcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLnNjaGVkdWxlZEV2ZW50KGJvdCwgZXZlbnQpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVNjaGVkdWxlZEV2ZW50IHtcbiAgLyoqIHRoZSBjaGFubmVsIGlkIG9mIHRoZSBzY2hlZHVsZWQgZXZlbnQuICovXG4gIGNoYW5uZWxJZD86IGJpZ2ludDtcbiAgLyoqIGxvY2F0aW9uIG9mIHRoZSBldmVudC4gUmVxdWlyZWQgZm9yIGV2ZW50cyB3aXRoIGBlbnRpdHlUeXBlOiBTY2hlZHVsZWRFdmVudEVudGl0eVR5cGUuRXh0ZXJuYWxgICovXG4gIGxvY2F0aW9uPzogc3RyaW5nO1xuICAvKiogdGhlIG5hbWUgb2YgdGhlIHNjaGVkdWxlZCBldmVudCAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHNjaGVkdWxlZCBldmVudCAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAvKiogdGhlIHRpbWUgdGhlIHNjaGVkdWxlZCBldmVudCB3aWxsIHN0YXJ0ICovXG4gIHNjaGVkdWxlZFN0YXJ0VGltZTogbnVtYmVyO1xuICAvKiogdGhlIHRpbWUgdGhlIHNjaGVkdWxlZCBldmVudCB3aWxsIGVuZCBpZiBpdCBkb2VzIGVuZC4gUmVxdWlyZWQgZm9yIGV2ZW50cyB3aXRoIGBlbnRpdHlUeXBlOiBTY2hlZHVsZWRFdmVudEVudGl0eVR5cGUuRXh0ZXJuYWxgICovXG4gIHNjaGVkdWxlZEVuZFRpbWU/OiBudW1iZXI7XG4gIC8qKiB0aGUgcHJpdmFjeSBsZXZlbCBvZiB0aGUgc2NoZWR1bGVkIGV2ZW50ICovXG4gIHByaXZhY3lMZXZlbD86IFNjaGVkdWxlZEV2ZW50UHJpdmFjeUxldmVsO1xuICAvKiogdGhlIHR5cGUgb2YgaG9zdGluZyBlbnRpdHkgYXNzb2NpYXRlZCB3aXRoIGEgc2NoZWR1bGVkIGV2ZW50ICovXG4gIGVudGl0eVR5cGU6IFNjaGVkdWxlZEV2ZW50RW50aXR5VHlwZTtcbiAgcmVhc29uPzogc3RyaW5nO1xufVxuIl19