export async function getAuditLogs(bot, guildId, options) {
    if (options?.limit)
        options.limit = options.limit >= 1 && options.limit <= 100 ? options.limit : 50;
    const auditlog = await bot.rest.runMethod(bot.rest, "GET", bot.constants.routes.GUILD_AUDIT_LOGS(guildId, options));
    return {
        users: auditlog.users.map((user) => bot.transformers.user(bot, user)),
        webhook: auditlog.webhooks.map((hook) => bot.transformers.webhook(bot, hook)),
        auditLogEntries: auditlog.audit_log_entries.map((entry) => bot.transformers.auditLogEntry(bot, entry)),
        integrations: auditlog.integrations.map((integration) => ({
            id: integration.id ? bot.transformers.snowflake(integration.id) : undefined,
            name: integration.name,
            type: integration.type,
            enabled: integration.enabled,
            syncing: integration.syncing,
            roleId: integration.role_id ? bot.transformers.snowflake(integration.role_id) : undefined,
            enableEmoticons: integration.enable_emoticons,
            expireBehavior: integration.expire_behavior,
            expireGracePeriod: integration.expire_grace_period,
            user: integration.user ? bot.transformers.user(bot, integration.user) : undefined,
            account: {
                id: integration.account?.id ? bot.transformers.snowflake(integration.account.id) : undefined,
                name: integration.account?.name,
            },
            syncedAt: integration.synced_at ? Date.parse(integration.synced_at) : undefined,
            subscriberCount: integration.subscriber_count,
            revoked: integration.revoked,
            application: integration.application
                ? {
                    id: bot.transformers.snowflake(integration.application.id),
                    name: integration.application.name,
                    icon: integration.application.icon ? bot.utils.iconHashToBigInt(integration.application.icon) : undefined,
                    description: integration.application.description,
                    bot: integration.application.bot ? bot.transformers.user(bot, integration.application.bot) : undefined,
                }
                : undefined,
        })),
        threads: auditlog.threads.map((thread) => bot.transformers.channel(bot, { channel: thread, guildId })),
        scheduledEvents: auditlog.guild_scheduled_events?.map((event) => bot.transformers.scheduledEvent(bot, event)),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QXVkaXRMb2dzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0QXVkaXRMb2dzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsWUFBWSxDQUFDLEdBQVEsRUFBRSxPQUFlLEVBQUUsT0FBMEI7SUFDdEYsSUFBSSxPQUFPLEVBQUUsS0FBSztRQUFFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUVwRyxNQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUN2QyxHQUFHLENBQUMsSUFBSSxFQUNSLEtBQUssRUFDTCxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQ3hELENBQUM7SUFFRixPQUFPO1FBQ0wsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0UsZUFBZSxFQUFFLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RyxZQUFZLEVBQUUsUUFBUSxD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QUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDOUcsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJvdCB9IGZyb20gXCIuLi8uLi9ib3QudHNcIjtcbmltcG9ydCB7IERpc2NvcmRBdWRpdExvZyB9IGZyb20gXCIuLi8uLi90eXBlcy9kaXNjb3JkLnRzXCI7XG5pbXBvcnQgeyBBdWRpdExvZ0V2ZW50cyB9IGZyb20gXCIuLi8uLi90eXBlcy9zaGFyZWQudHNcIjtcblxuLyoqIFJldHVybnMgdGhlIGF1ZGl0IGxvZ3MgZm9yIHRoZSBndWlsZC4gUmVxdWlyZXMgVklFVyBBVURJVCBMT0dTIHBlcm1pc3Npb24gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBdWRpdExvZ3MoYm90OiBCb3QsIGd1aWxkSWQ6IGJpZ2ludCwgb3B0aW9ucz86IEdldEd1aWxkQXVkaXRMb2cpIHtcbiAgaWYgKG9wdGlvbnM/LmxpbWl0KSBvcHRpb25zLmxpbWl0ID0gb3B0aW9ucy5saW1pdCA+PSAxICYmIG9wdGlvbnMubGltaXQgPD0gMTAwID8gb3B0aW9ucy5saW1pdCA6IDUwO1xuXG4gIGNvbnN0IGF1ZGl0bG9nID0gYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kPERpc2NvcmRBdWRpdExvZz4oXG4gICAgYm90LnJlc3QsXG4gICAgXCJHRVRcIixcbiAgICBib3QuY29uc3RhbnRzLnJvdXRlcy5HVUlMRF9BVURJVF9MT0dTKGd1aWxkSWQsIG9wdGlvbnMpLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgdXNlcnM6IGF1ZGl0bG9nLnVzZXJzLm1hcCgodXNlcikgPT4gYm90LnRyYW5zZm9ybWVycy51c2VyKGJvdCwgdXNlcikpLFxuICAgIHdlYmhvb2s6IGF1ZGl0bG9nLndlYmhvb2tzLm1hcCgoaG9vaykgPT4gYm90LnRyYW5zZm9ybWVycy53ZWJob29rKGJvdCwgaG9vaykpLFxuICAgIGF1ZGl0TG9nRW50cmllczogYXVkaXRsb2cuYXVkaXRfbG9nX2VudHJpZXMubWFwKChlbnRyeSkgPT4gYm90LnRyYW5zZm9ybWVycy5hdWRpdExvZ0VudHJ5KGJvdCwgZW50cnkpKSxcbiAgICBpbnRlZ3JhdGlvbnM6IGF1ZGl0bG9nLmludGVncmF0aW9ucy5tYXAoKGludGVncmF0aW9uKSA9PiAoe1xuICAgICAgaWQ6IGludGVncmF0aW9uLmlkID8gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UoaW50ZWdyYXRpb24uaWQpIDogdW5kZWZpbmVkLFxuICAgICAgbmFtZTogaW50ZWdyYXRpb24ubmFtZSxcbiAgICAgIHR5cGU6IGludGVncmF0aW9uLnR5cGUsXG4gICAgICBlbmFibGVkOiBpbnRlZ3JhdGlvbi5lbmFibGVkLFxuICAgICAgc3luY2luZzogaW50ZWdyYXRpb24uc3luY2luZyxcbiAgICAgIHJvbGVJZDogaW50ZWdyYXRpb24ucm9sZV9pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKGludGVncmF0aW9uLnJvbGVfaWQpIDogdW5kZWZpbmVkLFxuICAgICAgZW5hYmxlRW1vdGljb25zOiBpbnRlZ3JhdGlvbi5lbmFibGVfZW1vdGljb25zLFxuICAgICAgZXhwaXJlQmVoYXZpb3I6IGludGVncmF0aW9uLmV4cGlyZV9iZWhhdmlvcixcbiAgICAgIGV4cGlyZUdyYWNlUGVyaW9kOiBpbnRlZ3JhdGlvbi5leHBpcmVfZ3JhY2VfcGVyaW9kLFxuICAgICAgdXNlcjogaW50ZWdyYXRpb24udXNlciA/IGJvdC50cmFuc2Zvcm1lcnMudXNlcihib3QsIGludGVncmF0aW9uLnVzZXIpIDogdW5kZWZpbmVkLFxuICAgICAgYWNjb3VudDoge1xuICAgICAgICBpZDogaW50ZWdyYXRpb24uYWNjb3VudD8uaWQgPyBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShpbnRlZ3JhdGlvbi5hY2NvdW50LmlkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmFtZTogaW50ZWdyYXRpb24uYWNjb3VudD8ubmFtZSxcbiAgICAgIH0sXG4gICAgICBzeW5jZWRBdDogaW50ZWdyYXRpb24uc3luY2VkX2F0ID8gRGF0ZS5wYXJzZShpbnRlZ3JhdGlvbi5zeW5jZWRfYXQpIDogdW5kZWZpbmVkLFxuICAgICAgc3Vic2NyaWJlckNvdW50OiBpbnRlZ3JhdGlvbi5zdWJzY3JpYmVyX2NvdW50LFxuICAgICAgcmV2b2tlZDogaW50ZWdyYXRpb24ucmV2b2tlZCxcbiAgICAgIGFwcGxpY2F0aW9uOiBpbnRlZ3JhdGlvbi5hcHBsaWNhdGlvblxuICAgICAgICA/IHtcbiAgICAgICAgICBpZDogYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UoaW50ZWdyYXRpb24uYXBwbGljYXRpb24uaWQpLFxuICAgICAgICAgIG5hbWU6IGludGVncmF0aW9uLmFwcGxpY2F0aW9uLm5hbWUsXG4gICAgICAgICAgaWNvbjogaW50ZWdyYXRpb24uYXBwbGljYXRpb24uaWNvbiA/IGJvdC51dGlscy5pY29uSGFzaFRvQmlnSW50KGludGVncmF0aW9uLmFwcGxpY2F0aW9uLmljb24pIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbnRlZ3JhdGlvbi5hcHBsaWNhdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgICBib3Q6IGludGVncmF0aW9uLmFwcGxpY2F0aW9uLmJvdCA/IGJvdC50cmFuc2Zvcm1lcnMudXNlcihib3QsIGludGVncmF0aW9uLmFwcGxpY2F0aW9uLmJvdCkgOiB1bmRlZmluZWQsXG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfSkpLFxuICAgIHRocmVhZHM6IGF1ZGl0bG9nLnRocmVhZHMubWFwKCh0aHJlYWQpID0+IGJvdC50cmFuc2Zvcm1lcnMuY2hhbm5lbChib3QsIHsgY2hhbm5lbDogdGhyZWFkLCBndWlsZElkIH0pKSxcbiAgICBzY2hlZHVsZWRFdmVudHM6IGF1ZGl0bG9nLmd1aWxkX3NjaGVkdWxlZF9ldmVudHM/Lm1hcCgoZXZlbnQpID0+IGJvdC50cmFuc2Zvcm1lcnMuc2NoZWR1bGVkRXZlbnQoYm90LCBldmVudCkpLFxuICB9O1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2F1ZGl0LWxvZyNnZXQtZ3VpbGQtYXVkaXQtbG9nLXF1ZXJ5LXN0cmluZy1wYXJhbWV0ZXJzICovXG5leHBvcnQgaW50ZXJmYWNlIEdldEd1aWxkQXVkaXRMb2cge1xuICAvKiogRW50cmllcyBmcm9tIGEgc3BlY2lmaWMgdXNlciBJRCAqL1xuICB1c2VySWQ/OiBiaWdpbnQgfCBzdHJpbmc7XG4gIC8qKiBFbnRyaWVzIGZvciBhIHNwZWNpZmljIGF1ZGl0IGxvZyBldmVudCAqL1xuICBhY3Rpb25UeXBlPzogQXVkaXRMb2dFdmVudHM7XG4gIC8qKiBFbnRyaWVzIHRoYXQgcHJlY2VkZWQgYSBzcGVjaWZpYyBhdWRpdCBsb2cgZW50cnkgSUQgKi9cbiAgYmVmb3JlPzogYmlnaW50IHwgc3RyaW5nO1xuICAvKiogTWF4aW11bSBudW1iZXIgb2YgZW50cmllcyAoYmV0d2VlbiAxLTEwMCkgdG8gcmV0dXJuLCBkZWZhdWx0cyB0byA1MCAqL1xuICBsaW1pdD86IG51bWJlcjtcbn1cbiJdfQ==