/** Processes the rate limit headers and determines if it needs to be rate limited and returns the bucket id if available */ export function processRequestHeaders(rest, url, headers) {
    let rateLimited = false;
    // GET ALL NECESSARY HEADERS
    const remaining = headers.get("x-ratelimit-remaining");
    const retryAfter = headers.get("x-ratelimit-reset-after");
    const reset = Date.now() + Number(retryAfter) * 1000;
    const global = headers.get("x-ratelimit-global");
    // undefined override null needed for typings
    const bucketId = headers.get("x-ratelimit-bucket") || undefined;
    // IF THERE IS NO REMAINING RATE LIMIT, MARK IT AS RATE LIMITED
    if (remaining === "0") {
        rateLimited = true;
        // SAVE THE URL AS LIMITED, IMPORTANT FOR NEW REQUESTS BY USER WITHOUT BUCKET
        rest.rateLimitedPaths.set(url, {
            url,
            resetTimestamp: reset,
            bucketId
        });
        // SAVE THE BUCKET AS LIMITED SINCE DIFFERENT URLS MAY SHARE A BUCKET
        if (bucketId) {
            rest.rateLimitedPaths.set(bucketId, {
                url,
                resetTimestamp: reset,
                bucketId
            });
        }
    }
    // IF THERE IS NO REMAINING GLOBAL LIMIT, MARK IT RATE LIMITED GLOBALLY
    if (global) {
        const retryAfter = headers.get("retry-after");
        const globalReset = Date.now() + Number(retryAfter) * 1000;
        rest.debug(`[REST = Globally Rate Limited] URL: ${url} | Global Rest: ${globalReset}`);
        rest.globallyRateLimited = true;
        rateLimited = true;
        rest.rateLimitedPaths.set("global", {
            url: "global",
            resetTimestamp: globalReset,
            bucketId
        });
        if (bucketId) {
            rest.rateLimitedPaths.set(bucketId, {
                url: "global",
                resetTimestamp: globalReset,
                bucketId
            });
        }
    }
    if (rateLimited && !rest.processingRateLimitedPaths) {
        rest.processRateLimitedPaths(rest);
    }
    return rateLimited ? bucketId : undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN0TWFuYWdlciB9IGZyb20gXCIuLi9ib3QudHNcIjtcblxuLyoqIFByb2Nlc3NlcyB0aGUgcmF0ZSBsaW1pdCBoZWFkZXJzIGFuZCBkZXRlcm1pbmVzIGlmIGl0IG5lZWRzIHRvIGJlIHJhdGUgbGltaXRlZCBhbmQgcmV0dXJucyB0aGUgYnVja2V0IGlkIGlmIGF2YWlsYWJsZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NSZXF1ZXN0SGVhZGVycyhyZXN0OiBSZXN0TWFuYWdlciwgdXJsOiBzdHJpbmcsIGhlYWRlcnM6IEhlYWRlcnMpIHtcbiAgbGV0IHJhdGVMaW1pdGVkID0gZmFsc2U7XG5cbiAgLy8gR0VUIEFMTCBORUNFU1NBUlkgSEVBREVSU1xuICBjb25zdCByZW1haW5pbmcgPSBoZWFkZXJzLmdldChcIngtcmF0ZWxpbWl0LXJlbWFpbmluZ1wiKTtcbiAgY29uc3QgcmV0cnlBZnRlciA9IGhlYWRlcnMuZ2V0KFwieC1yYXRlbGltaXQtcmVzZXQtYWZ0ZXJcIik7XG4gIGNvbnN0IHJlc2V0ID0gRGF0ZS5ub3coKSArIE51bWJlcihyZXRyeUFmdGVyKSAqIDEwMDA7XG4gIGNvbnN0IGdsb2JhbCA9IGhlYWRlcnMuZ2V0KFwieC1yYXRlbGltaXQtZ2xvYmFsXCIpO1xuICAvLyB1bmRlZmluZWQgb3ZlcnJpZGUgbnVsbCBuZWVkZWQgZm9yIHR5cGluZ3NcbiAgY29uc3QgYnVja2V0SWQgPSBoZWFkZXJzLmdldChcIngtcmF0ZWxpbWl0LWJ1Y2tldFwiKSB8fCB1bmRlZmluZWQ7XG5cbiAgLy8gSUYgVEhFUkUgSVMgTk8gUkVNQUlOSU5HIFJBVEUgTElNSVQsIE1BUksgSVQgQVMgUkFURSBMSU1JVEVEXG4gIGlmIChyZW1haW5pbmcgPT09IFwiMFwiKSB7XG4gICAgcmF0ZUxpbWl0ZWQgPSB0cnVlO1xuXG4gICAgLy8gU0FWRSBUSEUgVVJMIEFTIExJTUlURUQsIElNUE9SVEFOVCBGT1IgTkVXIFJFUVVFU1RTIEJZIFVTRVIgV0lUSE9VVCBCVUNLRVRcbiAgICByZXN0LnJhdGVMaW1pdGVkUGF0aHMuc2V0KHVybCwge1xuICAgICAgdXJsLFxuICAgICAgcmVzZXRUaW1lc3RhbXA6IHJlc2V0LFxuICAgICAgYnVja2V0SWQsXG4gICAgfSk7XG5cbiAgICAvLyBTQVZFIFRIRSBCVUNLRVQgQVMgTElNSVRFRCBTSU5DRSBESUZGRVJFTlQgVVJMUyBNQVkgU0hBUkUgQSBCVUNLRVRcbiAgICBpZiAoYnVja2V0SWQpIHtcbiAgICAgIHJlc3QucmF0ZUxpbWl0ZWRQYXRocy5zZXQoYnVja2V0SWQsIHtcbiAgICAgICAgdXJsLFxuICAgICAgICByZXNldFRpbWVzdGFtcDogcmVzZXQsXG4gICAgICAgIGJ1Y2tldElkLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gSUYgVEhFUkUgSVMgTk8gUkVNQUlOSU5HIEdMT0JBTCBMSU1JVCwgTUFSSyBJVCBSQVRFIExJTUlURUQgR0xPQkFMTFlcbiAgaWYgKGdsb2JhbCkge1xuICAgIGNvbnN0IHJldHJ5QWZ0ZXIgPSBoZWFkZXJzLmdldChcInJldHJ5LWFmdGVyXCIpO1xuICAgIGNvbnN0IGdsb2JhbFJlc2V0ID0gRGF0ZS5ub3coKSArIE51bWJlcihyZXRyeUFmdGVyKSAqIDEwMDA7XG4gICAgcmVzdC5kZWJ1ZyhgW1JFU1QgPSBHbG9iYWxseSBSYXRlIExpbWl0ZWRdIFVSTDogJHt1cmx9IHwgR2xvYmFsIFJlc3Q6ICR7Z2xvYmFsUmVzZXR9YCk7XG4gICAgcmVzdC5nbG9iYWxseVJhdGVMaW1pdGVkID0gdHJ1ZTtcbiAgICByYXRlTGltaXRlZCA9IHRydWU7XG5cbiAgICByZXN0LnJhdGVMaW1pdGVkUGF0aHMuc2V0KFwiZ2xvYmFsXCIsIHtcbiAgICAgIHVybDogXCJnbG9iYWxcIixcbiAgICAgIHJlc2V0VGltZXN0YW1wOiBnbG9iYWxSZXNldCxcbiAgICAgIGJ1Y2tldElkLFxuICAgIH0pO1xuXG4gICAgaWYgKGJ1Y2tldElkKSB7XG4gICAgICByZXN0LnJhdGVMaW1pdGVkUGF0aHMuc2V0KGJ1Y2tldElkLCB7XG4gICAgICAgIHVybDogXCJnbG9iYWxcIixcbiAgICAgICAgcmVzZXRUaW1lc3RhbXA6IGdsb2JhbFJlc2V0LFxuICAgICAgICBidWNrZXRJZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRlTGltaXRlZCAmJiAhcmVzdC5wcm9jZXNzaW5nUmF0ZUxpbWl0ZWRQYXRocykge1xuICAgIHJlc3QucHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMocmVzdCk7XG4gIH1cbiAgcmV0dXJuIHJhdGVMaW1pdGVkID8gYnVja2V0SWQgOiB1bmRlZmluZWQ7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsNEhBQTRILENBQzVILE9BQU8sU0FBUyxxQkFBcUIsQ0FBQyxJQUFpQixFQUFFLEdBQVcsRUFBRSxPQUFnQixFQUFFO0lBQ3RGLElBQUksV0FBVyxHQUFHLEtBQUssQUFBQztJQUV4Qiw0QkFBNEI7SUFDNUIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxBQUFDO0lBQ3ZELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQUFBQztJQUMxRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQUFBQztJQUNyRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEFBQUM7SUFDakQsNkNBQTZDO0lBQzdDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxTQUFTLEFBQUM7SUFFaEUsK0RBQStEO0lBQy9ELElBQUksU0FBUyxLQUFLLEdBQUcsRUFBRTtRQUNyQixXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRW5CLDZFQUE2RTtRQUM3RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUM3QixHQUFHO1lBQ0gsY0FBYyxFQUFFLEtBQUs7WUFDckIsUUFBUTtTQUNULENBQUMsQ0FBQztRQUVILHFFQUFxRTtRQUNyRSxJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO2dCQUNsQyxHQUFHO2dCQUNILGNBQWMsRUFBRSxLQUFLO2dCQUNyQixRQUFRO2FBQ1QsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtJQUVELHVFQUF1RTtJQUN2RSxJQUFJLE1BQU0sRUFBRTtRQUNWLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEFBQUM7UUFDOUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLEFBQUM7UUFDM0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztRQUNoQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRW5CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2xDLEdBQUcsRUFBRSxRQUFRO1lBQ2IsY0FBYyxFQUFFLFdBQVc7WUFDM0IsUUFBUTtTQUNULENBQUMsQ0FBQztRQUVILElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xDLEdBQUcsRUFBRSxRQUFRO2dCQUNiLGNBQWMsRUFBRSxXQUFXO2dCQUMzQixRQUFRO2FBQ1QsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtJQUVELElBQUksV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFO1FBQ25ELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNwQztJQUNELE9BQU8sV0FBVyxHQUFHLFFBQVEsR0FBRyxTQUFTLENBQUM7Q0FDM0MifQ==