export function processRequestHeaders(rest, url, headers) {
    let rateLimited = false;
    const remaining = headers.get("x-ratelimit-remaining");
    const retryAfter = headers.get("x-ratelimit-reset-after");
    const reset = Date.now() + Number(retryAfter) * 1000;
    const global = headers.get("x-ratelimit-global");
    const bucketId = headers.get("x-ratelimit-bucket") || undefined;
    if (remaining === "0") {
        rateLimited = true;
        rest.rateLimitedPaths.set(url, {
            url,
            resetTimestamp: reset,
            bucketId,
        });
        if (bucketId) {
            rest.rateLimitedPaths.set(bucketId, {
                url,
                resetTimestamp: reset,
                bucketId,
            });
        }
    }
    if (global) {
        const retryAfter = headers.get("retry-after");
        const globalReset = Date.now() + Number(retryAfter) * 1000;
        rest.debug(`[REST = Globally Rate Limited] URL: ${url} | Global Rest: ${globalReset}`);
        rest.globallyRateLimited = true;
        rateLimited = true;
        rest.rateLimitedPaths.set("global", {
            url: "global",
            resetTimestamp: globalReset,
            bucketId,
        });
        if (bucketId) {
            rest.rateLimitedPaths.set(bucketId, {
                url: "global",
                resetTimestamp: globalReset,
                bucketId,
            });
        }
    }
    if (rateLimited && !rest.processingRateLimitedPaths) {
        rest.processRateLimitedPaths(rest);
    }
    return rateLimited ? bucketId : undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc1JlcXVlc3RIZWFkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvY2Vzc1JlcXVlc3RIZWFkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxJQUFpQixFQUFFLEdBQVcsRUFBRSxPQUFnQjtJQUNwRixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFHeEIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMxRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNyRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFakQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLFNBQVMsQ0FBQztJQUdoRSxJQUFJLFNBQVMsS0FBSyxHQUFHLEVBQUU7UUFDckIsV0FBVyxHQUFHLElBQUksQ0FBQztRQUduQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUM3QixHQUFHO1lBQ0gsY0FBYyxFQUFFLEtBQUs7WUFDckIsUUFBUTtTQUNULENBQUMsQ0FBQztRQUdILElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xDLEdBQUc7Z0JBQ0gsY0FBYyxFQUFFLEtBQUs7Z0JBQ3JCLFFBQVE7YUFDVCxDQUFDLENBQUM7U0FDSjtLQUNGO0lBR0QsSUFBSSxNQUFNLEVBQUU7UUFDVixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEdBQUcsbUJBQW1CLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztRQUNoQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRW5CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2xDLEdBQUcsRUFBRSxRQUFRO1lBQ2IsY0FBYyxFQUFFLFdBQVc7WUFDM0IsUUFBUTtTQUNULENBQUMsQ0FBQztRQUVILElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xDLEdBQUcsRUFBRSxRQUFRO2dCQUNiLGNBQWMsRUFBRSxXQUFXO2dCQUMzQixRQUFRO2FBQ1QsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtJQUVELElBQUksV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFO1FBQ25ELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNwQztJQUNELE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUM1QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdE1hbmFnZXIgfSBmcm9tIFwiLi4vYm90LnRzXCI7XG5cbi8qKiBQcm9jZXNzZXMgdGhlIHJhdGUgbGltaXQgaGVhZGVycyBhbmQgZGV0ZXJtaW5lcyBpZiBpdCBuZWVkcyB0byBiZSByYXRlIGxpbWl0ZWQgYW5kIHJldHVybnMgdGhlIGJ1Y2tldCBpZCBpZiBhdmFpbGFibGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzUmVxdWVzdEhlYWRlcnMocmVzdDogUmVzdE1hbmFnZXIsIHVybDogc3RyaW5nLCBoZWFkZXJzOiBIZWFkZXJzKSB7XG4gIGxldCByYXRlTGltaXRlZCA9IGZhbHNlO1xuXG4gIC8vIEdFVCBBTEwgTkVDRVNTQVJZIEhFQURFUlNcbiAgY29uc3QgcmVtYWluaW5nID0gaGVhZGVycy5nZXQoXCJ4LXJhdGVsaW1pdC1yZW1haW5pbmdcIik7XG4gIGNvbnN0IHJldHJ5QWZ0ZXIgPSBoZWFkZXJzLmdldChcIngtcmF0ZWxpbWl0LXJlc2V0LWFmdGVyXCIpO1xuICBjb25zdCByZXNldCA9IERhdGUubm93KCkgKyBOdW1iZXIocmV0cnlBZnRlcikgKiAxMDAwO1xuICBjb25zdCBnbG9iYWwgPSBoZWFkZXJzLmdldChcIngtcmF0ZWxpbWl0LWdsb2JhbFwiKTtcbiAgLy8gdW5kZWZpbmVkIG92ZXJyaWRlIG51bGwgbmVlZGVkIGZvciB0eXBpbmdzXG4gIGNvbnN0IGJ1Y2tldElkID0gaGVhZGVycy5nZXQoXCJ4LXJhdGVsaW1pdC1idWNrZXRcIikgfHwgdW5kZWZpbmVkO1xuXG4gIC8vIElGIFRIRVJFIElTIE5PIFJFTUFJTklORyBSQVRFIExJTUlULCBNQVJLIElUIEFTIFJBVEUgTElNSVRFRFxuICBpZiAocmVtYWluaW5nID09PSBcIjBcIikge1xuICAgIHJhdGVMaW1pdGVkID0gdHJ1ZTtcblxuICAgIC8vIFNBVkUgVEhFIFVSTCBBUyBMSU1JVEVELCBJTVBPUlRBTlQgRk9SIE5FVyBSRVFVRVNUUyBCWSBVU0VSIFdJVEhPVVQgQlVDS0VUXG4gICAgcmVzdC5yYXRlTGltaXRlZFBhdGhzLnNldCh1cmwsIHtcbiAgICAgIHVybCxcbiAgICAgIHJlc2V0VGltZXN0YW1wOiByZXNldCxcbiAgICAgIGJ1Y2tldElkLFxuICAgIH0pO1xuXG4gICAgLy8gU0FWRSBUSEUgQlVDS0VUIEFTIExJTUlURUQgU0lOQ0UgRElGRkVSRU5UIFVSTFMgTUFZIFNIQVJFIEEgQlVDS0VUXG4gICAgaWYgKGJ1Y2tldElkKSB7XG4gICAgICByZXN0LnJhdGVMaW1pdGVkUGF0aHMuc2V0KGJ1Y2tldElkLCB7XG4gICAgICAgIHVybCxcbiAgICAgICAgcmVzZXRUaW1lc3RhbXA6IHJlc2V0LFxuICAgICAgICBidWNrZXRJZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIElGIFRIRVJFIElTIE5PIFJFTUFJTklORyBHTE9CQUwgTElNSVQsIE1BUksgSVQgUkFURSBMSU1JVEVEIEdMT0JBTExZXG4gIGlmIChnbG9iYWwpIHtcbiAgICBjb25zdCByZXRyeUFmdGVyID0gaGVhZGVycy5nZXQoXCJyZXRyeS1hZnRlclwiKTtcbiAgICBjb25zdCBnbG9iYWxSZXNldCA9IERhdGUubm93KCkgKyBOdW1iZXIocmV0cnlBZnRlcikgKiAxMDAwO1xuICAgIHJlc3QuZGVidWcoYFtSRVNUID0gR2xvYmFsbHkgUmF0ZSBMaW1pdGVkXSBVUkw6ICR7dXJsfSB8IEdsb2JhbCBSZXN0OiAke2dsb2JhbFJlc2V0fWApO1xuICAgIHJlc3QuZ2xvYmFsbHlSYXRlTGltaXRlZCA9IHRydWU7XG4gICAgcmF0ZUxpbWl0ZWQgPSB0cnVlO1xuXG4gICAgcmVzdC5yYXRlTGltaXRlZFBhdGhzLnNldChcImdsb2JhbFwiLCB7XG4gICAgICB1cmw6IFwiZ2xvYmFsXCIsXG4gICAgICByZXNldFRpbWVzdGFtcDogZ2xvYmFsUmVzZXQsXG4gICAgICBidWNrZXRJZCxcbiAgICB9KTtcblxuICAgIGlmIChidWNrZXRJZCkge1xuICAgICAgcmVzdC5yYXRlTGltaXRlZFBhdGhzLnNldChidWNrZXRJZCwge1xuICAgICAgICB1cmw6IFwiZ2xvYmFsXCIsXG4gICAgICAgIHJlc2V0VGltZXN0YW1wOiBnbG9iYWxSZXNldCxcbiAgICAgICAgYnVja2V0SWQsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAocmF0ZUxpbWl0ZWQgJiYgIXJlc3QucHJvY2Vzc2luZ1JhdGVMaW1pdGVkUGF0aHMpIHtcbiAgICByZXN0LnByb2Nlc3NSYXRlTGltaXRlZFBhdGhzKHJlc3QpO1xuICB9XG4gIHJldHVybiByYXRlTGltaXRlZCA/IGJ1Y2tldElkIDogdW5kZWZpbmVkO1xufVxuIl19