import { Collection } from "../../util/collection.ts";
import { calculateTotalShards } from "./calculateTotalShards.ts";
import { calculateWorkerId } from "./calculateWorkerId.ts";
import { spawnShards } from "./spawnShards.ts";
import { prepareBuckets } from "./prepareBuckets.ts";
import { tellWorkerToIdentify } from "./tellWorkerToIdentify.ts";
import { createShardManager } from "./shardManager.ts";
import { stop } from "./stop.ts";
export function createGatewayManager(options) {
    const prepareBucketsOverwritten = options.prepareBuckets ?? prepareBuckets;
    const spawnShardsOverwritten = options.spawnShards ?? spawnShards;
    const stopOverwritten = options.stop ?? stop;
    const tellWorkerToIdentifyOverwritten = options.tellWorkerToIdentify ?? tellWorkerToIdentify;
    const calculateTotalShardsOverwritten = options.calculateTotalShards ?? calculateTotalShards;
    const calculateWorkerIdOverwritten = options.calculateWorkerId ?? calculateWorkerId;
    const totalShards = options.totalShards ?? options.gatewayBot.shards ?? 1;
    const gatewayManager = {
        buckets: new Collection(),
        firstShardId: options.firstShardId ?? 0,
        gatewayBot: options.gatewayBot,
        lastShardId: options.lastShardId ?? totalShards - 1 ?? 1,
        manager: {},
        spawnShardDelay: options.spawnShardDelay ?? 5300,
        shardsPerWorker: options.shardsPerWorker ?? 25,
        totalWorkers: options.totalWorkers ?? 4,
        prepareBuckets: function () {
            return prepareBucketsOverwritten(this);
        },
        spawnShards: function () {
            return spawnShardsOverwritten(this);
        },
        stop: function (code, reason) {
            return stopOverwritten(this, code, reason);
        },
        tellWorkerToIdentify: function (workerId, shardId, bucketId) {
            return tellWorkerToIdentifyOverwritten(this, workerId, shardId, bucketId);
        },
        debug: options.debug || function () { },
        calculateTotalShards: function () {
            return calculateTotalShardsOverwritten(this);
        },
        calculateWorkerId: function (shardId) {
            return calculateWorkerIdOverwritten(this, shardId);
        },
    };
    gatewayManager.manager = createShardManager({
        createShardOptions: options.createShardOptions,
        gatewayConfig: options.gatewayConfig,
        shardIds: [],
        totalShards,
        handleMessage: function (shard, message) {
            return options.handleDiscordPayload(shard, message);
        },
        requestIdentify: async (shardId) => {
            await gatewayManager.buckets.get(shardId % gatewayManager.gatewayBot.sessionStartLimit.maxConcurrency).leak
                .acquire(1);
        },
    });
    return gatewayManager;
}
//# sourceMappingURL=data:application/json;base64,