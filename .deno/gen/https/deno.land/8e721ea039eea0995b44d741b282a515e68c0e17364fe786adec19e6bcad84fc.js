import { requireBotChannelPermissions } from "../permissions.ts";
export function createStageInstance(bot) {
    const createStageInstanceOld = bot.helpers.createStageInstance;
    bot.helpers.createStageInstance = async function(options) {
        if (!bot.utils.validateLength(options.topic, {
            max: 120,
            min: 1
        })) {
            throw new Error("The topic length for creating a stage instance must be between 1-120.");
        }
        const perms = new Set([
            "MANAGE_CHANNELS",
            "MUTE_MEMBERS",
            "MOVE_MEMBERS", 
        ]);
        if (options.sendStartNotification) {
            perms.add("MENTION_EVERYONE");
        }
        requireBotChannelPermissions(bot, options.channelId, [
            ...perms.values()
        ]);
        return await createStageInstanceOld(options);
    };
}
export function deleteStageInstance(bot) {
    const deleteStageInstanceOld = bot.helpers.deleteStageInstance;
    bot.helpers.deleteStageInstance = async function(channelId) {
        requireBotChannelPermissions(bot, channelId, [
            "MANAGE_CHANNELS",
            "MUTE_MEMBERS",
            "MOVE_MEMBERS", 
        ]);
        return await deleteStageInstanceOld(channelId);
    };
}
export function updateStageInstance(bot) {
    const updateStageInstanceOld = bot.helpers.updateStageInstance;
    bot.helpers.updateStageInstance = async function(channelId, data) {
        requireBotChannelPermissions(bot, channelId, [
            "MANAGE_CHANNELS",
            "MUTE_MEMBERS",
            "MOVE_MEMBERS", 
        ]);
        return await updateStageInstanceOld(channelId, data);
    };
}
export default function setupStagePermChecks(bot) {
    createStageInstance(bot);
    deleteStageInstance(bot);
    updateStageInstance(bot);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3RXaXRoQ2FjaGUsIFBlcm1pc3Npb25TdHJpbmdzIH0gZnJvbSBcIi4uLy4uL2RlcHMudHNcIjtcbmltcG9ydCB7IHJlcXVpcmVCb3RDaGFubmVsUGVybWlzc2lvbnMgfSBmcm9tIFwiLi4vcGVybWlzc2lvbnMudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YWdlSW5zdGFuY2UoYm90OiBCb3RXaXRoQ2FjaGUpIHtcbiAgY29uc3QgY3JlYXRlU3RhZ2VJbnN0YW5jZU9sZCA9IGJvdC5oZWxwZXJzLmNyZWF0ZVN0YWdlSW5zdGFuY2U7XG5cbiAgYm90LmhlbHBlcnMuY3JlYXRlU3RhZ2VJbnN0YW5jZSA9IGFzeW5jIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKCFib3QudXRpbHMudmFsaWRhdGVMZW5ndGgob3B0aW9ucy50b3BpYywgeyBtYXg6IDEyMCwgbWluOiAxIH0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiVGhlIHRvcGljIGxlbmd0aCBmb3IgY3JlYXRpbmcgYSBzdGFnZSBpbnN0YW5jZSBtdXN0IGJlIGJldHdlZW4gMS0xMjAuXCIsXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHBlcm1zID0gbmV3IFNldDxQZXJtaXNzaW9uU3RyaW5ncz4oW1xuICAgICAgXCJNQU5BR0VfQ0hBTk5FTFNcIixcbiAgICAgIFwiTVVURV9NRU1CRVJTXCIsXG4gICAgICBcIk1PVkVfTUVNQkVSU1wiLFxuICAgIF0pO1xuXG4gICAgaWYgKG9wdGlvbnMuc2VuZFN0YXJ0Tm90aWZpY2F0aW9uKSB7XG4gICAgICBwZXJtcy5hZGQoXCJNRU5USU9OX0VWRVJZT05FXCIpO1xuICAgIH1cblxuICAgIHJlcXVpcmVCb3RDaGFubmVsUGVybWlzc2lvbnMoYm90LCBvcHRpb25zLmNoYW5uZWxJZCwgWy4uLnBlcm1zLnZhbHVlcygpXSk7XG5cbiAgICByZXR1cm4gYXdhaXQgY3JlYXRlU3RhZ2VJbnN0YW5jZU9sZChvcHRpb25zKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVN0YWdlSW5zdGFuY2UoYm90OiBCb3RXaXRoQ2FjaGUpIHtcbiAgY29uc3QgZGVsZXRlU3RhZ2VJbnN0YW5jZU9sZCA9IGJvdC5oZWxwZXJzLmRlbGV0ZVN0YWdlSW5zdGFuY2U7XG5cbiAgYm90LmhlbHBlcnMuZGVsZXRlU3RhZ2VJbnN0YW5jZSA9IGFzeW5jIGZ1bmN0aW9uIChjaGFubmVsSWQpIHtcbiAgICByZXF1aXJlQm90Q2hhbm5lbFBlcm1pc3Npb25zKGJvdCwgY2hhbm5lbElkLCBbXG4gICAgICBcIk1BTkFHRV9DSEFOTkVMU1wiLFxuICAgICAgXCJNVVRFX01FTUJFUlNcIixcbiAgICAgIFwiTU9WRV9NRU1CRVJTXCIsXG4gICAgXSk7XG5cbiAgICByZXR1cm4gYXdhaXQgZGVsZXRlU3RhZ2VJbnN0YW5jZU9sZChjaGFubmVsSWQpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3RhZ2VJbnN0YW5jZShib3Q6IEJvdFdpdGhDYWNoZSkge1xuICBjb25zdCB1cGRhdGVTdGFnZUluc3RhbmNlT2xkID0gYm90LmhlbHBlcnMudXBkYXRlU3RhZ2VJbnN0YW5jZTtcblxuICBib3QuaGVscGVycy51cGRhdGVTdGFnZUluc3RhbmNlID0gYXN5bmMgZnVuY3Rpb24gKGNoYW5uZWxJZCwgZGF0YSkge1xuICAgIHJlcXVpcmVCb3RDaGFubmVsUGVybWlzc2lvbnMoYm90LCBjaGFubmVsSWQsIFtcbiAgICAgIFwiTUFOQUdFX0NIQU5ORUxTXCIsXG4gICAgICBcIk1VVEVfTUVNQkVSU1wiLFxuICAgICAgXCJNT1ZFX01FTUJFUlNcIixcbiAgICBdKTtcblxuICAgIHJldHVybiBhd2FpdCB1cGRhdGVTdGFnZUluc3RhbmNlT2xkKGNoYW5uZWxJZCwgZGF0YSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHVwU3RhZ2VQZXJtQ2hlY2tzKGJvdDogQm90V2l0aENhY2hlKSB7XG4gIGNyZWF0ZVN0YWdlSW5zdGFuY2UoYm90KTtcbiAgZGVsZXRlU3RhZ2VJbnN0YW5jZShib3QpO1xuICB1cGRhdGVTdGFnZUluc3RhbmNlKGJvdCk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyw0QkFBNEIsUUFBUSxtQkFBbUIsQ0FBQztBQUVqRSxPQUFPLFNBQVMsbUJBQW1CLENBQUMsR0FBaUIsRUFBRTtJQUNyRCxNQUFNLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEFBQUM7SUFFL0QsR0FBRyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxlQUFnQixPQUFPLEVBQUU7UUFDekQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFBRSxHQUFHLEVBQUUsR0FBRztZQUFFLEdBQUcsRUFBRSxDQUFDO1NBQUUsQ0FBQyxFQUFFO1lBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQ2IsdUVBQXVFLENBQ3hFLENBQUM7U0FDSDtRQUVELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFvQjtZQUN2QyxpQkFBaUI7WUFDakIsY0FBYztZQUNkLGNBQWM7U0FDZixDQUFDLEFBQUM7UUFFSCxJQUFJLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRTtZQUNqQyxLQUFLLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDL0I7UUFFRCw0QkFBNEIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRTtlQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7U0FBQyxDQUFDLENBQUM7UUFFMUUsT0FBTyxNQUFNLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzlDLENBQUM7Q0FDSDtBQUVELE9BQU8sU0FBUyxtQkFBbUIsQ0FBQyxHQUFpQixFQUFFO0lBQ3JELE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQUFBQztJQUUvRCxHQUFHLENBQUMsT0FBTyxDQUFDLG1CQUFtQixHQUFHLGVBQWdCLFNBQVMsRUFBRTtRQUMzRCw0QkFBNEIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQzNDLGlCQUFpQjtZQUNqQixjQUFjO1lBQ2QsY0FBYztTQUNmLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNoRCxDQUFDO0NBQ0g7QUFFRCxPQUFPLFNBQVMsbUJBQW1CLENBQUMsR0FBaUIsRUFBRTtJQUNyRCxNQUFNLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEFBQUM7SUFFL0QsR0FBRyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxlQUFnQixTQUFTLEVBQUUsSUFBSSxFQUFFO1FBQ2pFLDRCQUE0QixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7WUFDM0MsaUJBQWlCO1lBQ2pCLGNBQWM7WUFDZCxjQUFjO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN0RCxDQUFDO0NBQ0g7QUFFRCxlQUFlLFNBQVMsb0JBQW9CLENBQUMsR0FBaUIsRUFBRTtJQUM5RCxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMxQixDQUFBIn0=