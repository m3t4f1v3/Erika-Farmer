import { dispatchRequirements } from "./dispatchRequirements.ts";
export function enableCacheSweepers(bot) {
    bot.guilds.startSweeper({
        filter: function (guild, _, bot) {
            if (bot.activeGuildIds.delete(guild.id))
                return false;
            bot.dispatchedGuildIds.add(guild.id);
            return true;
        },
        interval: 3660000,
        bot,
    });
    bot.channels.startSweeper({
        filter: function channelSweeper(channel, key, bot) {
            if (channel.guildId && bot.dispatchedGuildIds.has(channel.guildId)) {
                bot.dispatchedChannelIds.add(channel.id);
                return true;
            }
            if (!channel.guildId && !bot.members.has(key))
                return true;
            return false;
        },
        interval: 3660000,
        bot,
    });
    const setMember = bot.members.set.bind(bot.members);
    bot.members.set = function (id, member) {
        return setMember(id, {
            ...member,
            cachedAt: Date.now(),
        });
    };
    bot.members.startSweeper({
        filter: function memberSweeper(member, _, bot) {
            if (member.id === bot.id)
                return false;
            return Date.now() - member.cachedAt > 1800000;
        },
        interval: 300000,
        bot,
    });
    bot.messages.startSweeper({
        filter: function messageSweeper(message) {
            if (!message.guildId)
                return true;
            return Date.now() - message.timestamp > 600000;
        },
        interval: 300000,
        bot,
    });
    bot.presences.startSweeper({ filter: () => true, interval: 300000, bot });
    const handleDiscordPayloadOld = bot.gateway.handleDiscordPayload;
    bot.gateway.handleDiscordPayload = async function (_, data, shardId) {
        await dispatchRequirements(bot, data);
        handleDiscordPayloadOld(_, data, shardId);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzd2VlcGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUdqRSxNQUFNLFVBQVUsbUJBQW1CLENBQWdCLEdBQW9CO0lBQ3JFLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3RCLE1BQU0sRUFBRSxVQUFVLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBb0I7WUFFOUMsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1lBSXRELEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXJDLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELFFBQVEsRUFBRSxPQUFPO1FBQ2pCLEdBQUc7S0FDSixDQUFDLENBQUM7SUFDSCxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUN4QixNQUFNLEVBQUUsU0FBUyxjQUFjLENBQzdCLE9BQU8sRUFDUCxHQUFHLEVBQ0gsR0FBb0I7WUFHcEIsSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNsRSxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDekMsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUdELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2dCQUFFLE9BQU8sSUFBSSxDQUFDO1lBRTNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUNELFFBQVEsRUFBRSxPQUFPO1FBQ2pCLEdBQUc7S0FDSixDQUFDLENBQUM7SUFFSCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLFVBQVUsRUFBRSxFQUFFLE1BQU07UUFDcEMsT0FBTyxTQUFTLENBQUMsRUFBRSxFQUFFO1lBQ25CLEdBQUcsTUFBTTtZQUNULFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1NBQ1gsQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDdkIsTUFBTSxFQUFFLFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBb0I7WUFFNUQsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1lBR3ZDLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFJLE1BQXdDLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUNuRixDQUFDO1FBQ0QsUUFBUSxFQUFFLE1BQU07UUFDaEIsR0FBRztLQUNKLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxTQUFTLGNBQWMsQ0FBQyxPQUFPO1lBRXJDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTztnQkFBRSxPQUFPLElBQUksQ0FBQztZQUdsQyxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUNqRCxDQUFDO1FBQ0QsUUFBUSxFQUFFLE1BQU07UUFDaEIsR0FBRztLQUNKLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFHMUUsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0lBQ2pFLEdBQUcsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTztRQUVqRSxNQUFNLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV0Qyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3QsIE1lbWJlciB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBCb3RXaXRoQ2FjaGUgfSBmcm9tIFwiLi9hZGRDYWNoZUNvbGxlY3Rpb25zLnRzXCI7XG5pbXBvcnQgeyBkaXNwYXRjaFJlcXVpcmVtZW50cyB9IGZyb20gXCIuL2Rpc3BhdGNoUmVxdWlyZW1lbnRzLnRzXCI7XG5cbi8qKiBFbmFibGVzIHN3ZWVwZXJzIGZvciB5b3VyIGJvdCBidXQgd2lsbCByZXF1aXJlLCBlbmFibGluZyBjYWNoZSBmaXJzdC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVDYWNoZVN3ZWVwZXJzPEIgZXh0ZW5kcyBCb3Q+KGJvdDogQm90V2l0aENhY2hlPEI+KSB7XG4gIGJvdC5ndWlsZHMuc3RhcnRTd2VlcGVyKHtcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIChndWlsZCwgXywgYm90OiBCb3RXaXRoQ2FjaGU8Qj4pIHtcbiAgICAgIC8vIFJlc2V0IGFjdGl2aXR5IGZvciBuZXh0IGludGVydmFsXG4gICAgICBpZiAoYm90LmFjdGl2ZUd1aWxkSWRzLmRlbGV0ZShndWlsZC5pZCkpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gVGhpcyBpcyBpbmFjdGl2ZSBndWlsZC4gTm90IGEgc2luZ2xlIHRoaW5nIGhhcyBoYXBwZW5lZCBmb3IgYXQgbGVhc3QgMzAgbWludXRlcy5cbiAgICAgIC8vIE5vdCBhIHJlYWN0aW9uLCBub3QgYSBtZXNzYWdlLCBub3QgYW55IGV2ZW50IVxuICAgICAgYm90LmRpc3BhdGNoZWRHdWlsZElkcy5hZGQoZ3VpbGQuaWQpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGludGVydmFsOiAzNjYwMDAwLFxuICAgIGJvdCxcbiAgfSk7XG4gIGJvdC5jaGFubmVscy5zdGFydFN3ZWVwZXIoe1xuICAgIGZpbHRlcjogZnVuY3Rpb24gY2hhbm5lbFN3ZWVwZXIoXG4gICAgICBjaGFubmVsLFxuICAgICAga2V5LFxuICAgICAgYm90OiBCb3RXaXRoQ2FjaGU8Qj4sXG4gICAgKSB7XG4gICAgICAvLyBJZiB0aGlzIGlzIGluIGEgZ3VpbGQgYW5kIHRoZSBndWlsZCB3YXMgZGlzcGF0Y2hlZCwgdGhlbiB3ZSBjYW4gZGlzcGF0Y2ggdGhlIGNoYW5uZWxcbiAgICAgIGlmIChjaGFubmVsLmd1aWxkSWQgJiYgYm90LmRpc3BhdGNoZWRHdWlsZElkcy5oYXMoY2hhbm5lbC5ndWlsZElkKSkge1xuICAgICAgICBib3QuZGlzcGF0Y2hlZENoYW5uZWxJZHMuYWRkKGNoYW5uZWwuaWQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gVEhFIEtFWSBETSBDSEFOTkVMUyBBUkUgU1RPUkVEIEJZIElTIFRIRSBVU0VSIElELiBJZiB0aGUgdXNlciBpcyBub3QgY2FjaGVkLCB3ZSBkb250IG5lZWQgdG8gY2FjaGUgdGhlaXIgZG0gY2hhbm5lbC5cbiAgICAgIGlmICghY2hhbm5lbC5ndWlsZElkICYmICFib3QubWVtYmVycy5oYXMoa2V5KSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGludGVydmFsOiAzNjYwMDAwLFxuICAgIGJvdCxcbiAgfSk7XG5cbiAgY29uc3Qgc2V0TWVtYmVyID0gYm90Lm1lbWJlcnMuc2V0LmJpbmQoYm90Lm1lbWJlcnMpO1xuICBib3QubWVtYmVycy5zZXQgPSBmdW5jdGlvbiAoaWQsIG1lbWJlcikge1xuICAgIHJldHVybiBzZXRNZW1iZXIoaWQsIHtcbiAgICAgIC4uLm1lbWJlcixcbiAgICAgIGNhY2hlZEF0OiBEYXRlLm5vdygpLFxuICAgIH0gYXMgTWVtYmVyKTtcbiAgfTtcblxuICBib3QubWVtYmVycy5zdGFydFN3ZWVwZXIoe1xuICAgIGZpbHRlcjogZnVuY3Rpb24gbWVtYmVyU3dlZXBlcihtZW1iZXIsIF8sIGJvdDogQm90V2l0aENhY2hlPEI+KSB7XG4gICAgICAvLyBEb24ndCBzd2VlcCB0aGUgYm90IGVsc2Ugc3RyYW5nZSB0aGluZ3Mgd2lsbCBoYXBwZW5cbiAgICAgIGlmIChtZW1iZXIuaWQgPT09IGJvdC5pZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBPbmx5IHN3ZWVwIG1lbWJlcnMgd2hvIHdlcmUgbm90IGFjdGl2ZSB0aGUgbGFzdCAzMCBtaW51dGVzXG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIChtZW1iZXIgYXMgTWVtYmVyICYgeyBjYWNoZWRBdDogbnVtYmVyIH0pLmNhY2hlZEF0ID4gMTgwMDAwMDtcbiAgICB9LFxuICAgIGludGVydmFsOiAzMDAwMDAsXG4gICAgYm90LFxuICB9KTtcblxuICBib3QubWVzc2FnZXMuc3RhcnRTd2VlcGVyKHtcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIG1lc3NhZ2VTd2VlcGVyKG1lc3NhZ2UpIHtcbiAgICAgIC8vIERNIG1lc3NhZ2VzIGFyZW4ndCBuZWVkZWRcbiAgICAgIGlmICghbWVzc2FnZS5ndWlsZElkKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgLy8gT25seSBkZWxldGUgbWVzc2FnZXMgb2xkZXIgdGhhbiAxMCBtaW51dGVzXG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIG1lc3NhZ2UudGltZXN0YW1wID4gNjAwMDAwO1xuICAgIH0sXG4gICAgaW50ZXJ2YWw6IDMwMDAwMCxcbiAgICBib3QsXG4gIH0pO1xuXG4gIGJvdC5wcmVzZW5jZXMuc3RhcnRTd2VlcGVyKHsgZmlsdGVyOiAoKSA9PiB0cnVlLCBpbnRlcnZhbDogMzAwMDAwLCBib3QgfSk7XG5cbiAgLy8gRElTUEFUQ0ggUkVRVUlSRU1FTlRTXG4gIGNvbnN0IGhhbmRsZURpc2NvcmRQYXlsb2FkT2xkID0gYm90LmdhdGV3YXkuaGFuZGxlRGlzY29yZFBheWxvYWQ7XG4gIGJvdC5nYXRld2F5LmhhbmRsZURpc2NvcmRQYXlsb2FkID0gYXN5bmMgZnVuY3Rpb24gKF8sIGRhdGEsIHNoYXJkSWQpIHtcbiAgICAvLyBSVU4gRElTUEFUQ0ggQ0hFQ0tcbiAgICBhd2FpdCBkaXNwYXRjaFJlcXVpcmVtZW50cyhib3QsIGRhdGEpO1xuICAgIC8vIFJVTiBPTEQgSEFORExFUlxuICAgIGhhbmRsZURpc2NvcmRQYXlsb2FkT2xkKF8sIGRhdGEsIHNoYXJkSWQpO1xuICB9O1xufVxuIl19