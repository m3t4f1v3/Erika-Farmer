import { dispatchRequirements } from "./dispatchRequirements.ts";
/** Enables sweepers for your bot but will require, enabling cache first. */ export function enableCacheSweepers(bot1) {
    bot1.guilds.startSweeper({
        filter: function(guild, _, bot) {
            // Reset activity for next interval
            if (bot.activeGuildIds.delete(guild.id)) return false;
            // This is inactive guild. Not a single thing has happened for at least 30 minutes.
            // Not a reaction, not a message, not any event!
            bot.dispatchedGuildIds.add(guild.id);
            return true;
        },
        interval: 3660000,
        bot: bot1
    });
    bot1.channels.startSweeper({
        filter: function channelSweeper(channel, key, bot) {
            // If this is in a guild and the guild was dispatched, then we can dispatch the channel
            if (channel.guildId && bot.dispatchedGuildIds.has(channel.guildId)) {
                bot.dispatchedChannelIds.add(channel.id);
                return true;
            }
            // THE KEY DM CHANNELS ARE STORED BY IS THE USER ID. If the user is not cached, we dont need to cache their dm channel.
            if (!channel.guildId && !bot.members.has(key)) return true;
            return false;
        },
        interval: 3660000,
        bot: bot1
    });
    const setMember = bot1.members.set.bind(bot1.members);
    bot1.members.set = function(id, member) {
        return setMember(id, {
            ...member,
            cachedAt: Date.now()
        });
    };
    bot1.members.startSweeper({
        filter: function memberSweeper(member, _, bot) {
            // Don't sweep the bot else strange things will happen
            if (member.id === bot.id) return false;
            // Only sweep members who were not active the last 30 minutes
            return Date.now() - member.cachedAt > 1800000;
        },
        interval: 300000,
        bot: bot1
    });
    bot1.messages.startSweeper({
        filter: function messageSweeper(message) {
            // DM messages aren't needed
            if (!message.guildId) return true;
            // Only delete messages older than 10 minutes
            return Date.now() - message.timestamp > 600000;
        },
        interval: 300000,
        bot: bot1
    });
    bot1.presences.startSweeper({
        filter: ()=>true
        ,
        interval: 300000,
        bot: bot1
    });
    // DISPATCH REQUIREMENTS
    const handleDiscordPayloadOld = bot1.gateway.handleDiscordPayload;
    bot1.gateway.handleDiscordPayload = async function(_, data, shardId) {
        // RUN DISPATCH CHECK
        await dispatchRequirements(bot1, data);
        // RUN OLD HANDLER
        handleDiscordPayloadOld(_, data, shardId);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3QsIE1lbWJlciB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBCb3RXaXRoQ2FjaGUgfSBmcm9tIFwiLi9hZGRDYWNoZUNvbGxlY3Rpb25zLnRzXCI7XG5pbXBvcnQgeyBkaXNwYXRjaFJlcXVpcmVtZW50cyB9IGZyb20gXCIuL2Rpc3BhdGNoUmVxdWlyZW1lbnRzLnRzXCI7XG5cbi8qKiBFbmFibGVzIHN3ZWVwZXJzIGZvciB5b3VyIGJvdCBidXQgd2lsbCByZXF1aXJlLCBlbmFibGluZyBjYWNoZSBmaXJzdC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVDYWNoZVN3ZWVwZXJzPEIgZXh0ZW5kcyBCb3Q+KGJvdDogQm90V2l0aENhY2hlPEI+KSB7XG4gIGJvdC5ndWlsZHMuc3RhcnRTd2VlcGVyKHtcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIChndWlsZCwgXywgYm90OiBCb3RXaXRoQ2FjaGU8Qj4pIHtcbiAgICAgIC8vIFJlc2V0IGFjdGl2aXR5IGZvciBuZXh0IGludGVydmFsXG4gICAgICBpZiAoYm90LmFjdGl2ZUd1aWxkSWRzLmRlbGV0ZShndWlsZC5pZCkpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gVGhpcyBpcyBpbmFjdGl2ZSBndWlsZC4gTm90IGEgc2luZ2xlIHRoaW5nIGhhcyBoYXBwZW5lZCBmb3IgYXQgbGVhc3QgMzAgbWludXRlcy5cbiAgICAgIC8vIE5vdCBhIHJlYWN0aW9uLCBub3QgYSBtZXNzYWdlLCBub3QgYW55IGV2ZW50IVxuICAgICAgYm90LmRpc3BhdGNoZWRHdWlsZElkcy5hZGQoZ3VpbGQuaWQpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGludGVydmFsOiAzNjYwMDAwLFxuICAgIGJvdCxcbiAgfSk7XG4gIGJvdC5jaGFubmVscy5zdGFydFN3ZWVwZXIoe1xuICAgIGZpbHRlcjogZnVuY3Rpb24gY2hhbm5lbFN3ZWVwZXIoXG4gICAgICBjaGFubmVsLFxuICAgICAga2V5LFxuICAgICAgYm90OiBCb3RXaXRoQ2FjaGU8Qj4sXG4gICAgKSB7XG4gICAgICAvLyBJZiB0aGlzIGlzIGluIGEgZ3VpbGQgYW5kIHRoZSBndWlsZCB3YXMgZGlzcGF0Y2hlZCwgdGhlbiB3ZSBjYW4gZGlzcGF0Y2ggdGhlIGNoYW5uZWxcbiAgICAgIGlmIChjaGFubmVsLmd1aWxkSWQgJiYgYm90LmRpc3BhdGNoZWRHdWlsZElkcy5oYXMoY2hhbm5lbC5ndWlsZElkKSkge1xuICAgICAgICBib3QuZGlzcGF0Y2hlZENoYW5uZWxJZHMuYWRkKGNoYW5uZWwuaWQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gVEhFIEtFWSBETSBDSEFOTkVMUyBBUkUgU1RPUkVEIEJZIElTIFRIRSBVU0VSIElELiBJZiB0aGUgdXNlciBpcyBub3QgY2FjaGVkLCB3ZSBkb250IG5lZWQgdG8gY2FjaGUgdGhlaXIgZG0gY2hhbm5lbC5cbiAgICAgIGlmICghY2hhbm5lbC5ndWlsZElkICYmICFib3QubWVtYmVycy5oYXMoa2V5KSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGludGVydmFsOiAzNjYwMDAwLFxuICAgIGJvdCxcbiAgfSk7XG5cbiAgY29uc3Qgc2V0TWVtYmVyID0gYm90Lm1lbWJlcnMuc2V0LmJpbmQoYm90Lm1lbWJlcnMpO1xuICBib3QubWVtYmVycy5zZXQgPSBmdW5jdGlvbiAoaWQsIG1lbWJlcikge1xuICAgIHJldHVybiBzZXRNZW1iZXIoaWQsIHtcbiAgICAgIC4uLm1lbWJlcixcbiAgICAgIGNhY2hlZEF0OiBEYXRlLm5vdygpLFxuICAgIH0gYXMgTWVtYmVyKTtcbiAgfTtcblxuICBib3QubWVtYmVycy5zdGFydFN3ZWVwZXIoe1xuICAgIGZpbHRlcjogZnVuY3Rpb24gbWVtYmVyU3dlZXBlcihtZW1iZXIsIF8sIGJvdDogQm90V2l0aENhY2hlPEI+KSB7XG4gICAgICAvLyBEb24ndCBzd2VlcCB0aGUgYm90IGVsc2Ugc3RyYW5nZSB0aGluZ3Mgd2lsbCBoYXBwZW5cbiAgICAgIGlmIChtZW1iZXIuaWQgPT09IGJvdC5pZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBPbmx5IHN3ZWVwIG1lbWJlcnMgd2hvIHdlcmUgbm90IGFjdGl2ZSB0aGUgbGFzdCAzMCBtaW51dGVzXG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIChtZW1iZXIgYXMgTWVtYmVyICYgeyBjYWNoZWRBdDogbnVtYmVyIH0pLmNhY2hlZEF0ID4gMTgwMDAwMDtcbiAgICB9LFxuICAgIGludGVydmFsOiAzMDAwMDAsXG4gICAgYm90LFxuICB9KTtcblxuICBib3QubWVzc2FnZXMuc3RhcnRTd2VlcGVyKHtcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIG1lc3NhZ2VTd2VlcGVyKG1lc3NhZ2UpIHtcbiAgICAgIC8vIERNIG1lc3NhZ2VzIGFyZW4ndCBuZWVkZWRcbiAgICAgIGlmICghbWVzc2FnZS5ndWlsZElkKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgLy8gT25seSBkZWxldGUgbWVzc2FnZXMgb2xkZXIgdGhhbiAxMCBtaW51dGVzXG4gICAgICByZXR1cm4gRGF0ZS5ub3coKSAtIG1lc3NhZ2UudGltZXN0YW1wID4gNjAwMDAwO1xuICAgIH0sXG4gICAgaW50ZXJ2YWw6IDMwMDAwMCxcbiAgICBib3QsXG4gIH0pO1xuXG4gIGJvdC5wcmVzZW5jZXMuc3RhcnRTd2VlcGVyKHsgZmlsdGVyOiAoKSA9PiB0cnVlLCBpbnRlcnZhbDogMzAwMDAwLCBib3QgfSk7XG5cbiAgLy8gRElTUEFUQ0ggUkVRVUlSRU1FTlRTXG4gIGNvbnN0IGhhbmRsZURpc2NvcmRQYXlsb2FkT2xkID0gYm90LmdhdGV3YXkuaGFuZGxlRGlzY29yZFBheWxvYWQ7XG4gIGJvdC5nYXRld2F5LmhhbmRsZURpc2NvcmRQYXlsb2FkID0gYXN5bmMgZnVuY3Rpb24gKF8sIGRhdGEsIHNoYXJkSWQpIHtcbiAgICAvLyBSVU4gRElTUEFUQ0ggQ0hFQ0tcbiAgICBhd2FpdCBkaXNwYXRjaFJlcXVpcmVtZW50cyhib3QsIGRhdGEpO1xuICAgIC8vIFJVTiBPTEQgSEFORExFUlxuICAgIGhhbmRsZURpc2NvcmRQYXlsb2FkT2xkKF8sIGRhdGEsIHNoYXJkSWQpO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsb0JBQW9CLFFBQVEsMkJBQTJCLENBQUM7QUFFakUsNEVBQTRFLENBQzVFLE9BQU8sU0FBUyxtQkFBbUIsQ0FBZ0IsSUFBb0IsRUFBRTtJQUN2RSxJQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN0QixNQUFNLEVBQUUsU0FBVSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQW9CLEVBQUU7WUFDaEQsbUNBQW1DO1lBQ25DLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sS0FBSyxDQUFDO1lBRXRELG1GQUFtRjtZQUNuRixnREFBZ0Q7WUFDaEQsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFckMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELFFBQVEsRUFBRSxPQUFPO1FBQ2pCLEdBQUcsRUFBSCxJQUFHO0tBQ0osQ0FBQyxDQUFDO0lBQ0gsSUFBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDeEIsTUFBTSxFQUFFLFNBQVMsY0FBYyxDQUM3QixPQUFPLEVBQ1AsR0FBRyxFQUNILEdBQW9CLEVBQ3BCO1lBQ0EsdUZBQXVGO1lBQ3ZGLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDbEUsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3pDLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFFRCx1SEFBdUg7WUFDdkgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQztZQUUzRCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsUUFBUSxFQUFFLE9BQU87UUFDakIsR0FBRyxFQUFILElBQUc7S0FDSixDQUFDLENBQUM7SUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBRyxDQUFDLE9BQU8sQ0FBQyxBQUFDO0lBQ3BELElBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLFNBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRTtRQUN0QyxPQUFPLFNBQVMsQ0FBQyxFQUFFLEVBQUU7WUFDbkIsR0FBRyxNQUFNO1lBQ1QsUUFBUSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7U0FDckIsQ0FBVyxDQUFDO0tBQ2QsQ0FBQztJQUVGLElBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3ZCLE1BQU0sRUFBRSxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQW9CLEVBQUU7WUFDOUQsc0RBQXNEO1lBQ3RELElBQUksTUFBTSxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDO1lBRXZDLDZEQUE2RDtZQUM3RCxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxBQUFDLE1BQU0sQ0FBbUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztTQUNsRjtRQUNELFFBQVEsRUFBRSxNQUFNO1FBQ2hCLEdBQUcsRUFBSCxJQUFHO0tBQ0osQ0FBQyxDQUFDO0lBRUgsSUFBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDeEIsTUFBTSxFQUFFLFNBQVMsY0FBYyxDQUFDLE9BQU8sRUFBRTtZQUN2Qyw0QkFBNEI7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxJQUFJLENBQUM7WUFFbEMsNkNBQTZDO1lBQzdDLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1NBQ2hEO1FBQ0QsUUFBUSxFQUFFLE1BQU07UUFDaEIsR0FBRyxFQUFILElBQUc7S0FDSixDQUFDLENBQUM7SUFFSCxJQUFHLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUFFLE1BQU0sRUFBRSxJQUFNLElBQUk7UUFBQTtRQUFFLFFBQVEsRUFBRSxNQUFNO1FBQUUsR0FBRyxFQUFILElBQUc7S0FBRSxDQUFDLENBQUM7SUFFMUUsd0JBQXdCO0lBQ3hCLE1BQU0sdUJBQXVCLEdBQUcsSUFBRyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQUFBQztJQUNqRSxJQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixHQUFHLGVBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO1FBQ25FLHFCQUFxQjtRQUNyQixNQUFNLG9CQUFvQixDQUFDLElBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0QyxrQkFBa0I7UUFDbEIsdUJBQXVCLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUMzQyxDQUFDO0NBQ0gifQ==