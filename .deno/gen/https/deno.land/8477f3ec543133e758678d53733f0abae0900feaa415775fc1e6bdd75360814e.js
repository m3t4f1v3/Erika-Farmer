import { checkRateLimits } from "./checkRateLimits.ts";
import { cleanupQueues } from "./cleanupQueues.ts";
import { createRequestBody } from "./createRequestBody.ts";
import { processGlobalQueue } from "./processGlobalQueue.ts";
import { processQueue } from "./processQueue.ts";
import { processRateLimitedPaths } from "./processRateLimitedPaths.ts";
import { processRequest } from "./processRequest.ts";
import { processRequestHeaders } from "./processRequestHeaders.ts";
import { convertRestError } from "./convertRestError.ts";
import { runMethod } from "./runMethod.ts";
import { simplifyUrl } from "./simplifyUrl.ts";
import { baseEndpoints } from "../util/constants.ts";
import { API_VERSION } from "../util/constants.ts";
import { removeTokenPrefix } from "../util/token.ts";
export function createRestManager(options) {
    const version = options.version || API_VERSION;
    if (options.customUrl) {
        baseEndpoints.BASE_URL = `${options.customUrl}/v${version}`;
    }
    return {
        // current invalid amount
        invalidRequests: 0,
        // max invalid requests allowed until ban
        maxInvalidRequests: 10000,
        // 10 minutes
        invalidRequestsInterval: 600000,
        // timer to reset to 0
        invalidRequestsTimeoutId: 0,
        // how safe to be from max
        invalidRequestsSafetyAmount: 1,
        // when first request in this period was made
        invalidRequestFrozenAt: 0,
        invalidRequestErrorStatuses: [
            401,
            403,
            429
        ],
        version,
        token: removeTokenPrefix(options.token),
        maxRetryCount: options.maxRetryCount || 10,
        secretKey: options.secretKey || "discordeno_best_lib_ever",
        customUrl: options.customUrl || "",
        pathQueues: new Map(),
        processingQueue: false,
        processingRateLimitedPaths: false,
        globallyRateLimited: false,
        globalQueue: [],
        globalQueueProcessing: false,
        rateLimitedPaths: new Map(),
        debug: options.debug || function(_text) {},
        checkRateLimits: options.checkRateLimits || checkRateLimits,
        cleanupQueues: options.cleanupQueues || cleanupQueues,
        processQueue: options.processQueue || processQueue,
        processRateLimitedPaths: options.processRateLimitedPaths || processRateLimitedPaths,
        processRequestHeaders: options.processRequestHeaders || processRequestHeaders,
        processRequest: options.processRequest || processRequest,
        createRequestBody: options.createRequestBody || createRequestBody,
        runMethod: options.runMethod || runMethod,
        simplifyUrl: options.simplifyUrl || simplifyUrl,
        processGlobalQueue: options.processGlobalQueue || processGlobalQueue,
        convertRestError: options.convertRestError || convertRestError
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja1JhdGVMaW1pdHMgfSBmcm9tIFwiLi9jaGVja1JhdGVMaW1pdHMudHNcIjtcbmltcG9ydCB7IGNsZWFudXBRdWV1ZXMgfSBmcm9tIFwiLi9jbGVhbnVwUXVldWVzLnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVSZXF1ZXN0Qm9keSB9IGZyb20gXCIuL2NyZWF0ZVJlcXVlc3RCb2R5LnRzXCI7XG5pbXBvcnQgeyBwcm9jZXNzR2xvYmFsUXVldWUgfSBmcm9tIFwiLi9wcm9jZXNzR2xvYmFsUXVldWUudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NRdWV1ZSB9IGZyb20gXCIuL3Byb2Nlc3NRdWV1ZS50c1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMgfSBmcm9tIFwiLi9wcm9jZXNzUmF0ZUxpbWl0ZWRQYXRocy50c1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1JlcXVlc3QgfSBmcm9tIFwiLi9wcm9jZXNzUmVxdWVzdC50c1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1JlcXVlc3RIZWFkZXJzIH0gZnJvbSBcIi4vcHJvY2Vzc1JlcXVlc3RIZWFkZXJzLnRzXCI7XG5pbXBvcnQgeyBjb252ZXJ0UmVzdEVycm9yIH0gZnJvbSBcIi4vY29udmVydFJlc3RFcnJvci50c1wiO1xuaW1wb3J0IHsgUmVzdFBheWxvYWQsIFJlc3RSYXRlTGltaXRlZFBhdGgsIFJlc3RSZXF1ZXN0IH0gZnJvbSBcIi4vcmVzdC50c1wiO1xuaW1wb3J0IHsgcnVuTWV0aG9kIH0gZnJvbSBcIi4vcnVuTWV0aG9kLnRzXCI7XG5pbXBvcnQgeyBzaW1wbGlmeVVybCB9IGZyb20gXCIuL3NpbXBsaWZ5VXJsLnRzXCI7XG5pbXBvcnQgeyBiYXNlRW5kcG9pbnRzIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzLnRzXCI7XG5pbXBvcnQgeyBBUElfVkVSU0lPTiB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50cy50c1wiO1xuaW1wb3J0IHsgcmVtb3ZlVG9rZW5QcmVmaXggfSBmcm9tIFwiLi4vdXRpbC90b2tlbi50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVzdE1hbmFnZXIob3B0aW9uczogQ3JlYXRlUmVzdE1hbmFnZXJPcHRpb25zKSB7XG4gIGNvbnN0IHZlcnNpb24gPSBvcHRpb25zLnZlcnNpb24gfHwgQVBJX1ZFUlNJT047XG5cbiAgaWYgKG9wdGlvbnMuY3VzdG9tVXJsKSB7XG4gICAgYmFzZUVuZHBvaW50cy5CQVNFX1VSTCA9IGAke29wdGlvbnMuY3VzdG9tVXJsfS92JHt2ZXJzaW9ufWA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC8vIGN1cnJlbnQgaW52YWxpZCBhbW91bnRcbiAgICBpbnZhbGlkUmVxdWVzdHM6IDAsXG4gICAgLy8gbWF4IGludmFsaWQgcmVxdWVzdHMgYWxsb3dlZCB1bnRpbCBiYW5cbiAgICBtYXhJbnZhbGlkUmVxdWVzdHM6IDEwMDAwLFxuICAgIC8vIDEwIG1pbnV0ZXNcbiAgICBpbnZhbGlkUmVxdWVzdHNJbnRlcnZhbDogNjAwMDAwLFxuICAgIC8vIHRpbWVyIHRvIHJlc2V0IHRvIDBcbiAgICBpbnZhbGlkUmVxdWVzdHNUaW1lb3V0SWQ6IDAsXG4gICAgLy8gaG93IHNhZmUgdG8gYmUgZnJvbSBtYXhcbiAgICBpbnZhbGlkUmVxdWVzdHNTYWZldHlBbW91bnQ6IDEsXG4gICAgLy8gd2hlbiBmaXJzdCByZXF1ZXN0IGluIHRoaXMgcGVyaW9kIHdhcyBtYWRlXG4gICAgaW52YWxpZFJlcXVlc3RGcm96ZW5BdDogMCxcbiAgICBpbnZhbGlkUmVxdWVzdEVycm9yU3RhdHVzZXM6IFs0MDEsIDQwMywgNDI5XSxcbiAgICB2ZXJzaW9uLFxuICAgIHRva2VuOiByZW1vdmVUb2tlblByZWZpeChvcHRpb25zLnRva2VuKSxcbiAgICBtYXhSZXRyeUNvdW50OiBvcHRpb25zLm1heFJldHJ5Q291bnQgfHwgMTAsXG4gICAgc2VjcmV0S2V5OiBvcHRpb25zLnNlY3JldEtleSB8fCBcImRpc2NvcmRlbm9fYmVzdF9saWJfZXZlclwiLFxuICAgIGN1c3RvbVVybDogb3B0aW9ucy5jdXN0b21VcmwgfHwgXCJcIixcbiAgICBwYXRoUXVldWVzOiBuZXcgTWFwPFxuICAgICAgc3RyaW5nLFxuICAgICAge1xuICAgICAgICBpc1dhaXRpbmc6IGJvb2xlYW47XG4gICAgICAgIHJlcXVlc3RzOiB7XG4gICAgICAgICAgcmVxdWVzdDogUmVzdFJlcXVlc3Q7XG4gICAgICAgICAgcGF5bG9hZDogUmVzdFBheWxvYWQ7XG4gICAgICAgIH1bXTtcbiAgICAgIH1cbiAgICA+KCksXG4gICAgcHJvY2Vzc2luZ1F1ZXVlOiBmYWxzZSxcbiAgICBwcm9jZXNzaW5nUmF0ZUxpbWl0ZWRQYXRoczogZmFsc2UsXG4gICAgZ2xvYmFsbHlSYXRlTGltaXRlZDogZmFsc2UsXG4gICAgZ2xvYmFsUXVldWU6IFtdIGFzIHtcbiAgICAgIHJlcXVlc3Q6IFJlc3RSZXF1ZXN0O1xuICAgICAgcGF5bG9hZDogUmVzdFBheWxvYWQ7XG4gICAgICBiYXNpY1VSTDogc3RyaW5nO1xuICAgICAgdXJsVG9Vc2U6IHN0cmluZztcbiAgICB9W10sXG4gICAgZ2xvYmFsUXVldWVQcm9jZXNzaW5nOiBmYWxzZSxcbiAgICByYXRlTGltaXRlZFBhdGhzOiBuZXcgTWFwPHN0cmluZywgUmVzdFJhdGVMaW1pdGVkUGF0aD4oKSxcbiAgICBkZWJ1Zzogb3B0aW9ucy5kZWJ1ZyB8fCBmdW5jdGlvbiAoX3RleHQ6IHN0cmluZykge30sXG4gICAgY2hlY2tSYXRlTGltaXRzOiBvcHRpb25zLmNoZWNrUmF0ZUxpbWl0cyB8fCBjaGVja1JhdGVMaW1pdHMsXG4gICAgY2xlYW51cFF1ZXVlczogb3B0aW9ucy5jbGVhbnVwUXVldWVzIHx8IGNsZWFudXBRdWV1ZXMsXG4gICAgcHJvY2Vzc1F1ZXVlOiBvcHRpb25zLnByb2Nlc3NRdWV1ZSB8fCBwcm9jZXNzUXVldWUsXG4gICAgcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHM6IG9wdGlvbnMucHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMgfHwgcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMsXG4gICAgcHJvY2Vzc1JlcXVlc3RIZWFkZXJzOiBvcHRpb25zLnByb2Nlc3NSZXF1ZXN0SGVhZGVycyB8fCBwcm9jZXNzUmVxdWVzdEhlYWRlcnMsXG4gICAgcHJvY2Vzc1JlcXVlc3Q6IG9wdGlvbnMucHJvY2Vzc1JlcXVlc3QgfHwgcHJvY2Vzc1JlcXVlc3QsXG4gICAgY3JlYXRlUmVxdWVzdEJvZHk6IG9wdGlvbnMuY3JlYXRlUmVxdWVzdEJvZHkgfHwgY3JlYXRlUmVxdWVzdEJvZHksXG4gICAgcnVuTWV0aG9kOiBvcHRpb25zLnJ1bk1ldGhvZCB8fCBydW5NZXRob2QsXG4gICAgc2ltcGxpZnlVcmw6IG9wdGlvbnMuc2ltcGxpZnlVcmwgfHwgc2ltcGxpZnlVcmwsXG4gICAgcHJvY2Vzc0dsb2JhbFF1ZXVlOiBvcHRpb25zLnByb2Nlc3NHbG9iYWxRdWV1ZSB8fCBwcm9jZXNzR2xvYmFsUXVldWUsXG4gICAgY29udmVydFJlc3RFcnJvcjogb3B0aW9ucy5jb252ZXJ0UmVzdEVycm9yIHx8IGNvbnZlcnRSZXN0RXJyb3IsXG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlUmVzdE1hbmFnZXJPcHRpb25zIHtcbiAgdG9rZW46IHN0cmluZztcbiAgY3VzdG9tVXJsPzogc3RyaW5nO1xuICBtYXhSZXRyeUNvdW50PzogbnVtYmVyO1xuICB2ZXJzaW9uPzogbnVtYmVyO1xuICBzZWNyZXRLZXk/OiBzdHJpbmc7XG4gIGRlYnVnPzogKHRleHQ6IHN0cmluZykgPT4gdW5rbm93bjtcbiAgY2hlY2tSYXRlTGltaXRzPzogdHlwZW9mIGNoZWNrUmF0ZUxpbWl0cztcbiAgY2xlYW51cFF1ZXVlcz86IHR5cGVvZiBjbGVhbnVwUXVldWVzO1xuICBwcm9jZXNzUXVldWU/OiB0eXBlb2YgcHJvY2Vzc1F1ZXVlO1xuICBwcm9jZXNzUmF0ZUxpbWl0ZWRQYXRocz86IHR5cGVvZiBwcm9jZXNzUmF0ZUxpbWl0ZWRQYXRocztcbiAgcHJvY2Vzc1JlcXVlc3RIZWFkZXJzPzogdHlwZW9mIHByb2Nlc3NSZXF1ZXN0SGVhZGVycztcbiAgcHJvY2Vzc1JlcXVlc3Q/OiB0eXBlb2YgcHJvY2Vzc1JlcXVlc3Q7XG4gIGNyZWF0ZVJlcXVlc3RCb2R5PzogdHlwZW9mIGNyZWF0ZVJlcXVlc3RCb2R5O1xuICBydW5NZXRob2Q/OiB0eXBlb2YgcnVuTWV0aG9kO1xuICBzaW1wbGlmeVVybD86IHR5cGVvZiBzaW1wbGlmeVVybDtcbiAgcHJvY2Vzc0dsb2JhbFF1ZXVlPzogdHlwZW9mIHByb2Nlc3NHbG9iYWxRdWV1ZTtcbiAgY29udmVydFJlc3RFcnJvcj86IHR5cGVvZiBjb252ZXJ0UmVzdEVycm9yO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJTQUFTLGVBQWUsUUFBUSxzQkFBc0IsQ0FBQztBQUN2RCxTQUFTLGFBQWEsUUFBUSxvQkFBb0IsQ0FBQztBQUNuRCxTQUFTLGlCQUFpQixRQUFRLHdCQUF3QixDQUFDO0FBQzNELFNBQVMsa0JBQWtCLFFBQVEseUJBQXlCLENBQUM7QUFDN0QsU0FBUyxZQUFZLFFBQVEsbUJBQW1CLENBQUM7QUFDakQsU0FBUyx1QkFBdUIsUUFBUSw4QkFBOEIsQ0FBQztBQUN2RSxTQUFTLGNBQWMsUUFBUSxxQkFBcUIsQ0FBQztBQUNyRCxTQUFTLHFCQUFxQixRQUFRLDRCQUE0QixDQUFDO0FBQ25FLFNBQVMsZ0JBQWdCLFFBQVEsdUJBQXVCLENBQUM7QUFFekQsU0FBUyxTQUFTLFFBQVEsZ0JBQWdCLENBQUM7QUFDM0MsU0FBUyxXQUFXLFFBQVEsa0JBQWtCLENBQUM7QUFDL0MsU0FBUyxhQUFhLFFBQVEsc0JBQXNCLENBQUM7QUFDckQsU0FBUyxXQUFXLFFBQVEsc0JBQXNCLENBQUM7QUFDbkQsU0FBUyxpQkFBaUIsUUFBUSxrQkFBa0IsQ0FBQztBQUVyRCxPQUFPLFNBQVMsaUJBQWlCLENBQUMsT0FBaUMsRUFBRTtJQUNuRSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLFdBQVcsQUFBQztJQUUvQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7UUFDckIsYUFBYSxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUM3RDtJQUVELE9BQU87UUFDTCx5QkFBeUI7UUFDekIsZUFBZSxFQUFFLENBQUM7UUFDbEIseUNBQXlDO1FBQ3pDLGtCQUFrQixFQUFFLEtBQUs7UUFDekIsYUFBYTtRQUNiLHVCQUF1QixFQUFFLE1BQU07UUFDL0Isc0JBQXNCO1FBQ3RCLHdCQUF3QixFQUFFLENBQUM7UUFDM0IsMEJBQTBCO1FBQzFCLDJCQUEyQixFQUFFLENBQUM7UUFDOUIsNkNBQTZDO1FBQzdDLHNCQUFzQixFQUFFLENBQUM7UUFDekIsMkJBQTJCLEVBQUU7QUFBQyxlQUFHO0FBQUUsZUFBRztBQUFFLGVBQUc7U0FBQztRQUM1QyxPQUFPO1FBQ1AsS0FBSyxFQUFFLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDdkMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhLElBQUksRUFBRTtRQUMxQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsSUFBSSwwQkFBMEI7UUFDMUQsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRTtRQUNsQyxVQUFVLEVBQUUsSUFBSSxHQUFHLEVBU2hCO1FBQ0gsZUFBZSxFQUFFLEtBQUs7UUFDdEIsMEJBQTBCLEVBQUUsS0FBSztRQUNqQyxtQkFBbUIsRUFBRSxLQUFLO1FBQzFCLFdBQVcsRUFBRSxFQUFFO1FBTWYscUJBQXFCLEVBQUUsS0FBSztRQUM1QixnQkFBZ0IsRUFBRSxJQUFJLEdBQUcsRUFBK0I7UUFDeEQsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLElBQUksU0FBVSxLQUFhLEVBQUUsRUFBRTtRQUNuRCxlQUFlLEVBQUUsT0FBTyxDQUFDLGVBQWUsSUFBSSxlQUFlO1FBQzNELGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYSxJQUFJLGFBQWE7UUFDckQsWUFBWSxFQUFFLE9BQU8sQ0FBQyxZQUFZLElBQUksWUFBWTtRQUNsRCx1QkFBdUIsRUFBRSxPQUFPLENBQUMsdUJBQXVCLElBQUksdUJBQXVCO1FBQ25GLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsSUFBSSxxQkFBcUI7UUFDN0UsY0FBYyxFQUFFLE9BQU8sQ0FBQyxjQUFjLElBQUksY0FBYztRQUN4RCxpQkFBaUIsRUFBRSxPQUFPLENBQUMsaUJBQWlCLElBQUksaUJBQWlCO1FBQ2pFLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVM7UUFDekMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksV0FBVztRQUMvQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsa0JBQWtCLElBQUksa0JBQWtCO1FBQ3BFLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxnQkFBZ0I7S0FDL0QsQ0FBQztDQUNIIn0=