import { checkRateLimits } from "./checkRateLimits.ts";
import { cleanupQueues } from "./cleanupQueues.ts";
import { createRequestBody } from "./createRequestBody.ts";
import { processGlobalQueue } from "./processGlobalQueue.ts";
import { processQueue } from "./processQueue.ts";
import { processRateLimitedPaths } from "./processRateLimitedPaths.ts";
import { processRequest } from "./processRequest.ts";
import { processRequestHeaders } from "./processRequestHeaders.ts";
import { convertRestError } from "./convertRestError.ts";
import { runMethod } from "./runMethod.ts";
import { simplifyUrl } from "./simplifyUrl.ts";
import { baseEndpoints } from "../util/constants.ts";
import { API_VERSION } from "../util/constants.ts";
import { removeTokenPrefix } from "../util/token.ts";
export function createRestManager(options) {
    const version = options.version || API_VERSION;
    if (options.customUrl) {
        baseEndpoints.BASE_URL = `${options.customUrl}/v${version}`;
    }
    return {
        invalidRequests: 0,
        maxInvalidRequests: 10000,
        invalidRequestsInterval: 600000,
        invalidRequestsTimeoutId: 0,
        invalidRequestsSafetyAmount: 1,
        invalidRequestFrozenAt: 0,
        invalidRequestErrorStatuses: [401, 403, 429],
        version,
        token: removeTokenPrefix(options.token),
        maxRetryCount: options.maxRetryCount || 10,
        secretKey: options.secretKey || "discordeno_best_lib_ever",
        customUrl: options.customUrl || "",
        pathQueues: new Map(),
        processingQueue: false,
        processingRateLimitedPaths: false,
        globallyRateLimited: false,
        globalQueue: [],
        globalQueueProcessing: false,
        rateLimitedPaths: new Map(),
        debug: options.debug || function (_text) { },
        checkRateLimits: options.checkRateLimits || checkRateLimits,
        cleanupQueues: options.cleanupQueues || cleanupQueues,
        processQueue: options.processQueue || processQueue,
        processRateLimitedPaths: options.processRateLimitedPaths || processRateLimitedPaths,
        processRequestHeaders: options.processRequestHeaders || processRequestHeaders,
        processRequest: options.processRequest || processRequest,
        createRequestBody: options.createRequestBody || createRequestBody,
        runMethod: options.runMethod || runMethod,
        simplifyUrl: options.simplifyUrl || simplifyUrl,
        processGlobalQueue: options.processGlobalQueue || processGlobalQueue,
        convertRestError: options.convertRestError || convertRestError,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdE1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXN0TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXJELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxPQUFpQztJQUNqRSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLFdBQVcsQ0FBQztJQUUvQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7UUFDckIsYUFBYSxDQUFDLFFBQVEsR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEtBQUssT0FBTyxFQUFFLENBQUM7S0FDN0Q7SUFFRCxPQUFPO1FBRUwsZUFBZSxFQUFFLENBQUM7UUFFbEIsa0JBQWtCLEVBQUUsS0FBSztRQUV6Qix1QkFBdUIsRUFBRSxNQUFNO1FBRS9CLHdCQUF3QixFQUFFLENBQUM7UUFFM0IsMkJBQTJCLEVBQUUsQ0FBQztRQUU5QixzQkFBc0IsRUFBRSxDQUFDO1FBQ3pCLDJCQUEyQixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDNUMsT0FBTztRQUNQLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYSxJQUFJLEVBQUU7UUFDMUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLElBQUksMEJBQTBCO1FBQzFELFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUU7UUFDbEMsVUFBVSxFQUFFLElBQUksR0FBRyxFQVNoQjtRQUNILGVBQWUsRUFBRSxLQUFLO1FBQ3RCLDBCQUEwQixFQUFFLEtBQUs7UUFDakMsbUJBQW1CLEVBQUUsS0FBSztRQUMxQixXQUFXLEVBQUUsRUFLVjtRQUNILHFCQUFxQixFQUFFLEtBQUs7UUFDNUIsZ0JBQWdCLEVBQUUsSUFBSSxHQUFHLEVBQStCO1FBQ3hELEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxJQUFJLFVBQVUsS0FBYSxJQUFHLENBQUM7UUFDbkQsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlLElBQUksZUFBZTtRQUMzRCxhQUFhLEVBQUUsT0FBTyxDQUFDLGFBQWEsSUFBSSxhQUFhO1FBQ3JELFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWSxJQUFJLFlBQVk7UUFDbEQsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLHVCQUF1QixJQUFJLHVCQUF1QjtRQUNuRixxQkFBcUIsRUFBRSxPQUFPLENBQUMscUJBQXFCLElBQUkscUJBQXFCO1FBQzdFLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYyxJQUFJLGNBQWM7UUFDeEQsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixJQUFJLGlCQUFpQjtRQUNqRSxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsSUFBSSxTQUFTO1FBQ3pDLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVyxJQUFJLFdBQVc7UUFDL0Msa0JBQWtCLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixJQUFJLGtCQUFrQjtRQUNwRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCLElBQUksZ0JBQWdCO0tBQy9ELENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hlY2tSYXRlTGltaXRzIH0gZnJvbSBcIi4vY2hlY2tSYXRlTGltaXRzLnRzXCI7XG5pbXBvcnQgeyBjbGVhbnVwUXVldWVzIH0gZnJvbSBcIi4vY2xlYW51cFF1ZXVlcy50c1wiO1xuaW1wb3J0IHsgY3JlYXRlUmVxdWVzdEJvZHkgfSBmcm9tIFwiLi9jcmVhdGVSZXF1ZXN0Qm9keS50c1wiO1xuaW1wb3J0IHsgcHJvY2Vzc0dsb2JhbFF1ZXVlIH0gZnJvbSBcIi4vcHJvY2Vzc0dsb2JhbFF1ZXVlLnRzXCI7XG5pbXBvcnQgeyBwcm9jZXNzUXVldWUgfSBmcm9tIFwiLi9wcm9jZXNzUXVldWUudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NSYXRlTGltaXRlZFBhdGhzIH0gZnJvbSBcIi4vcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NSZXF1ZXN0IH0gZnJvbSBcIi4vcHJvY2Vzc1JlcXVlc3QudHNcIjtcbmltcG9ydCB7IHByb2Nlc3NSZXF1ZXN0SGVhZGVycyB9IGZyb20gXCIuL3Byb2Nlc3NSZXF1ZXN0SGVhZGVycy50c1wiO1xuaW1wb3J0IHsgY29udmVydFJlc3RFcnJvciB9IGZyb20gXCIuL2NvbnZlcnRSZXN0RXJyb3IudHNcIjtcbmltcG9ydCB7IFJlc3RQYXlsb2FkLCBSZXN0UmF0ZUxpbWl0ZWRQYXRoLCBSZXN0UmVxdWVzdCB9IGZyb20gXCIuL3Jlc3QudHNcIjtcbmltcG9ydCB7IHJ1bk1ldGhvZCB9IGZyb20gXCIuL3J1bk1ldGhvZC50c1wiO1xuaW1wb3J0IHsgc2ltcGxpZnlVcmwgfSBmcm9tIFwiLi9zaW1wbGlmeVVybC50c1wiO1xuaW1wb3J0IHsgYmFzZUVuZHBvaW50cyB9IGZyb20gXCIuLi91dGlsL2NvbnN0YW50cy50c1wiO1xuaW1wb3J0IHsgQVBJX1ZFUlNJT04gfSBmcm9tIFwiLi4vdXRpbC9jb25zdGFudHMudHNcIjtcbmltcG9ydCB7IHJlbW92ZVRva2VuUHJlZml4IH0gZnJvbSBcIi4uL3V0aWwvdG9rZW4udHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlc3RNYW5hZ2VyKG9wdGlvbnM6IENyZWF0ZVJlc3RNYW5hZ2VyT3B0aW9ucykge1xuICBjb25zdCB2ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uIHx8IEFQSV9WRVJTSU9OO1xuXG4gIGlmIChvcHRpb25zLmN1c3RvbVVybCkge1xuICAgIGJhc2VFbmRwb2ludHMuQkFTRV9VUkwgPSBgJHtvcHRpb25zLmN1c3RvbVVybH0vdiR7dmVyc2lvbn1gO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAvLyBjdXJyZW50IGludmFsaWQgYW1vdW50XG4gICAgaW52YWxpZFJlcXVlc3RzOiAwLFxuICAgIC8vIG1heCBpbnZhbGlkIHJlcXVlc3RzIGFsbG93ZWQgdW50aWwgYmFuXG4gICAgbWF4SW52YWxpZFJlcXVlc3RzOiAxMDAwMCxcbiAgICAvLyAxMCBtaW51dGVzXG4gICAgaW52YWxpZFJlcXVlc3RzSW50ZXJ2YWw6IDYwMDAwMCxcbiAgICAvLyB0aW1lciB0byByZXNldCB0byAwXG4gICAgaW52YWxpZFJlcXVlc3RzVGltZW91dElkOiAwLFxuICAgIC8vIGhvdyBzYWZlIHRvIGJlIGZyb20gbWF4XG4gICAgaW52YWxpZFJlcXVlc3RzU2FmZXR5QW1vdW50OiAxLFxuICAgIC8vIHdoZW4gZmlyc3QgcmVxdWVzdCBpbiB0aGlzIHBlcmlvZCB3YXMgbWFkZVxuICAgIGludmFsaWRSZXF1ZXN0RnJvemVuQXQ6IDAsXG4gICAgaW52YWxpZFJlcXVlc3RFcnJvclN0YXR1c2VzOiBbNDAxLCA0MDMsIDQyOV0sXG4gICAgdmVyc2lvbixcbiAgICB0b2tlbjogcmVtb3ZlVG9rZW5QcmVmaXgob3B0aW9ucy50b2tlbiksXG4gICAgbWF4UmV0cnlDb3VudDogb3B0aW9ucy5tYXhSZXRyeUNvdW50IHx8IDEwLFxuICAgIHNlY3JldEtleTogb3B0aW9ucy5zZWNyZXRLZXkgfHwgXCJkaXNjb3JkZW5vX2Jlc3RfbGliX2V2ZXJcIixcbiAgICBjdXN0b21Vcmw6IG9wdGlvbnMuY3VzdG9tVXJsIHx8IFwiXCIsXG4gICAgcGF0aFF1ZXVlczogbmV3IE1hcDxcbiAgICAgIHN0cmluZyxcbiAgICAgIHtcbiAgICAgICAgaXNXYWl0aW5nOiBib29sZWFuO1xuICAgICAgICByZXF1ZXN0czoge1xuICAgICAgICAgIHJlcXVlc3Q6IFJlc3RSZXF1ZXN0O1xuICAgICAgICAgIHBheWxvYWQ6IFJlc3RQYXlsb2FkO1xuICAgICAgICB9W107XG4gICAgICB9XG4gICAgPigpLFxuICAgIHByb2Nlc3NpbmdRdWV1ZTogZmFsc2UsXG4gICAgcHJvY2Vzc2luZ1JhdGVMaW1pdGVkUGF0aHM6IGZhbHNlLFxuICAgIGdsb2JhbGx5UmF0ZUxpbWl0ZWQ6IGZhbHNlLFxuICAgIGdsb2JhbFF1ZXVlOiBbXSBhcyB7XG4gICAgICByZXF1ZXN0OiBSZXN0UmVxdWVzdDtcbiAgICAgIHBheWxvYWQ6IFJlc3RQYXlsb2FkO1xuICAgICAgYmFzaWNVUkw6IHN0cmluZztcbiAgICAgIHVybFRvVXNlOiBzdHJpbmc7XG4gICAgfVtdLFxuICAgIGdsb2JhbFF1ZXVlUHJvY2Vzc2luZzogZmFsc2UsXG4gICAgcmF0ZUxpbWl0ZWRQYXRoczogbmV3IE1hcDxzdHJpbmcsIFJlc3RSYXRlTGltaXRlZFBhdGg+KCksXG4gICAgZGVidWc6IG9wdGlvbnMuZGVidWcgfHwgZnVuY3Rpb24gKF90ZXh0OiBzdHJpbmcpIHt9LFxuICAgIGNoZWNrUmF0ZUxpbWl0czogb3B0aW9ucy5jaGVja1JhdGVMaW1pdHMgfHwgY2hlY2tSYXRlTGltaXRzLFxuICAgIGNsZWFudXBRdWV1ZXM6IG9wdGlvbnMuY2xlYW51cFF1ZXVlcyB8fCBjbGVhbnVwUXVldWVzLFxuICAgIHByb2Nlc3NRdWV1ZTogb3B0aW9ucy5wcm9jZXNzUXVldWUgfHwgcHJvY2Vzc1F1ZXVlLFxuICAgIHByb2Nlc3NSYXRlTGltaXRlZFBhdGhzOiBvcHRpb25zLnByb2Nlc3NSYXRlTGltaXRlZFBhdGhzIHx8IHByb2Nlc3NSYXRlTGltaXRlZFBhdGhzLFxuICAgIHByb2Nlc3NSZXF1ZXN0SGVhZGVyczogb3B0aW9ucy5wcm9jZXNzUmVxdWVzdEhlYWRlcnMgfHwgcHJvY2Vzc1JlcXVlc3RIZWFkZXJzLFxuICAgIHByb2Nlc3NSZXF1ZXN0OiBvcHRpb25zLnByb2Nlc3NSZXF1ZXN0IHx8IHByb2Nlc3NSZXF1ZXN0LFxuICAgIGNyZWF0ZVJlcXVlc3RCb2R5OiBvcHRpb25zLmNyZWF0ZVJlcXVlc3RCb2R5IHx8IGNyZWF0ZVJlcXVlc3RCb2R5LFxuICAgIHJ1bk1ldGhvZDogb3B0aW9ucy5ydW5NZXRob2QgfHwgcnVuTWV0aG9kLFxuICAgIHNpbXBsaWZ5VXJsOiBvcHRpb25zLnNpbXBsaWZ5VXJsIHx8IHNpbXBsaWZ5VXJsLFxuICAgIHByb2Nlc3NHbG9iYWxRdWV1ZTogb3B0aW9ucy5wcm9jZXNzR2xvYmFsUXVldWUgfHwgcHJvY2Vzc0dsb2JhbFF1ZXVlLFxuICAgIGNvbnZlcnRSZXN0RXJyb3I6IG9wdGlvbnMuY29udmVydFJlc3RFcnJvciB8fCBjb252ZXJ0UmVzdEVycm9yLFxuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVJlc3RNYW5hZ2VyT3B0aW9ucyB7XG4gIHRva2VuOiBzdHJpbmc7XG4gIGN1c3RvbVVybD86IHN0cmluZztcbiAgbWF4UmV0cnlDb3VudD86IG51bWJlcjtcbiAgdmVyc2lvbj86IG51bWJlcjtcbiAgc2VjcmV0S2V5Pzogc3RyaW5nO1xuICBkZWJ1Zz86ICh0ZXh0OiBzdHJpbmcpID0+IHVua25vd247XG4gIGNoZWNrUmF0ZUxpbWl0cz86IHR5cGVvZiBjaGVja1JhdGVMaW1pdHM7XG4gIGNsZWFudXBRdWV1ZXM/OiB0eXBlb2YgY2xlYW51cFF1ZXVlcztcbiAgcHJvY2Vzc1F1ZXVlPzogdHlwZW9mIHByb2Nlc3NRdWV1ZTtcbiAgcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHM/OiB0eXBlb2YgcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHM7XG4gIHByb2Nlc3NSZXF1ZXN0SGVhZGVycz86IHR5cGVvZiBwcm9jZXNzUmVxdWVzdEhlYWRlcnM7XG4gIHByb2Nlc3NSZXF1ZXN0PzogdHlwZW9mIHByb2Nlc3NSZXF1ZXN0O1xuICBjcmVhdGVSZXF1ZXN0Qm9keT86IHR5cGVvZiBjcmVhdGVSZXF1ZXN0Qm9keTtcbiAgcnVuTWV0aG9kPzogdHlwZW9mIHJ1bk1ldGhvZDtcbiAgc2ltcGxpZnlVcmw/OiB0eXBlb2Ygc2ltcGxpZnlVcmw7XG4gIHByb2Nlc3NHbG9iYWxRdWV1ZT86IHR5cGVvZiBwcm9jZXNzR2xvYmFsUXVldWU7XG4gIGNvbnZlcnRSZXN0RXJyb3I/OiB0eXBlb2YgY29udmVydFJlc3RFcnJvcjtcbn1cbiJdfQ==