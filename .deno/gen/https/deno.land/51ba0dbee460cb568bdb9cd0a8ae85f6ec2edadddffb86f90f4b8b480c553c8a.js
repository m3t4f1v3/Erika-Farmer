import { GatewayOpcodes } from "../../types/shared.ts";
import { ShardSocketCloseCodes, ShardState } from "./types.ts";
export async function identify(shard) {
    if (shard.state === ShardState.Connected) {
        console.log("CLOSING EXISTING SHARD: #" + shard.id);
        shard.close(ShardSocketCloseCodes.ReIdentifying, "Re-identifying closure of old connection.");
    }
    shard.state = ShardState.Identifying;
    shard.events.identifying?.(shard);
    if (!shard.isOpen()) {
        await shard.connect();
    }
    await shard.requestIdentify();
    shard.send({
        op: GatewayOpcodes.Identify,
        d: {
            token: `Bot ${shard.gatewayConfig.token}`,
            compress: shard.gatewayConfig.compress,
            properties: shard.gatewayConfig.properties,
            intents: shard.gatewayConfig.intents,
            shard: [shard.id, shard.totalShards],
            presence: await shard.makePresence?.(shard.id),
        },
    }, true);
    return new Promise((resolve) => {
        shard.resolves.set("READY", () => {
            shard.events.identified?.(shard);
            resolve();
        });
        shard.resolves.set("INVALID_SESSION", () => {
            shard.resolves.delete("READY");
            resolve();
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpZGVudGlmeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFTLHFCQUFxQixFQUFFLFVBQVUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV0RSxNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxLQUFZO0lBR3pDLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUMsU0FBUyxFQUFFO1FBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELEtBQUssQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsYUFBYSxFQUFFLDJDQUEyQyxDQUFDLENBQUM7S0FDL0Y7SUFFRCxLQUFLLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7SUFDckMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUtsQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ25CLE1BQU0sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3ZCO0lBR0QsTUFBTSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFOUIsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNULEVBQUUsRUFBRSxjQUFjLENBQUMsUUFBUTtRQUMzQixDQUFDLEVBQUU7WUFDRCxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRTtZQUN6QyxRQUFRLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFRO1lBQ3RDLFVBQVUsRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVU7WUFDMUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTztZQUNwQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDcEMsUUFBUSxFQUFFLE1BQU0sS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDL0M7S0FDRixFQUFFLElBQUksQ0FBQyxDQUFDO0lBRVQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzdCLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDL0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqQyxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO1FBSUgsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYXRld2F5T3Bjb2RlcyB9IGZyb20gXCIuLi8uLi90eXBlcy9zaGFyZWQudHNcIjtcbmltcG9ydCB7IFNoYXJkLCBTaGFyZFNvY2tldENsb3NlQ29kZXMsIFNoYXJkU3RhdGUgfSBmcm9tIFwiLi90eXBlcy50c1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaWRlbnRpZnkoc2hhcmQ6IFNoYXJkKTogUHJvbWlzZTx2b2lkPiB7XG4gIC8vIEEgbmV3IGlkZW50aWZ5IGhhcyBiZWVuIHJlcXVlc3RlZCBldmVuIHRob3VnaCB0aGVyZSBpcyBhbHJlYWR5IGEgY29ubmVjdGlvbiBvcGVuLlxuICAvLyBUaGVyZWZvcmUgd2UgbmVlZCB0byBjbG9zZSB0aGUgb2xkIGNvbm5lY3Rpb24gYW5kIGhlYXJ0YmVhdGluZyBiZWZvcmUgY3JlYXRpbmcgYSBuZXcgb25lLlxuICBpZiAoc2hhcmQuc3RhdGUgPT09IFNoYXJkU3RhdGUuQ29ubmVjdGVkKSB7XG4gICAgY29uc29sZS5sb2coXCJDTE9TSU5HIEVYSVNUSU5HIFNIQVJEOiAjXCIgKyBzaGFyZC5pZCk7XG4gICAgc2hhcmQuY2xvc2UoU2hhcmRTb2NrZXRDbG9zZUNvZGVzLlJlSWRlbnRpZnlpbmcsIFwiUmUtaWRlbnRpZnlpbmcgY2xvc3VyZSBvZiBvbGQgY29ubmVjdGlvbi5cIik7XG4gIH1cblxuICBzaGFyZC5zdGF0ZSA9IFNoYXJkU3RhdGUuSWRlbnRpZnlpbmc7XG4gIHNoYXJkLmV2ZW50cy5pZGVudGlmeWluZz8uKHNoYXJkKTtcblxuICAvLyBJdCBpcyBwb3NzaWJsZSB0aGF0IHRoZSBzaGFyZCBpcyBpbiBIZWFydGJlYXRpbmcgc3RhdGUgYnV0IG5vdCBpZGVudGlmaWVkLFxuICAvLyBzbyBjaGVjayB3aGV0aGVyIHRoZXJlIGlzIGFscmVhZHkgYSBnYXRld2F5IGNvbm5lY3Rpb24gZXhpc3RpbmcuXG4gIC8vIElmIG5vdCB3ZSBuZWVkIHRvIGNyZWF0ZSBvbmUgYmVmb3JlIHdlIGlkZW50aWZ5LlxuICBpZiAoIXNoYXJkLmlzT3BlbigpKSB7XG4gICAgYXdhaXQgc2hhcmQuY29ubmVjdCgpO1xuICB9XG5cbiAgLy8gV2FpdCB1bnRpbCBhbiBpZGVudGlmeSBpcyBmcmVlIGZvciB0aGlzIHNoYXJkLlxuICBhd2FpdCBzaGFyZC5yZXF1ZXN0SWRlbnRpZnkoKTtcblxuICBzaGFyZC5zZW5kKHtcbiAgICBvcDogR2F0ZXdheU9wY29kZXMuSWRlbnRpZnksXG4gICAgZDoge1xuICAgICAgdG9rZW46IGBCb3QgJHtzaGFyZC5nYXRld2F5Q29uZmlnLnRva2VufWAsXG4gICAgICBjb21wcmVzczogc2hhcmQuZ2F0ZXdheUNvbmZpZy5jb21wcmVzcyxcbiAgICAgIHByb3BlcnRpZXM6IHNoYXJkLmdhdGV3YXlDb25maWcucHJvcGVydGllcyxcbiAgICAgIGludGVudHM6IHNoYXJkLmdhdGV3YXlDb25maWcuaW50ZW50cyxcbiAgICAgIHNoYXJkOiBbc2hhcmQuaWQsIHNoYXJkLnRvdGFsU2hhcmRzXSxcbiAgICAgIHByZXNlbmNlOiBhd2FpdCBzaGFyZC5tYWtlUHJlc2VuY2U/LihzaGFyZC5pZCksXG4gICAgfSxcbiAgfSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2hhcmQucmVzb2x2ZXMuc2V0KFwiUkVBRFlcIiwgKCkgPT4ge1xuICAgICAgc2hhcmQuZXZlbnRzLmlkZW50aWZpZWQ/LihzaGFyZCk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgLy8gV2hlbiBpZGVudGlmeWluZyB0b28gZmFzdCxcbiAgICAvLyBEaXNjb3JkIHNlbmRzIGFuIGludmFsaWQgc2Vzc2lvbiBwYXlsb2FkLlxuICAgIC8vIFRoaXMgY2FuIHNhZmVseSBiZSBpZ25vcmVkIHRob3VnaCBhbmQgdGhlIHNoYXJkIHN0YXJ0cyBhIG5ldyBpZGVudGlmeSBhY3Rpb24uXG4gICAgc2hhcmQucmVzb2x2ZXMuc2V0KFwiSU5WQUxJRF9TRVNTSU9OXCIsICgpID0+IHtcbiAgICAgIHNoYXJkLnJlc29sdmVzLmRlbGV0ZShcIlJFQURZXCIpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==