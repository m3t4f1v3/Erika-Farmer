export async function editChannel(bot, channelId, options, reason) {
    if (options.name || options.topic) {
        const request = editChannelNameTopicQueue.get(channelId);
        if (!request) {
            editChannelNameTopicQueue.set(channelId, {
                channelId: channelId,
                amount: 1,
                timestamp: Date.now() + 600000,
                items: [],
            });
        }
        else if (request.amount === 1) {
            request.amount = 2;
            request.timestamp = Date.now() + 600000;
        }
        else {
            return new Promise((resolve, reject) => {
                request.items.push({ channelId, options, resolve, reject });
                if (editChannelProcessing)
                    return;
                editChannelProcessing = true;
                processEditChannelQueue(bot);
            });
        }
    }
    const result = await bot.rest.runMethod(bot.rest, "PATCH", bot.constants.routes.CHANNEL(channelId), {
        name: options.name,
        topic: options.topic,
        bitrate: options.bitrate,
        user_limit: options.userLimit,
        rate_limit_per_user: options.rateLimitPerUser,
        position: options.position,
        parent_id: options.parentId === null ? null : options.parentId?.toString(),
        nsfw: options.nsfw,
        type: options.type,
        archived: options.archived,
        auto_archive_duration: options.autoArchiveDuration,
        locked: options.locked,
        invitable: options.invitable,
        permission_overwrites: options.permissionOverwrites
            ? options.permissionOverwrites?.map((overwrite) => ({
                id: overwrite.id.toString(),
                type: overwrite.type,
                allow: overwrite.allow ? bot.utils.calculateBits(overwrite.allow) : null,
                deny: overwrite.deny ? bot.utils.calculateBits(overwrite.deny) : null,
            }))
            : undefined,
        reason,
    });
    return bot.transformers.channel(bot, { channel: result, guildId: bot.transformers.snowflake(result.guild_id) });
}
const editChannelNameTopicQueue = new Map();
let editChannelProcessing = false;
function processEditChannelQueue(bot) {
    if (!editChannelProcessing)
        return;
    const now = Date.now();
    editChannelNameTopicQueue.forEach(async (request) => {
        bot.events.debug(`Running forEach loop in edit_channel file.`);
        if (now < request.timestamp)
            return;
        if (!request.items.length) {
            return editChannelNameTopicQueue.delete(request.channelId);
        }
        request.amount = 0;
        const details = request.items.shift();
        if (!details)
            return;
        await bot.helpers
            .editChannel(details.channelId, details.options)
            .then((result) => details.resolve(result))
            .catch(details.reject);
        const secondDetails = request.items.shift();
        if (!secondDetails)
            return;
        await bot.helpers
            .editChannel(secondDetails.channelId, secondDetails.options)
            .then((result) => secondDetails.resolve(result))
            .catch(secondDetails.reject);
        return;
    });
    if (editChannelNameTopicQueue.size) {
        setTimeout(() => {
            bot.events.debug(`Running setTimeout in EDIT_CHANNEL file.`);
            processEditChannelQueue(bot);
        }, 60000);
    }
    else {
        editChannelProcessing = false;
    }
}
//# sourceMappingURL=data:application/json;base64,