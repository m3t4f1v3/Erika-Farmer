export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"discord.js","sourceRoot":"","sources":["discord.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ActivityTypes,\n  AllowedMentionsTypes,\n  ApplicationCommandOptionTypes,\n  ApplicationCommandPermissionTypes,\n  ApplicationCommandTypes,\n  ApplicationFlags,\n  AuditLogEvents,\n  ButtonStyles,\n  ChannelFlags,\n  ChannelTypes,\n  DefaultMessageNotificationLevels,\n  EmbedTypes,\n  ExplicitContentFilterLevels,\n  GatewayEventNames,\n  GuildFeatures,\n  GuildNsfwLevel,\n  IntegrationExpireBehaviors,\n  InteractionTypes,\n  Locales,\n  Localization,\n  MessageActivityTypes,\n  MessageComponentTypes,\n  MessageTypes,\n  MfaLevels,\n  OverwriteTypes,\n  PickPartial,\n  PremiumTiers,\n  PremiumTypes,\n  ScheduledEventEntityType,\n  ScheduledEventPrivacyLevel,\n  ScheduledEventStatus,\n  StickerFormatTypes,\n  StickerTypes,\n  SystemChannelFlags,\n  TargetTypes,\n  TeamMembershipStates,\n  TextStyles,\n  UserFlags,\n  VerificationLevels,\n  VideoQualityModes,\n  VisibilityTypes,\n  WebhookTypes,\n} from \"./shared.ts\";\n\n/** https://discord.com/developers/docs/resources/user#user-object */\nexport interface DiscordUser {\n  /** The user's username, not unique across the platform */\n  username: string;\n  /** The user's chosen language option */\n  locale?: string;\n  /** The flags on a user's account */\n  flags?: UserFlags;\n  /** The type of Nitro subscription on a user's account */\n  premium_type?: PremiumTypes;\n  /** The public flags on a user's account */\n  public_flags?: UserFlags;\n  /** the user's banner color encoded as an integer representation of hexadecimal color code */\n  accent_color?: number;\n\n  /** The user's id */\n  id: string;\n  /** The user's 4-digit discord-tag */\n  discriminator: string;\n  /** The user's avatar hash */\n  avatar: string | null;\n  /** Whether the user belongs to an OAuth2 application */\n  bot?: boolean;\n  /** Whether the user is an Official Discord System user (part of the urgent message system) */\n  system?: boolean;\n  /** Whether the user has two factor enabled on their account */\n  mfa_enabled?: boolean;\n  /** Whether the email on this account has been verified */\n  verified?: boolean;\n  /** The user's email */\n  email?: string | null;\n  /** the user's banner, or null if unset */\n  banner?: string;\n}\n\n/** https://discord.com/developers/docs/resources/user#connection-object */\nexport interface DiscordConnection {\n  /** id of the connection account */\n  id: string;\n  /** The username of the connection account */\n  name: string;\n  /** The service of the connection (twitch, youtube) */\n  type: string;\n  /** Whether the connection is revoked */\n  revoked?: boolean;\n  /** Whether the connection is verified */\n  verified: boolean;\n  /** Whether friend sync is enabled for this connection */\n  friendSync: boolean;\n  /** Whether activities related to this connection will be shown in presence updates */\n  showActivity: boolean;\n  /** Visibility of this connection */\n  visibility: VisibilityTypes;\n\n  /** An array of partial server integrations */\n  integrations?: DiscordIntegration[];\n}\n\n/** https://discord.com/developers/docs/resources/guild#integration-object-integration-structure */\nexport interface DiscordIntegration {\n  /** Integration Id */\n  id: string;\n  /** Integration name */\n  name: string;\n  /** Integration type (twitch, youtube or discord) */\n  type: \"twitch\" | \"youtube\" | \"discord\";\n  /** Is this integration enabled */\n  enabled?: boolean;\n  /** Is this integration syncing */\n  syncing?: boolean;\n  /** Role Id that this integration uses for \"subscribers\" */\n  role_id?: string;\n  /** Whether emoticons should be synced for this integration (twitch only currently) */\n  enable_emoticons?: boolean;\n  /** The behavior of expiring subscribers */\n  expire_behavior?: IntegrationExpireBehaviors;\n  /** The grace period (in days) before expiring subscribers */\n  expire_grace_period?: number;\n  /** When this integration was last synced */\n  synced_at?: string;\n  /** How many subscribers this integration has */\n  subscriber_count?: number;\n  /** Has this integration been revoked */\n  revoked?: boolean;\n\n  /** User for this integration */\n  user?: DiscordUser;\n  /** Integration account information */\n  account: DiscordIntegrationAccount;\n  /** The bot/OAuth2 application for discord integrations */\n  application?: DiscordIntegrationApplication;\n}\n\n/** https://discord.com/developers/docs/resources/guild#integration-account-object-integration-account-structure */\nexport interface DiscordIntegrationAccount {\n  /** Id of the account */\n  id: string;\n  /** Name of the account */\n  name: string;\n}\n\n/** https://discord.com/developers/docs/resources/guild#integration-application-object-integration-application-structure */\nexport interface DiscordIntegrationApplication {\n  /** The id of the app */\n  id: string;\n  /** The name of the app */\n  name: string;\n  /** the icon hash of the app */\n  icon: string | null;\n  /** The description of the app */\n  description: string;\n\n  /** The bot associated with this application */\n  bot?: DiscordUser;\n}\n\n/** https://github.com/discord/discord-api-docs/blob/master/docs/topics/Gateway.md#integration-create-event-additional-fields */\nexport interface DiscordIntegrationCreateUpdate extends DiscordIntegration {\n  /** Id of the guild */\n  guild_id: string;\n}\n\n/** https://github.com/discord/discord-api-docs/blob/master/docs/topics/Gateway.md#integration-delete-event-fields */\nexport interface DiscordIntegrationDelete {\n  /** Integration id */\n  id: string;\n  /** Id of the guild */\n  guild_id: string;\n  /** Id of the bot/OAuth2 application for this discord integration */\n  application_id?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-integrations-update */\nexport interface DiscordGuildIntegrationsUpdate {\n  /** id of the guild whose integrations were updated */\n  guild_id: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#typing-start */\nexport interface DiscordTypingStart {\n  /** Unix time (in seconds) of when the user started typing */\n  timestamp: number;\n\n  /** id of the channel */\n  channel_id: string;\n  /** id of the guild */\n  guild_id?: string;\n  /** id of the user */\n  user_id: string;\n  /** The member who started typing if this happened in a guild */\n  member?: DiscordMember;\n}\n\n/** https://discord.com/developers/docs/resources/guild#guild-member-object */\nexport interface DiscordMember {\n  /** Whether the user is deafened in voice channels */\n  deaf?: boolean;\n  /** Whether the user is muted in voice channels */\n  mute?: boolean;\n  /** Whether the user has not yet passed the guild's Membership Screening requirements */\n  pending?: boolean;\n\n  /** The user this guild member represents */\n  user?: DiscordUser;\n  /** This users guild nickname */\n  nick?: string | null;\n  /** The members custom avatar for this server. */\n  avatar?: string;\n  /** Array of role object ids */\n  roles: string[];\n  /** When the user joined the guild */\n  joined_at: string;\n  /** When the user started boosting the guild */\n  premium_since?: string | null;\n  /** The permissions this member has in the guild. Only present on interaction events. */\n  permissions?: string;\n  /** when the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out */\n  communication_disabled_until?: string | null;\n}\n\n/** https://discord.com/developers/docs/topics/oauth2#application-object */\nexport interface DiscordApplication {\n  /** The name of the app */\n  name: string;\n  /** The description of the app */\n  description: string;\n  /** An array of rpc origin urls, if rpc is enabled */\n  rpc_origins?: string[];\n  /** The url of the app's terms of service */\n  terms_of_service_url?: string;\n  /** The url of the app's privacy policy */\n  privacy_policy_url?: string;\n  /** The hex encoded key for verification in interactions and the GameSDK's GetTicket */\n  verify_key: string;\n  /** If this application is a game sold on Discord, this field will be the id of the \"Game SKU\" that is created, if exists */\n  primary_sku_id?: string;\n  /** If this application is a game sold on Discord, this field will be the URL slug that links to the store page */\n  slug?: string;\n  /** The application's public flags */\n  flags?: ApplicationFlags;\n\n  /** The id of the app */\n  id: string;\n  /** The icon hash of the app */\n  icon: string | null;\n  /** When false only app owner can join the app's bot to guilds */\n  bot_public: boolean;\n  /** When true the app's bot will only join upon completion of the full oauth2 code grant flow */\n  bot_require_code_grant: boolean;\n  /** Partial user object containing info on the owner of the application */\n  owner?: Partial<DiscordUser>;\n  /** If the application belongs to a team, this will be a list of the members of that team */\n  team: DiscordTeam | null;\n  /** If this application is a game sold on Discord, this field will be the guild to which it has been linked */\n  guild_id?: string;\n  /** If this application is a game sold on Discord, this field will be the hash of the image on store embeds */\n  cover_image?: string;\n  /** up to 5 tags describing the content and functionality of the application */\n  tags?: string[];\n  /** settings for the application's default in-app authorization link, if enabled */\n  install_params?: DiscordInstallParams;\n  /** the application's default custom authorization link, if enabled */\n  custom_install_url?: string;\n}\n\n/** https://discord.com/developers/docs/topics/teams#data-models-team-object */\nexport interface DiscordTeam {\n  /** A hash of the image of the team's icon */\n  icon: string | null;\n  /** The unique id of the team */\n  id: string;\n  /** The members of the team */\n  members: DiscordTeamMember[];\n  /** The user id of the current team owner */\n  owner_user_id: string;\n  /** The name of the team */\n  name: string;\n}\n\n/** https://discord.com/developers/docs/topics/teams#data-models-team-members-object */\nexport interface DiscordTeamMember {\n  /** The user's membership state on the team */\n  membership_state: TeamMembershipStates;\n  /** Will always be `[\"*\"]` */\n  permissions: \"*\"[];\n\n  /** The id of the parent team of which they are a member */\n  team_id: string;\n  /** The avatar, discriminator, id, and username of the user */\n  user: Partial<DiscordUser> & Pick<DiscordUser, \"avatar\" | \"discriminator\" | \"id\" | \"username\">;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#webhooks-update-webhook-update-event-fields */\nexport interface DiscordWebhookUpdate {\n  /** id of the guild */\n  guild_id: string;\n  /** id of the channel */\n  channel_id: string;\n}\n\n/** https://discord.com/developers/docs/resources/channel#allowed-mentions-object */\nexport interface DiscordAllowedMentions {\n  /** An array of allowed mention types to parse from the content. */\n  parse?: AllowedMentionsTypes[];\n  /** For replies, whether to mention the author of the message being replied to (default false) */\n  repliedUser?: boolean;\n\n  /** Array of role_ids to mention (Max size of 100) */\n  roles?: string[];\n  /** Array of user_ids to mention (Max size of 100) */\n  users?: string[];\n}\n\n/** https://discord.com/developers/docs/resources/channel#embed-object */\nexport interface DiscordEmbed {\n  /** Title of embed */\n  title?: string;\n  /** Type of embed (always \"rich\" for webhook embeds) */\n  type?: EmbedTypes;\n  /** Description of embed */\n  description?: string;\n  /** Url of embed */\n  url?: string;\n  /** Color code of the embed */\n  color?: number;\n\n  /** Timestamp of embed content */\n  timestamp?: string;\n  /** Footer information */\n  footer?: DiscordEmbedFooter;\n  /** Image information */\n  image?: DiscordEmbedImage;\n  /** Thumbnail information */\n  thumbnail?: DiscordEmbedThumbnail;\n  /** Video information */\n  video?: DiscordEmbedVideo;\n  /** Provider information */\n  provider?: DiscordEmbedProvider;\n  /** Author information */\n  author?: DiscordEmbedAuthor;\n  /** Fields information */\n  fields?: DiscordEmbedField[];\n}\n\n/** https://discord.com/developers/docs/resources/channel#embed-object-embed-author-structure */\nexport interface DiscordEmbedAuthor {\n  /** Name of author */\n  name: string;\n  /** Url of author */\n  url?: string;\n  /** Url of author icon (only supports http(s) and attachments) */\n  icon_url?: string;\n  /** A proxied url of author icon */\n  proxy_icon_url?: string;\n}\n\n/** https://discord.com/developers/docs/resources/channel#embed-object-embed-field-structure */\nexport interface DiscordEmbedField {\n  /** Name of the field */\n  name: string;\n  /** Value of the field */\n  value: string;\n  /** Whether or not this field should display inline */\n  inline?: boolean;\n}\n\n/** https://discord.com/developers/docs/resources/channel#embed-object-embed-footer-structure */\nexport interface DiscordEmbedFooter {\n  /** Footer text */\n  text: string;\n  /** Url of footer icon (only supports http(s) and attachments) */\n  icon_url?: string;\n  /** A proxied url of footer icon */\n  proxy_icon_url?: string;\n}\n\n/** https://discord.com/developers/docs/resources/channel#embed-object-embed-image-structure */\nexport interface DiscordEmbedImage {\n  /** Source url of image (only supports http(s) and attachments) */\n  url: string;\n  /** A proxied url of the image */\n  proxy_url?: string;\n  /** Height of image */\n  height?: number;\n  /** Width of image */\n  width?: number;\n}\n\nexport interface DiscordEmbedProvider {\n  /** Name of provider */\n  name?: string;\n  /** Url of provider */\n  url?: string;\n}\n\n/** https://discord.com/developers/docs/resources/channel#embed-object-embed-thumbnail-structure */\nexport interface DiscordEmbedThumbnail {\n  /** Source url of thumbnail (only supports http(s) and attachments) */\n  url: string;\n  /** A proxied url of the thumbnail */\n  proxy_url?: string;\n  /** Height of thumbnail */\n  height?: number;\n  /** Width of thumbnail */\n  width?: number;\n}\n\n/** https://discord.com/developers/docs/resources/channel#embed-object-embed-video-structure */\nexport interface DiscordEmbedVideo {\n  /** Source url of video */\n  url?: string;\n  /** A proxied url of the video */\n  proxy_url?: string;\n  /** Height of video */\n  height?: number;\n  /** Width of video */\n  width?: number;\n}\n\n/** https://discord.com/developers/docs/resources/channel#attachment-object */\nexport interface DiscordAttachment {\n  /** Name of file attached */\n  filename: string;\n  /** The attachment's [media type](https://en.wikipedia.org/wiki/Media_type) */\n  content_type?: string;\n  /** Size of file in bytes */\n  size: number;\n  /** Source url of file */\n  url: string;\n  /** A proxied url of file */\n  proxy_url: string;\n\n  /** Attachment id */\n  id: string;\n  /** Height of file (if image) */\n  height?: number | null;\n  /** Width of file (if image) */\n  width?: number | null;\n  /** whether this attachment is ephemeral. Ephemeral attachments will automatically be removed after a set period of time. Ephemeral attachments on messages are guaranteed to be available as long as the message itself exists. */\n  ephemeral?: boolean;\n}\n\n/** https://discord.com/developers/docs/resources/webhook#webhook-object-webhook-structure */\nexport type DiscordWebhook = DiscordIncomingWebhook | DiscordApplicationWebhook;\n\nexport interface DiscordIncomingWebhook {\n  /** The type of the webhook */\n  type: WebhookTypes;\n  /** The secure token of the webhook (returned for Incoming Webhooks) */\n  token?: string;\n  /** The url used for executing the webhook (returned by the webhooks OAuth2 flow) */\n  url?: string;\n\n  /** The id of the webhook */\n  id: string;\n  /** The guild id this webhook is for */\n  guild_id?: string;\n  /** The channel id this webhook is for */\n  channel_id: string;\n  /** The user this webhook was created by (not returned when getting a webhook with its token) */\n  user?: DiscordUser;\n  /** The default name of the webhook */\n  name: string | null;\n  /** The default user avatar hash of the webhook */\n  avatar: string | null;\n  /** The bot/OAuth2 application that created this webhook */\n  application_id: string | null;\n  /** The guild of the channel that this webhook is following (returned for Channel Follower Webhooks) */\n  source_guild?: Partial<DiscordGuild>;\n  /** The channel that this webhook is following (returned for Channel Follower Webhooks) */\n  source_channel?: Partial<DiscordChannel>;\n}\n\nexport interface DiscordApplicationWebhook {\n  /** The type of the webhook */\n  type: WebhookTypes.Application;\n  /** The secure token of the webhook (returned for Incoming Webhooks) */\n  token?: string;\n  /** The url used for executing the webhook (returned by the webhooks OAuth2 flow) */\n  url?: string;\n\n  /** The id of the webhook */\n  id: string;\n  /** The guild id this webhook is for */\n  guild_id?: string | null;\n  /** The channel id this webhook is for */\n  channel_id?: string | null;\n  /** The user this webhook was created by (not returned when getting a webhook with its token) */\n  user?: DiscordUser;\n  /** The default name of the webhook */\n  name: string | null;\n  /** The default user avatar hash of the webhook */\n  avatar: string | null;\n  /** The bot/OAuth2 application that created this webhook */\n  application_id: string | null;\n  /** The guild of the channel that this webhook is following (returned for Channel Follower Webhooks) */\n  source_guild?: Partial<DiscordGuild>;\n  /** The channel that this webhook is following (returned for Channel Follower Webhooks) */\n  source_channel?: Partial<DiscordChannel>;\n}\n\n/** https://discord.com/developers/docs/resources/guild#guild-object */\nexport interface DiscordGuild {\n  /** Guild name (2-100 characters, excluding trailing and leading whitespace) */\n  name: string;\n  /** True if the user is the owner of the guild */\n  owner?: boolean;\n  /** Afk timeout in seconds */\n  afk_timeout: number;\n  /** True if the server widget is enabled */\n  widget_enabled?: boolean;\n  /** Verification level required for the guild */\n  verification_level: VerificationLevels;\n  /** Default message notifications level */\n  default_message_notifications: DefaultMessageNotificationLevels;\n  /** Explicit content filter level */\n  explicit_content_filter: ExplicitContentFilterLevels;\n  /** Enabled guild features */\n  features: GuildFeatures[];\n  /** Required MFA level for the guild */\n  mfa_level: MfaLevels;\n  /** System channel flags */\n  system_channel_flags: SystemChannelFlags;\n  /** True if this is considered a large guild */\n  large?: boolean;\n  /** True if this guild is unavailable due to an outage */\n  unavailable?: boolean;\n  /** Total number of members in this guild */\n  member_count?: number;\n  /** The maximum number of presences for the guild (the default value, currently 25000, is in effect when null is returned) */\n  max_presences?: number | null;\n  /** The maximum number of members for the guild */\n  max_members?: number;\n  /** The vanity url code for the guild */\n  vanity_url_code: string | null;\n  /** The description of a guild */\n  description: string | null;\n  /** Premium tier (Server Boost level) */\n  premium_tier: PremiumTiers;\n  /** The number of boosts this guild currently has */\n  premium_subscription_count?: number;\n  /** The maximum amount of users in a video channel */\n  max_video_channel_users?: number;\n  /** Approximate number of members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true */\n  approximate_member_count?: number;\n  /**\tApproximate number of non-offline members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true */\n  approximate_presence_count?: number;\n  /** Guild NSFW level */\n  nsfw_level: GuildNsfwLevel;\n  /** Whether the guild has the boost progress bar enabled */\n  premium_progress_bar_enabled: boolean;\n\n  /** Guild id */\n  id: string;\n  /** Icon hash */\n  icon: string | null;\n  /** Icon hash, returned when in the template object */\n  icon_hash?: string | null;\n  /** Splash hash */\n  splash: string | null;\n  /** Discovery splash hash; only present for guilds with the \"DISCOVERABLE\" feature */\n  discovery_splash: string | null;\n  /** Id of the owner */\n  owner_id: string;\n  /** Total permissions for the user in the guild (excludes overwrites) */\n  permissions?: string;\n  /** Id of afk channel */\n  afk_channel_id: string | null;\n  /** The channel id that the widget will generate an invite to, or null if set to no invite */\n  widget_channel_id?: string | null;\n  /** Roles in the guild */\n  roles: DiscordRole[];\n  /** Custom guild emojis */\n  emojis: DiscordEmoji[];\n  /** Application id of the guild creator if it is bot-created */\n  application_id: string | null;\n  /** The id of the channel where guild notices such as welcome messages and boost events are posted */\n  system_channel_id: string | null;\n  /** The id of the channel where community guilds can display rules and/or guidelines */\n  rules_channel_id: string | null;\n  /** When this guild was joined at */\n  joined_at?: string;\n  /** States of members currently in voice channels; lacks the guild_id key */\n  voice_states?: Omit<DiscordVoiceState, \"guildId\">[];\n  /** Users in the guild */\n  members?: DiscordMember[];\n  /** Channels in the guild */\n  channels?: DiscordChannel[];\n  // TODO: check if need to omit\n  /** All active threads in the guild that the current user has permission to view */\n  threads?: DiscordChannel[];\n  /** Presences of the members in the guild, will only include non-offline members if the size is greater than large threshold */\n  presences?: Partial<DiscordPresenceUpdate>[];\n  /** Banner hash */\n  banner: string | null;\n  // TODO: Can be optimized to a number but is it worth it?\n  /** The preferred locale of a Community guild; used in server discovery and notices from Discord; defaults to \"en-US\" */\n  preferred_locale: string;\n  /** The id of the channel where admins and moderators of Community guilds receive notices from Discord */\n  public_updates_channel_id: string | null;\n  /** The welcome screen of a Community guild, shown to new members, returned in an Invite's guild object */\n  welcome_screen?: DiscordWelcomeScreen;\n  /** Stage instances in the guild */\n  stage_instances?: DiscordStageInstance[];\n}\n\n/** https://discord.com/developers/docs/topics/permissions#role-object-role-structure */\nexport interface DiscordRole {\n  /** Role id */\n  id: string;\n  /** If this role is showed separately in the user listing */\n  hoist: boolean;\n  /** Permission bit set */\n  permissions: string;\n  /** Whether this role is managed by an integration */\n  managed: boolean;\n  /** Whether this role is mentionable */\n  mentionable: boolean;\n  /** The tags this role has */\n  tags?: DiscordRoleTags;\n  /** the role emoji hash */\n  icon?: string;\n  /** Role name */\n  name: string;\n  /** Integer representation of hexadecimal color code */\n  color: number;\n  /** Position of this role */\n  position: number;\n  /** role unicode emoji */\n  unicode_emoji?: string;\n}\n\n/** https://discord.com/developers/docs/topics/permissions#role-object-role-tags-structure */\nexport interface DiscordRoleTags {\n  /** The id of the bot this role belongs to */\n  bot_id?: string;\n  /** The id of the integration this role belongs to */\n  integration_id?: string;\n  /** Whether this is the guild's premium subscriber role */\n  premium_subscriber?: null;\n}\n\n/** https://discord.com/developers/docs/resources/emoji#emoji-object-emoji-structure */\nexport interface DiscordEmoji {\n  /** Emoji name (can only be null in reaction emoji objects) */\n  name?: string;\n\n  /** Emoji id */\n  id?: string;\n  /** Roles allowed to use this emoji */\n  roles?: string[];\n  /** User that created this emoji */\n  user?: DiscordUser;\n  /** Whether this emoji must be wrapped in colons */\n  require_colons?: boolean;\n  /** Whether this emoji is managed */\n  managed?: boolean;\n  /** Whether this emoji is animated */\n  animated?: boolean;\n  /** Whether this emoji can be used, may be false due to loss of Server Boosts */\n  available?: boolean;\n}\n\n/** https://discord.com/developers/docs/resources/voice#voice-state-object-voice-state-structure */\nexport interface DiscordVoiceState {\n  /** The session id for this voice state */\n  session_id: string;\n\n  /** The guild id this voice state is for */\n  guild_id?: string;\n  /** The channel id this user is connected to */\n  channel_id: string | null;\n  /** The user id this voice state is for */\n  user_id: string;\n  /** The guild member this voice state is for */\n  member?: DiscordMemberWithUser;\n  /** Whether this user is deafened by the server */\n  deaf: boolean;\n  /** Whether this user is muted by the server */\n  mute: boolean;\n  /** Whether this user is locally deafened */\n  self_deaf: boolean;\n  /** Whether this user is locally muted */\n  self_mute: boolean;\n  /** Whether this user is streaming using \"Go Live\" */\n  self_stream?: boolean;\n  /** Whether this user's camera is enabled */\n  self_video: boolean;\n  /** Whether this user is muted by the current user */\n  suppress: boolean;\n  /** The time at which the user requested to speak */\n  request_to_speak_timestamp: string | null;\n}\n\n/** https://discord.com/developers/docs/resources/channel#channel-object */\nexport interface DiscordChannel {\n  /** The type of channel */\n  type: ChannelTypes;\n  /** The flags of the channel */\n  flags?: ChannelFlags;\n  /** Sorting position of the channel */\n  position?: number;\n  /** The name of the channel (1-100 characters) */\n  name?: string;\n  /** The channel topic (0-1024 characters) */\n  topic?: string | null;\n  /** The bitrate (in bits) of the voice channel */\n  bitrate?: number;\n  /** The user limit of the voice channel */\n  user_limit?: number;\n  /** Amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission `manage_messages` or `manage_channel`, are unaffected */\n  rate_limit_per_user?: number;\n  /** Voice region id for the voice channel, automatic when set to null */\n  rtc_region?: string | null;\n  /** The camera video quality mode of the voice channel, 1 when not present */\n  video_quality_mode?: VideoQualityModes;\n  /** An approximate count of messages in a thread, stops counting at 50 */\n  message_count?: number;\n  /** An approximate count of users in a thread, stops counting at 50 */\n  member_count?: number;\n  /** Default duration for newly created threads, in minutes, to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080 */\n  default_auto_archive_duration?: number;\n\n  /** The id of the channel */\n  id: string;\n  /** The id of the guild */\n  guild_id?: string;\n  /** Explicit permission overwrites for members and roles */\n  permission_overwrites?: DiscordOverwrite[];\n  /** Whether the channel is nsfw */\n  nsfw?: boolean;\n  /** The id of the last message sent in this channel (may not point to an existing or valid message) */\n  last_message_id?: string | null;\n  /** Id of the creator of the thread */\n  owner_id?: string;\n  /** Application id of the group DM creator if it is bot-created */\n  application_id?: string;\n  /** For guild channels: Id of the parent category for a channel (each parent category can contain up to 50 channels), for threads: id of the text channel this thread was created */\n  parent_id?: string | null;\n  /** When the last pinned message was pinned. This may be null in events such as GUILD_CREATE when a message is not pinned. */\n  last_pin_timestamp?: string | null;\n  /** Thread-specific fields not needed by other channels */\n  thread_metadata?: DiscordThreadMetadata;\n  /** Thread member object for the current user, if they have joined the thread, only included on certain API endpoints */\n  member?: DiscordThreadMember;\n  /** computed permissions for the invoking user in the channel, including overwrites, only included when part of the resolved data received on a application command interaction */\n  permissions?: string;\n  /** When a thread is created this will be true on that channel payload for the thread. */\n  newly_created?: boolean;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#presence-update */\nexport interface DiscordPresenceUpdate {\n  /** Either \"idle\", \"dnd\", \"online\", or \"offline\" */\n  status: \"idle\" | \"dnd\" | \"online\" | \"offline\";\n  /** The user presence is being updated for */\n  user: DiscordUser;\n  /** id of the guild */\n  guild_id: string;\n  /** User's current activities */\n  activities: DiscordActivity[];\n  /** User's platform-dependent status */\n  client_status: DiscordClientStatus;\n}\n\n/** https://discord.com/developers/docs/resources/guild#welcome-screen-object-welcome-screen-structure */\nexport interface DiscordWelcomeScreen {\n  /** The server description shown in the welcome screen */\n  description: string | null;\n  /** The channels shown in the welcome screen, up to 5 */\n  welcome_channels: DiscordWelcomeScreenChannel[];\n}\n\n/** https://discord.com/developers/docs/resources/guild#welcome-screen-object-welcome-screen-channel-structure */\nexport interface DiscordWelcomeScreenChannel {\n  /** The description shown for the channel */\n  description: string;\n\n  /** The channel's id */\n  channel_id: string;\n  /** The emoji id, if the emoji is custom */\n  emoji_id: string | null;\n  /** The emoji name if custom, the unicode character if standard, or `null` if no emoji is set */\n  emoji_name: string | null;\n}\n\n/** https://discord.com/developers/docs/resources/stage-instance#auto-closing-stage-instance-structure */\nexport interface DiscordStageInstance {\n  /** The topic of the Stage instance (1-120 characters) */\n  topic: string;\n  /** The id of this Stage instance */\n  id: string;\n  /** The guild id of the associated Stage channel */\n  guild_id: string;\n  /** The id of the associated Stage channel */\n  channel_id: string;\n  /** The id of the scheduled event for this Stage instance */\n  guild_scheduled_event_id?: string;\n}\n\nexport interface DiscordThreadMetadata {\n  /** Whether the thread is archived */\n  archived: boolean;\n  /** Duration in minutes to automatically archive the thread after recent activity */\n  auto_archive_duration: 60 | 1440 | 4320 | 10080;\n  /** When a thread is locked, only users with `MANAGE_THREADS` can unarchive it */\n  locked: boolean;\n  /** whether non-moderators can add other non-moderators to a thread; only available on private threads */\n  invitable?: boolean;\n  /** Timestamp when the thread's archive status was last changed, used for calculating recent activity */\n  archive_timestamp: string;\n  /** Timestamp when the thread was created; only populated for threads created after 2022-01-09 */\n  create_timestamp?: string | null;\n}\n\nexport interface DiscordThreadMemberBase {\n  /** Any user-thread settings, currently only used for notifications */\n  flags: number;\n}\n\nexport interface DiscordThreadMember {\n  /** Any user-thread settings, currently only used for notifications */\n  flags: number;\n  /** The id of the thread */\n  id: string;\n  /** The id of the user */\n  user_id: string;\n  /** The time the current user last joined the thread */\n  join_timestamp: string;\n}\n\nexport interface DiscordThreadMemberGuildCreate {\n  /** Any user-thread settings, currently only used for notifications */\n  flags: number;\n  /** The time the current user last joined the thread */\n  join_timestamp: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#activity-object */\nexport interface DiscordActivity {\n  /** The activity's name */\n  name: string;\n  /** Activity type */\n  type: ActivityTypes;\n  /** Stream url, is validated when type is 1 */\n  url?: string | null;\n  /** Unix timestamp of when the activity was added to the user's session */\n  created_at: number;\n  /** What the player is currently doing */\n  details?: string | null;\n  /** The user's current party status */\n  state?: string | null;\n  /** Whether or not the activity is an instanced game session */\n  instance?: boolean;\n  /** Activity flags `OR`d together, describes what the payload includes */\n  flags?: number;\n  /** Unix timestamps for start and/or end of the game */\n  timestamps?: DiscordActivityTimestamps;\n  /** Application id for the game */\n  application_id?: string;\n  /** The emoji used for a custom status */\n  emoji?: DiscordActivityEmoji | null;\n  /** Information for the current party of the player */\n  party?: DiscordActivityParty;\n  /** Images for the presence and their hover texts */\n  assets?: DiscordActivityAssets;\n  /** Secrets for Rich Presence joining and spectating */\n  secrets?: DiscordActivitySecrets;\n  /** The custom buttons shown in the Rich Presence (max 2) */\n  buttons?: DiscordActivityButton[];\n}\n\n/** https://discord.com/developers/docs/topics/gateway#client-status-object */\nexport interface DiscordClientStatus {\n  /** The user's status set for an active desktop (Windows, Linux, Mac) application session */\n  desktop?: string;\n  /** The user's status set for an active mobile (iOS, Android) application session */\n  mobile?: string;\n  /** The user's status set for an active web (browser, bot account) application session */\n  web?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#activity-object-activity-timestamps */\nexport interface DiscordActivityTimestamps {\n  /** Unix time (in milliseconds) of when the activity started */\n  start?: number;\n  /** Unix time (in milliseconds) of when the activity ends */\n  end?: number;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#activity-object-activity-emoji */\nexport interface DiscordActivityEmoji {\n  /** The name of the emoji */\n  name: string;\n  /** Whether this emoji is animated */\n  animated?: boolean;\n  /** The id of the emoji */\n  id?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#activity-object-activity-party */\nexport interface DiscordActivityParty {\n  /** Used to show the party's current and maximum size */\n  size?: [currentSize: number, maxSize: number];\n  /** The id of the party */\n  id?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#activity-object-activity-assets */\nexport interface DiscordActivityAssets {\n  /** Text displayed when hovering over the large image of the activity */\n  large_text?: string;\n  /** Text displayed when hovering over the small image of the activity */\n  small_text?: string;\n  /** The id for a large asset of the activity, usually a snowflake */\n  large_image?: string;\n  /** The id for a small asset of the activity, usually a snowflake */\n  small_image?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#activity-object-activity-secrets */\nexport interface DiscordActivitySecrets {\n  /** The secret for joining a party */\n  join?: string;\n  /** The secret for spectating a game */\n  spectate?: string;\n  /** The secret for a specific instanced match */\n  match?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#activity-object-activity-buttons */\nexport interface DiscordActivityButton {\n  /** The text shown on the button (1-32 characters) */\n  label: string;\n  /** The url opened when clicking the button (1-512 characters) */\n  url: string;\n}\n\nexport interface DiscordOverwrite {\n  /** Either 0 (role) or 1 (member) */\n  type: OverwriteTypes;\n  /** Role or user id */\n  id: string;\n  /** Permission bit set */\n  allow?: string;\n  /** Permission bit set */\n  deny?: string;\n}\n\nexport interface DiscordMemberWithUser extends DiscordMember {\n  /** The user object for this member */\n  user: DiscordUser;\n}\n\n/** https://discord.com/developers/docs/resources/channel#message-object */\nexport interface DiscordMessage {\n  /** id of the message */\n  id: string;\n  /** id of the channel the message was sent in */\n  channel_id: string;\n  /**\n   * id of the guild the message was sent in\n   * Note: For MESSAGE_CREATE and MESSAGE_UPDATE events, the message object may not contain a guild_id or member field since the events are sent directly to the receiving user and the bot who sent the message, rather than being sent through the guild like non-ephemeral messages.\n   */\n  guild_id?: string;\n  /**\n   * The author of this message (not guaranteed to be a valid user)\n   * Note: The author object follows the structure of the user object, but is only a valid user in the case where the message is generated by a user or bot user. If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar. You can tell if a message is generated by a webhook by checking for the webhook_id on the message object.\n   */\n  author: DiscordUser;\n  /**\n   * Member properties for this message's author\n   * Note: The member object exists in `MESSAGE_CREATE` and `MESSAGE_UPDATE` events from text-based guild channels. This allows bots to obtain real-time member data without requiring bots to store member state in memory.\n   */\n  member?: DiscordMember;\n  /** Contents of the message */\n  content?: string;\n  /** When this message was sent */\n  timestamp: string;\n  /** When this message was edited (or null if never) */\n  edited_timestamp: string | null;\n  /** Whether this was a TTS message */\n  tts: boolean;\n  /** Whether this message mentions everyone */\n  mention_everyone: boolean;\n  /**\n   * Users specifically mentioned in the message\n   * Note: The user objects in the mentions array will only have the partial member field present in `MESSAGE_CREATE` and `MESSAGE_UPDATE` events from text-based guild channels.\n   */\n  mentions?: (DiscordUser & { member?: Partial<DiscordMember> })[];\n  /** Roles specifically mentioned in this message */\n  mention_roles?: string[];\n  /**\n   * Channels specifically mentioned in this message\n   * Note: Not all channel mentions in a message will appear in `mention_channels`. Only textual channels that are visible to everyone in a lurkable guild will ever be included. Only crossposted messages (via Channel Following) currently include `mention_channels` at all. If no mentions in the message meet these requirements, this field will not be sent.\n   */\n  mention_channels?: DiscordChannelMention[];\n  /** Any attached files */\n  attachments: DiscordAttachment[];\n  /** Any embedded content */\n  embeds: DiscordEmbed[];\n  /** Reactions to the message */\n  reactions?: DiscordReaction[];\n  /** Used for validating a message was sent */\n  nonce?: number | string;\n  /** Whether this message is pinned */\n  pinned: boolean;\n  /** If the message is generated by a webhook, this is the webhook's id */\n  webhook_id?: string;\n  /** Type of message */\n  type: MessageTypes;\n  /** Sent with Rich Presence-related chat embeds */\n  activity?: DiscordMessageActivity;\n  /** Sent with Rich Presence-related chat embeds */\n  application?: Partial<DiscordApplication>;\n  /** if the message is an Interaction or application-owned webhook, this is the id of the application */\n  application_id?: string;\n  /** Data showing the source of a crossposted channel follow add, pin or reply message */\n  message_reference?: Omit<DiscordMessageReference, \"failIfNotExists\">;\n  /** Message flags combined as a bitfield */\n  flags?: number;\n  /**\n   * The stickers sent with the message (bots currently can only receive messages with stickers, not send)\n   * @deprecated\n   */\n  stickers?: DiscordSticker[];\n  /**\n   * The message associated with the `message_reference`\n   * Note: This field is only returned for messages with a `type` of `19` (REPLY). If the message is a reply but the `referenced_message` field is not present, the backend did not attempt to fetch the message that was being replied to, so its state is unknown. If the field exists but is null, the referenced message was deleted.\n   */\n  referenced_message?: DiscordMessage;\n  /** Sent if the message is a response to an Interaction */\n  interaction?: DiscordMessageInteraction;\n  /** The thread that was started from this message, includes thread member object */\n  thread?: Omit<DiscordChannel, \"member\"> & { member: DiscordThreadMember };\n  /** The components related to this message */\n  components?: DiscordMessageComponents;\n  /** Sent if the message contains stickers */\n  sticker_items?: DiscordStickerItem[];\n}\n\n/** https://discord.com/developers/docs/resources/channel#channel-mention-object */\nexport interface DiscordChannelMention {\n  /** id of the channel */\n  id: string;\n  /** id of the guild containing the channel */\n  guild_id: string;\n  /** The type of channel */\n  type: number;\n  /** The name of the channel */\n  name: string;\n}\n\n/** https://discord.com/developers/docs/resources/channel#reaction-object */\nexport interface DiscordReaction {\n  /** Times this emoji has been used to react */\n  count: number;\n  /** Whether the current user reacted using this emoji */\n  me: boolean;\n  /** Emoji information */\n  emoji: Partial<DiscordEmoji>;\n}\n\n/** https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure */\nexport interface DiscordMessageActivity {\n  /** Type of message activity */\n  type: MessageActivityTypes;\n  /** `party_id` from a Rich Presence event */\n  party_id?: string;\n}\n\n/** https://discord.com/developers/docs/resources/channel#message-object-message-reference-structure */\nexport interface DiscordMessageReference {\n  /** id of the originating message */\n  message_id?: string;\n  /**\n   * id of the originating message's channel\n   * Note: `channel_id` is optional when creating a reply, but will always be present when receiving an event/response that includes this data model.\n   */\n  channel_id?: string;\n  /** id of the originating message's guild */\n  guild_id?: string;\n  /** When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true */\n  fail_if_not_exists: boolean;\n}\n\n/** https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-structure */\nexport interface DiscordSticker {\n  /** [Id of the sticker](https://discord.com/developers/docs/reference#image-formatting) */\n  id: string;\n  /** Id of the pack the sticker is from */\n  pack_id?: string;\n  /** Name of the sticker */\n  name: string;\n  /** Description of the sticker */\n  description: string;\n  /** a unicode emoji representing the sticker's expression */\n  tags: string;\n  /** [type of sticker](https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types) */\n  type: StickerTypes;\n  /** [Type of sticker format](https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types) */\n  format_type: StickerFormatTypes;\n  /**  Whether or not the sticker is available */\n  available?: boolean;\n  /** Id of the guild that owns this sticker */\n  guild_id?: string;\n  /** The user that uploaded the sticker */\n  user?: DiscordUser;\n  /** A sticker's sort order within a pack */\n  sort_value?: number;\n}\n\n/** https://discord.com/developers/docs/interactions/receiving-and-responding#message-interaction-object-message-interaction-structure */\nexport interface DiscordMessageInteraction {\n  /** Id of the interaction */\n  id: string;\n  /** The type of interaction */\n  type: InteractionTypes;\n  /** The name of the ApplicationCommand */\n  name: string;\n  /** The user who invoked the interaction */\n  user: DiscordUser;\n  /** The member who invoked the interaction in the guild */\n  member?: Partial<DiscordMember>;\n}\n\nexport type DiscordMessageComponents = DiscordActionRow[];\n\n/** https://discord.com/developers/docs/interactions/message-components#actionrow */\nexport interface DiscordActionRow {\n  /** Action rows are a group of buttons. */\n  type: 1;\n  /** The components in this row */\n  components:\n    | [DiscordSelectMenuComponent | DiscordButtonComponent | DiscordInputTextComponent]\n    | [DiscordButtonComponent, DiscordButtonComponent]\n    | [DiscordButtonComponent, DiscordButtonComponent, DiscordButtonComponent]\n    | [DiscordButtonComponent, DiscordButtonComponent, DiscordButtonComponent, DiscordButtonComponent]\n    | [\n      DiscordButtonComponent,\n      DiscordButtonComponent,\n      DiscordButtonComponent,\n      DiscordButtonComponent,\n      DiscordButtonComponent,\n    ];\n}\n\nexport interface DiscordSelectMenuComponent {\n  type: MessageComponentTypes.SelectMenu;\n  /** A custom identifier for this component. Maximum 100 characters. */\n  custom_id: string;\n  /** A custom placeholder text if nothing is selected. Maximum 150 characters. */\n  placeholder?: string;\n  /** The minimum number of items that must be selected. Default 1. Between 1-25. */\n  min_values?: number;\n  /** The maximum number of items that can be selected. Default 1. Between 1-25. */\n  max_values?: number;\n  /** The choices! Maximum of 25 items. */\n  options: DiscordSelectOption[];\n}\n\nexport interface DiscordSelectOption {\n  /** The user-facing name of the option. Maximum 25 characters. */\n  label: string;\n  /** The dev-defined value of the option. Maximum 100 characters. */\n  value: string;\n  /** An additional description of the option. Maximum 50 characters. */\n  description?: string;\n  /** The id, name, and animated properties of an emoji. */\n  emoji?: {\n    /** Emoji id */\n    id?: string;\n    /** Emoji name */\n    name?: string;\n    /** Whether this emoji is animated */\n    animated?: boolean;\n  };\n  /** Will render this option as already-selected by default. */\n  default?: boolean;\n}\n\n/** https://discord.com/developers/docs/interactions/message-components#buttons-button-object */\nexport interface DiscordButtonComponent {\n  /** All button components have type 2 */\n  type: MessageComponentTypes.Button;\n  /** for what the button says (max 80 characters) */\n  label: string;\n  /** a dev-defined unique string sent on click (max 100 characters). type 5 Link buttons can not have a custom_id */\n  custom_id?: string;\n  /** For different styles/colors of the buttons */\n  style: ButtonStyles;\n  /** Emoji object that includes fields of name, id, and animated supporting unicode and custom emojis. */\n  emoji?: {\n    /** Emoji id */\n    id?: string;\n    /** Emoji name */\n    name?: string;\n    /** Whether this emoji is animated */\n    animated?: boolean;\n  };\n  /** optional url for link-style buttons that can navigate a user to the web. Only type 5 Link buttons can have a url */\n  url?: string;\n  /** Whether or not this button is disabled */\n  disabled?: boolean;\n}\n\n/** https://discord.com/developers/docs/interactions/message-components#text-inputs-text-input-structure */\nexport interface DiscordInputTextComponent {\n  /** InputText Component is of type 3 */\n  type: MessageComponentTypes.InputText;\n  /** The style of the InputText */\n  style: TextStyles;\n  /** The customId of the InputText */\n  custom_id: string;\n  /** The label of the InputText */\n  label: string;\n  /** The placeholder of the InputText */\n  placeholder?: string;\n  /** The minimum length of the text the user has to provide */\n  min_length?: number;\n  /** The maximum length of the text the user has to provide */\n  max_length?: number;\n  /** Whether or not this input is required. */\n  required?: boolean;\n  /** Pre-filled value for input text. */\n  value?: string;\n}\n\n/** https://discord.com/developers/docs/resources/sticker#sticker-item-object-sticker-item-structure */\nexport interface DiscordStickerItem {\n  /** Id of the sticker */\n  id: string;\n  /** Name of the sticker */\n  name: string;\n  /** [Type of sticker format](https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types) */\n  format_type: StickerFormatTypes;\n}\n\n/** https://discord.com/developers/docs/resources/sticker#sticker-pack-object-sticker-pack-structure */\nexport interface DiscordStickerPack {\n  /** id of the sticker pack */\n  id: string;\n  /** the stickers in the pack */\n  stickers: DiscordSticker[];\n  /** name of the sticker pack */\n  name: string;\n  /** id of the pack's SKU */\n  sku_id: string;\n  /** id of a sticker in the pack which is shown as the pack's icon */\n  cover_sticker_id?: string;\n  /** description of the sticker pack */\n  description: string;\n  /** id of the sticker pack's [banner image](https://discord.com/developers/docs/reference#image-formatting) */\n  banner_asset_id?: string;\n}\n\nexport interface DiscordInteraction {\n  /** Id of the interaction */\n  id: string;\n  /** Id of the application this interaction is for */\n  application_id: string;\n  /** The type of interaction */\n  type: InteractionTypes;\n  /** The guild it was sent from */\n  guild_id?: string;\n  /** The channel it was sent from */\n  channel_id?: string;\n  /** Guild member data for the invoking user, including permissions */\n  member?: DiscordInteractionMember;\n  /** User object for the invoking user, if invoked in a DM */\n  user?: DiscordUser;\n  /** A continuation token for responding to the interaction */\n  token: string;\n  /** Read-only property, always `1` */\n  version: 1;\n  /** For the message the button was attached to */\n  message?: DiscordMessage;\n  /** the command data payload */\n  data?: DiscordInteractionData;\n  /** The selected language of the invoking user */\n  locale?: string;\n  /** The guild's preferred locale, if invoked in a guild */\n  guild_locale?: string;\n}\n\n/** https://discord.com/developers/docs/resources/guild#guild-member-object */\nexport interface DiscordInteractionMember extends DiscordMemberWithUser {\n  /** Total permissions of the member in the channel, including overwrites, returned when in the interaction object */\n  permissions: string;\n}\n\nexport interface DiscordInteractionData {\n  /** The type of component */\n  component_type?: MessageComponentTypes;\n  /** The custom id provided for this component. */\n  custom_id?: string;\n  /** The components if its a Modal Submit interaction. */\n  components?: DiscordMessageComponents;\n  /** The values chosen by the user. */\n  values?: string[];\n  /** The Id of the invoked command */\n  id: string;\n  /** The name of the invoked command */\n  name: string;\n  /** the type of the invoked command */\n  type: ApplicationCommandTypes;\n  /** Converted users + roles + channels + attachments */\n  resolved?: {\n    /** The Ids and Message objects */\n    messages?: Record<string, DiscordMessage>;\n    /** The Ids and User objects */\n    users?: Record<string, DiscordUser>;\n    /** The Ids and partial Member objects */\n    members?: Record<string, Omit<DiscordInteractionMember, \"user\" | \"deaf\" | \"mute\">>;\n    /** The Ids and Role objects */\n    roles?: Record<string, DiscordRole>;\n    /** The Ids and partial Channel objects */\n    channels?: Record<string, Pick<DiscordChannel, \"id\" | \"name\" | \"type\" | \"permissions\">>;\n    /** The ids and attachment objects */\n    attachments: Record<string, DiscordAttachment>;\n  };\n  /** The params + values from the user */\n  options?: DiscordInteractionDataOption[];\n  /** The target id if this is a context menu command. */\n  target_id?: string;\n  /** the id of the guild the command is registered to */\n  guild_id?: string;\n}\n\nexport type DiscordInteractionDataOption = {\n  /** Name of the parameter */\n  name: string;\n  /** Value of application command option type */\n  type: ApplicationCommandOptionTypes;\n  /** Value of the option resulting from user input */\n  value?: string | boolean | number | DiscordMember | DiscordChannel | DiscordRole;\n  /** Present if this option is a group or subcommand */\n  options?: DiscordInteractionDataOption[];\n  /** `true` if this option is the currently focused option for autocomplete */\n  focused?: boolean;\n};\n\nexport interface DiscordInteractionDataResolved {\n  /** The Ids and Message objects */\n  messages?: Record<string, DiscordMessage>;\n  /** The Ids and User objects */\n  users?: Record<string, DiscordUser>;\n  /** The Ids and partial Member objects */\n  members?: Record<string, Omit<DiscordInteractionMember, \"user\" | \"deaf\" | \"mute\">>;\n  /** The Ids and Role objects */\n  roles?: Record<string, DiscordRole>;\n  /** The Ids and partial Channel objects */\n  channels?: Record<string, Pick<DiscordChannel, \"id\" | \"name\" | \"type\" | \"permissions\">>;\n  /** The Ids and attachments objects */\n  attachments?: Record<string, DiscordAttachment>;\n}\n\nexport interface DiscordListActiveThreads {\n  /** The active threads */\n  threads: DiscordChannel[];\n  /** A thread member object for each returned thread the current user has joined */\n  members: DiscordThreadMember[];\n}\n\nexport interface DiscordListArchivedThreads extends DiscordListActiveThreads {\n  /** Whether there are potentially additional threads that could be returned on a subsequent call */\n  has_more: boolean;\n}\n\nexport interface DiscordThreadListSync {\n  /** The id of the guild */\n  guild_id: string;\n  /** The parent channel ids whose threads are being synced. If omitted, then threads were synced for the entire guild. This array may contain channelIds that have no active threads as well, so you know to clear that data */\n  channel_ids?: string[];\n  /** All active threads in the given channels that the current user can access */\n  threads: DiscordChannel[];\n  /** All thread member objects from the synced threads for the current user, indicating which threads the current user has been added to */\n  members: DiscordThreadMember[];\n}\n\n/** https://discord.com/developers/docs/resources/audit-log#audit-log-object */\nexport interface DiscordAuditLog {\n  /** List of webhooks found in the audit log */\n  webhooks: DiscordWebhook[];\n  /** List of users found in the audit log */\n  users: DiscordUser[];\n  /** List of audit log entries, sorted from most to least recent */\n  audit_log_entries: DiscordAuditLogEntry[];\n  /** List of partial integration objects */\n  integrations: Partial<DiscordIntegration>[];\n  /**\n   * List of threads found in the audit log.\n   * Threads referenced in `THREAD_CREATE` and `THREAD_UPDATE` events are included in the threads map since archived threads might not be kept in memory by clients.\n   */\n  threads: DiscordChannel[];\n  /** List of guild scheduled events found in the audit log */\n  guild_scheduled_events?: DiscordScheduledEvent[];\n}\n\n/** https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-entry-structure */\nexport interface DiscordAuditLogEntry {\n  /** ID of the affected entity (webhook, user, role, etc.) */\n  target_id: string | null;\n  /** Changes made to the `target_id` */\n  changes?: DiscordAuditLogChange[];\n  /** User or app that made the changes */\n  user_id: string | null;\n  /** ID of the entry */\n  id: string;\n  /** Type of action that occurred */\n  action_type: AuditLogEvents;\n  /** Additional info for certain event types */\n  options?: DiscordOptionalAuditEntryInfo;\n  /** Reason for the change (1-512 characters) */\n  reason?: string;\n}\n\n/** https://discord.com/developers/docs/resources/audit-log#audit-log-change-object-audit-log-change-structure */\nexport type DiscordAuditLogChange =\n  | {\n    new_value: string;\n    old_value: string;\n    key:\n      | \"name\"\n      | \"description\"\n      | \"discovery_splash_hash\"\n      | \"banner_hash\"\n      | \"preferred_locale\"\n      | \"rules_channel_id\"\n      | \"public_updates_channel_id\"\n      | \"icon_hash\"\n      | \"image_hash\"\n      | \"splash_hash\"\n      | \"owner_id\"\n      | \"region\"\n      | \"afk_channel_id\"\n      | \"vanity_url_code\"\n      | \"widget_channel_id\"\n      | \"system_channel_id\"\n      | \"topic\"\n      | \"application_id\"\n      | \"permissions\"\n      | \"allow\"\n      | \"deny\"\n      | \"code\"\n      | \"channel_id\"\n      | \"inviter_id\"\n      | \"nick\"\n      | \"avatar_hash\"\n      | \"id\"\n      | \"location\"\n      | \"command_id\";\n  }\n  | {\n    new_value: number;\n    old_value: number;\n    key:\n      | \"afk_timeout\"\n      | \"mfa_level\"\n      | \"verification_level\"\n      | \"explicit_content_filter\"\n      | \"default_message_notifications\"\n      | \"prune_delete_days\"\n      | \"position\"\n      | \"bitrate\"\n      | \"rate_limit_per_user\"\n      | \"color\"\n      | \"max_uses\"\n      | \"uses\"\n      | \"max_age\"\n      | \"expire_behavior\"\n      | \"expire_grace_period\"\n      | \"user_limit\"\n      | \"privacy_level\"\n      | \"auto_archive_duration\"\n      | \"default_auto_archive_duration\"\n      | \"entity_type\"\n      | \"status\"\n      | \"communication_disabled_until\";\n  }\n  | {\n    new_value: Partial<DiscordRole>[];\n    old_value?: Partial<DiscordRole>[];\n    key: \"$add\" | \"$remove\";\n  }\n  | {\n    new_value: boolean;\n    old_value: boolean;\n    key:\n      | \"widget_enabled\"\n      | \"nsfw\"\n      | \"hoist\"\n      | \"mentionable\"\n      | \"temporary\"\n      | \"deaf\"\n      | \"mute\"\n      | \"enable_emoticons\"\n      | \"archived\"\n      | \"locked\"\n      | \"invitable\";\n  }\n  | {\n    new_value: DiscordOverwrite[];\n    old_value: DiscordOverwrite[];\n    key: \"permission_overwrites\";\n  }\n  | {\n    new_value: string | number;\n    old_value: string | number;\n    key: \"type\";\n  };\n\n/** https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-optional-audit-entry-info */\nexport interface DiscordOptionalAuditEntryInfo {\n  /**\n   * Number of days after which inactive members were kicked.\n   *\n   * Event types: `MEMBER_PRUNE`\n   */\n  delete_member_days: string;\n  /**\n   * Number of members removed by the prune.\n   *\n   * Event types: `MEMBER_PRUNE`\n   */\n  members_removed: string;\n  /**\n   * Channel in which the entities were targeted.\n   *\n   * Event types: `MEMBER_MOVE`, `MESSAGE_PIN`, `MESSAGE_UNPIN`, `MESSAGE_DELETE`, `STAGE_INSTANCE_CREATE`, `STAGE_INSTANCE_UPDATE`, `STAGE_INSTANCE_DELETE`\n   */\n  channel_id: string;\n  /**\n   * ID of the message that was targeted.\n   *\n   * Event types: `MESSAGE_PIN`, `MESSAGE_UNPIN`, `STAGE_INSTANCE_CREATE`, `STAGE_INSTANCE_UPDATE`, `STAGE_INSTANCE_DELETE`\n   */\n  message_id: string;\n  /**\n   * Number of entities that were targeted.\n   *\n   * Event types: `MESSAGE_DELETE`, `MESSAGE_BULK_DELETE`, `MEMBER_DISCONNECT`, `MEMBER_MOVE`\n   */\n  count: string;\n  /**\n   * ID of the overwritten entity.\n   *\n   * Event types: `CHANNEL_OVERWRITE_CREATE`, `CHANNEL_OVERWRITE_UPDATE`, `CHANNEL_OVERWRITE_DELETE`\n   */\n  id: string;\n  /**\n   * Type of overwritten entity - \"0\", for \"role\", or \"1\" for \"member\".\n   *\n   * Event types: `CHANNEL_OVERWRITE_CREATE`, `CHANNEL_OVERWRITE_UPDATE`, `CHANNEL_OVERWRITE_DELETE`\n   */\n  type: string;\n  /**\n   * Name of the role if type is \"0\" (not present if type is \"1\").\n   *\n   * Event types: `CHANNEL_OVERWRITE_CREATE`, `CHANNEL_OVERWRITE_UPDATE`, `CHANNEL_OVERWRITE_DELETE`\n   */\n  role_name: string;\n  /**\n   * ID of the app whose permissions were targeted.\n   *\n   * Event types: `APPLICATION_COMMAND_PERMISSION_UPDATE`\n   */\n  application_id: string;\n}\n\nexport interface DiscordScheduledEvent {\n  /** the id of the scheduled event */\n  id: string;\n  /** the guild id which the scheduled event belongs to */\n  guild_id: string;\n  /** the channel id in which the scheduled event will be hosted if specified */\n  channel_id: string | null;\n  /** the id of the user that created the scheduled event */\n  creator_id?: string | null;\n  /** the name of the scheduled event */\n  name: string;\n  /** the description of the scheduled event */\n  description?: string;\n  /** the time the scheduled event will start */\n  scheduled_start_time: string;\n  /** the time the scheduled event will end if it does end. */\n  scheduled_end_time: string | null;\n  /** the privacy level of the scheduled event */\n  privacy_level: ScheduledEventPrivacyLevel;\n  /** the status of the scheduled event */\n  status: ScheduledEventStatus;\n  /** the type of hosting entity associated with a scheduled event */\n  entity_type: ScheduledEventEntityType;\n  /** any additional id of the hosting entity associated with event */\n  entity_id: string | null;\n  /** the entity metadata for the scheduled event */\n  entity_metadata: DiscordScheduledEventEntityMetadata | null;\n  /** the user that created the scheduled event */\n  creator?: DiscordUser;\n  /** the number of users subscribed to the scheduled event */\n  user_count?: number;\n  /** the cover image hash of the scheduled event */\n  image?: string | null;\n}\n\nexport interface DiscordScheduledEventEntityMetadata {\n  /** location of the event */\n  location?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#get-gateway-bot */\nexport interface DiscordGetGatewayBot {\n  /** The WSS URL that can be used for connecting to the gateway */\n  url: string;\n  /** The recommended number of shards to use when connecting */\n  shards: number;\n  /** Information on the current session start limit */\n  session_start_limit: DiscordSessionStartLimit;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#session-start-limit-object */\nexport interface DiscordSessionStartLimit {\n  /** The total number of session starts the current user is allowed */\n  total: number;\n  /** The remaining number of session starts the current user is allowed */\n  remaining: number;\n  /** The number of milliseconds after which the limit resets */\n  reset_after: number;\n  /** The number of identify requests allowed per 5 seconds */\n  max_concurrency: number;\n}\n\n/** https://discord.com/developers/docs/resources/invite#invite-metadata-object */\nexport interface DiscordInviteMetadata extends DiscordInvite {\n  /** Number of times this invite has been used */\n  uses: number;\n  /** Max number of times this invite can be used */\n  max_uses: number;\n  /** Duration (in seconds) after which the invite expires */\n  max_age: number;\n  /** Whether this invite only grants temporary membership */\n  temporary: boolean;\n  /** When this invite was created */\n  created_at: string;\n}\n\n/** https://discord.com/developers/docs/resources/invite#invite-object */\nexport interface DiscordInvite {\n  /** The invite code (unique Id) */\n  code: string;\n  /** The guild this invite is for */\n  guild?: Partial<DiscordGuild>;\n  /** The channel this invite is for */\n  channel: Partial<DiscordChannel> | null;\n  /** The user who created the invite */\n  inviter?: DiscordUser;\n  /** The type of target for this voice channel invite */\n  target_type?: TargetTypes;\n  /** The target user for this invite */\n  target_user?: DiscordUser;\n  /** The embedded application to open for this voice channel embedded application invite */\n  target_application?: Partial<DiscordApplication>;\n  /** Approximate count of online members (only present when target_user is set) */\n  approximate_presence_count?: number;\n  /** Approximate count of total members */\n  approximate_member_count?: number;\n  /** The expiration date of this invite, returned from the `GET /invites/<code>` endpoint when `with_expiration` is `true` */\n  expires_at?: string | null;\n  /** Stage instance data if there is a public Stage instance in the Stage channel this invite is for */\n  stage_instance?: DiscordInviteStageInstance;\n  /** guild scheduled event data */\n  guild_scheduled_event?: DiscordScheduledEvent;\n}\n\nexport interface DiscordInviteStageInstance {\n  /** The members speaking in the Stage */\n  members: Partial<DiscordMember>[];\n  /** The number of users in the Stage */\n  participant_count: number;\n  /** The number of users speaking in the Stage */\n  speaker_count: number;\n  /** The topic of the Stage instance (1-120 characters) */\n  topic: string;\n}\n\n/** https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-structure */\nexport interface DiscordApplicationCommand {\n  /** Unique ID of command */\n  id: string;\n  /** Type of command, defaults to `ApplicationCommandTypes.ChatInput` */\n  type?: ApplicationCommandTypes;\n  /** ID of the parent application */\n  application_id: string;\n  /** Guild id of the command, if not global */\n  guild_id?: string;\n  /**\n   * Name of command, 1-32 characters.\n   * `ApplicationCommandTypes.ChatInput` command names must match the following regex `^[-_\\p{L}\\p{N}\\p{sc=Deva}\\p{sc=Thai}]{1,32}$` with the unicode flag set.\n   * If there is a lowercase variant of any letters used, you must use those.\n   * Characters with no lowercase variants and/or uncased letters are still allowed.\n   * ApplicationCommandTypes.User` and `ApplicationCommandTypes.Message` commands may be mixed case and can include spaces.\n   */\n  name: string;\n  /** Localization object for `name` field. Values follow the same restrictions as `name` */\n  name_localizations?: Localization | null;\n  /** Description for `ApplicationCommandTypes.ChatInput` commands, 1-100 characters. Empty string for `ApplicationCommandTypes.User` and `ApplicationCommandTypes.Message` commands */\n  description: string;\n  /** Localization object for `description` field. Values follow the same restrictions as `description` */\n  description_localizations?: Localization | null;\n  /** Parameters for the command, max of 25 */\n  options?: DiscordApplicationCommandOption[];\n  /** Set of permissions represented as a bit set */\n  default_member_permissions?: string | null;\n  /** Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible. */\n  dm_permission?: boolean | null;\n  /** Auto incrementing version identifier updated during substantial record changes */\n  version: string;\n}\n\n/** https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-structure */\nexport interface DiscordApplicationCommandOption {\n  /** Type of option */\n  type: ApplicationCommandOptionTypes;\n  /**\n   * Name of command, 1-32 characters.\n   * `ApplicationCommandTypes.ChatInput` command names must match the following regex `^[-_\\p{L}\\p{N}\\p{sc=Deva}\\p{sc=Thai}]{1,32}$` with the unicode flag set.\n   * If there is a lowercase variant of any letters used, you must use those.\n   * Characters with no lowercase variants and/or uncased letters are still allowed.\n   * ApplicationCommandTypes.User` and `ApplicationCommandTypes.Message` commands may be mixed case and can include spaces.\n   */\n  name: string;\n  /** Localization object for the `name` field. Values follow the same restrictions as `name` */\n  name_localizations?: Localization | null;\n  /** 1-100 character description */\n  description: string;\n  /** Localization object for the `description` field. Values follow the same restrictions as `description` */\n  description_localizations?: Localization | null;\n  /** If the parameter is required or optional--default `false` */\n  required?: boolean;\n  /** Choices for the option types `ApplicationCommandOptionTypes.String`, `ApplicationCommandOptionTypes.Integer`, and `ApplicationCommandOptionTypes.Number`, from which the user can choose, max 25 */\n  choices?: DiscordApplicationCommandOptionChoice[];\n  /** If the option is a subcommand or subcommand group type, these nested options will be the parameters */\n  options?: DiscordApplicationCommandOption[];\n  /**\n   * If autocomplete interactions are enabled for this option.\n   *\n   * Only available for `ApplicationCommandOptionTypes.String`, `ApplicationCommandOptionTypes.Integer` and `ApplicationCommandOptionTypes.Number` option types\n   */\n  autocomplete?: boolean;\n  /** If the option is a channel type, the channels shown will be restricted to these types */\n  channel_types?: ChannelTypes[];\n  /** If the option type is `ApplicationCommandOptionTypes.Integer` or `ApplicationCommandOptionTypes.Number`, the minimum permitted value */\n  min_value?: number;\n  /** If the option type is `ApplicationCommandOptionTypes.Integer` or `ApplicationCommandOptionTypes.Number`, the maximum permitted value */\n  max_value?: number;\n}\n\n/** https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-choice-structure */\nexport interface DiscordApplicationCommandOptionChoice {\n  /** 1-100 character choice name */\n  name: string;\n  /** Localization object for the `name` field. Values follow the same restrictions as `name` */\n  name_localizations?: Localization | null;\n  /** Value for the choice, up to 100 characters if string */\n  value: string | number;\n}\n\n/** https://discord.com/developers/docs/interactions/slash-commands#guildapplicationcommandpermissions */\nexport interface DiscordGuildApplicationCommandPermissions {\n  /** ID of the command */\n  id: string;\n  /** ID of the application the command belongs to */\n  application_id: string;\n  /** ID of the guild */\n  guild_id: string;\n  /** Permissions for the command in the guild, max of 100 */\n  permissions: DiscordApplicationCommandPermissions[];\n}\n\n/** https://discord.com/developers/docs/interactions/slash-commands#applicationcommandpermissions */\nexport interface DiscordApplicationCommandPermissions {\n  /** ID of the role, user, or channel. It can also be a permission constant */\n  id: string;\n  /** ApplicationCommandPermissionTypes.Role, ApplicationCommandPermissionTypes.User, or ApplicationCommandPermissionTypes.Channel */\n  type: ApplicationCommandPermissionTypes;\n  /** `true` to allow, `false`, to disallow */\n  permission: boolean;\n}\n\n/** https://discord.com/developers/docs/resources/guild#get-guild-widget-example-get-guild-widget */\nexport interface DiscordGuildWidget {\n  id: string;\n  name: string;\n  instant_invite: string;\n  channels: {\n    id: string;\n    name: string;\n    position: number;\n  }[];\n  members: {\n    id: string;\n    username: string;\n    discriminator: string;\n    avatar?: string | null;\n    status: string;\n    avatar_url: string;\n  }[];\n  presence_count: number;\n}\n\n/** https://discord.com/developers/docs/resources/guild#guild-preview-object */\nexport interface DiscordGuildPreview {\n  /** Guild id */\n  id: string;\n  /** Guild name (2-100 characters) */\n  name: string;\n  /** Icon hash */\n  icon: string | null;\n  /** Splash hash */\n  splash: string | null;\n  /** Discovery splash hash */\n  discovery_splash: string | null;\n  /** Custom guild emojis */\n  emojis: DiscordEmoji[];\n  /** Enabled guild features */\n  features: GuildFeatures[];\n  /** Approximate number of members in this guild */\n  approximate_member_count: number;\n  /** Approximate number of online members in this guild */\n  approximate_presence_count: number;\n  /** The description for the guild, if the guild is discoverable */\n  description: string | null;\n  /** Custom guild stickers */\n  stickers: DiscordSticker[];\n}\n\nexport interface DiscordDiscoveryCategory {\n  /** Numeric id of the category */\n  id: number;\n  /** The name of this category, in multiple languages */\n  name: DiscordDiscoveryName;\n  /** Whether this category can be set as a guild's primary category */\n  is_primary: boolean;\n}\n\nexport interface DiscordDiscoveryName {\n  /** The name in English */\n  default: string;\n  /** The name in other languages */\n  localizations?: Record<string, string>;\n}\n\nexport interface DiscordDiscoveryMetadata {\n  /** The guild Id */\n  guild_id: string;\n  /** The id of the primary discovery category set for this guild */\n  primary_category_id: number;\n  /** Up to 10 discovery search keywords set for this guild */\n  keywords: string[] | null;\n  /** Whether guild info is shown when custom emojis from this guild are clicked */\n  emoji_discoverability_enabled: boolean;\n  /** When the server's partner application was accepted or denied, for applications via Server Settings */\n  partner_actioned_timestamp: string | null;\n  /** When the server applied for partnership, if it has a pending application */\n  partner_application_timestamp: string | null;\n  /** Ids of up to 5 discovery subcategories set for this guild */\n  category_ids: number[];\n}\n\n/** https://discord.com/developers/docs/resources/channel#followed-channel-object */\nexport interface DiscordFollowedChannel {\n  /** Source message id */\n  channel_id: string;\n  /** Created target webhook id */\n  webhook_id: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#payloads-gateway-payload-structure */\nexport interface DiscordGatewayPayload {\n  /** opcode for the payload */\n  op: number;\n  /** Event data */\n  d: unknown | null;\n  /** Sequence number, used for resuming sessions and heartbeats */\n  s: number | null;\n  /** The event name for this payload */\n  t: GatewayEventNames | null;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-members-chunk */\nexport interface DiscordGuildMembersChunk {\n  /** The id of the guild */\n  guild_id: string;\n  /** Set of guild members */\n  members: DiscordMemberWithUser[];\n  /** The chunk index in the expected chunks for this response (0 <= chunk_index < chunk_count) */\n  chunk_index: number;\n  /** The total number of expected chunks for this response */\n  chunk_count: number;\n  /** If passing an invalid id to `REQUEST_GUILD_MEMBERS`, it will be returned here */\n  not_found?: string[];\n  /** If passing true to `REQUEST_GUILD_MEMBERS`, presences of the returned members will be here */\n  presences?: DiscordPresenceUpdate[];\n  /** The nonce used in the Guild Members Request */\n  nonce?: string;\n}\n\nexport interface DiscordComponent {\n  /** component type */\n  type: MessageComponentTypes;\n  /** a developer-defined identifier for the component, max 100 characters */\n  custom_id?: string;\n  /** whether the component is disabled, default false */\n  disabled?: boolean;\n  /** For different styles/colors of the buttons */\n  style?: ButtonStyles | TextStyles;\n  /** text that appears on the button (max 80 characters) */\n  label?: string;\n  /** the dev-define value of the option, max 100 characters for select or 4000 for input. */\n  value?: string;\n  /** Emoji object that includes fields of name, id, and animated supporting unicode and custom emojis. */\n  emoji?: {\n    /** Emoji id */\n    id?: string;\n    /** Emoji name */\n    name?: string;\n    /** Whether this emoji is animated */\n    animated?: boolean;\n  };\n  /** optional url for link-style buttons that can navigate a user to the web. Only type 5 Link buttons can have a url */\n  url?: string;\n  /** The choices! Maximum of 25 items. */\n  options?: DiscordSelectOption[];\n  /** A custom placeholder text if nothing is selected. Maximum 150 characters. */\n  placeholder?: string;\n  /** The minimum number of items that must be selected. Default 1. Between 1-25. */\n  min_values?: number;\n  /** The maximum number of items that can be selected. Default 1. Between 1-25. */\n  max_values?: number;\n  /** a list of child components */\n  components?: DiscordComponent[];\n}\n\n/** https://discord.com/developers/docs/topics/gateway#channel-pins-update */\nexport interface DiscordChannelPinsUpdate {\n  /** The id of the guild */\n  guild_id?: string;\n  /** The id of the channel */\n  channel_id: string;\n  /** The time at which the most recent pinned message was pinned */\n  last_pin_timestamp?: string | null;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-role-delete */\nexport interface DiscordGuildRoleDelete {\n  /** id of the guild */\n  guild_id: string;\n  /** id of the role */\n  role_id: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-ban-add */\nexport interface DiscordGuildBanAddRemove {\n  /** id of the guild */\n  guild_id: string;\n  /** The banned user */\n  user: DiscordUser;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#message-reaction-remove */\nexport interface DiscordMessageReactionRemove extends Omit<DiscordMessageReactionAdd, \"member\"> {}\n\n/** https://discord.com/developers/docs/topics/gateway#message-reaction-add */\nexport interface DiscordMessageReactionAdd {\n  /** The id of the user */\n  user_id: string;\n  /** The id of the channel */\n  channel_id: string;\n  /** The id of the message */\n  message_id: string;\n  /** The id of the guild */\n  guild_id?: string;\n  /** The member who reacted if this happened in a guild */\n  member?: DiscordMemberWithUser;\n  /** The emoji used to react */\n  emoji: Partial<DiscordEmoji>;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#voice-server-update */\nexport interface DiscordVoiceServerUpdate {\n  /** Voice connection token */\n  token: string;\n  /** The guild this voice server update is for */\n  guild_id: string;\n  /** The voice server host */\n  endpoint: string | null;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#invite-create */\nexport interface DiscordInviteCreate {\n  /** The channel the invite is for */\n  channel_id: string;\n  /** The unique invite code */\n  code: string;\n  /** The time at which the invite was created */\n  created_at: string;\n  /** The guild of the invite */\n  guild_id?: string;\n  /** The user that created the invite */\n  inviter?: DiscordUser;\n  /** How long the invite is valid for (in seconds) */\n  max_age: number;\n  /** The maximum number of times the invite can be used */\n  max_uses: number;\n  /** The type of target for this voice channel invite */\n  target_type: TargetTypes;\n  /** The target user for this invite */\n  target_user?: DiscordUser;\n  /** The embedded application to open for this voice channel embedded application invite */\n  target_application?: Partial<DiscordApplication>;\n  /** Whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role) */\n  temporary: boolean;\n  /** How many times the invite has been used (always will be 0) */\n  uses: number;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#hello */\nexport interface DiscordHello {\n  /** The interval (in milliseconds) the client should heartbeat with */\n  heartbeat_interval: number;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#ready */\nexport interface DiscordReady {\n  /** Gateway version */\n  v: number;\n  /** Information about the user including email */\n  user: DiscordUser;\n  /** The guilds the user is in */\n  guilds: DiscordUnavailableGuild[];\n  /** Used for resuming connections */\n  session_id: string;\n  /** The shard information associated with this session, if sent when identifying */\n  shard?: [number, number];\n  /** Contains id and flags */\n  application: Partial<DiscordApplication> & Pick<DiscordApplication, \"id\" | \"flags\">;\n}\n\n/** https://discord.com/developers/docs/resources/guild#unavailable-guild-object */\nexport interface DiscordUnavailableGuild extends Pick<DiscordGuild, \"id\" | \"unavailable\"> {}\n\n/** https://discord.com/developers/docs/topics/gateway#message-delete-bulk */\nexport interface DiscordMessageDeleteBulk {\n  /** The ids of the messages */\n  ids: string[];\n  /** The id of the channel */\n  channel_id: string;\n  /** The id of the guild */\n  guild_id?: string;\n}\n\n/** https://discord.com/developers/docs/resources/template#template-object-template-structure */\nexport interface DiscordTemplate {\n  /** The template code (unique Id) */\n  code: string;\n  /** Template name */\n  name: string;\n  /** The description for the template */\n  description: string | null;\n  /** Number of times this template has been used */\n  usage_count: number;\n  /** The Id of the user who created the template */\n  creator_id: string;\n  /** The user who created the template */\n  creator: DiscordUser;\n  /** When this template was created */\n  created_at: string;\n  /** When this template was last synced to the source guild */\n  updated_at: string;\n  /** The Id of the guild this template is based on */\n  source_guild_id: string;\n  /** The guild snapshot this template contains */\n  serialized_source_guild:\n    & Omit<\n      PickPartial<\n        DiscordGuild,\n        | \"name\"\n        | \"description\"\n        | \"verification_level\"\n        | \"default_message_notifications\"\n        | \"explicit_content_filter\"\n        | \"preferred_locale\"\n        | \"afk_timeout\"\n        | \"channels\"\n        | \"afk_channel_id\"\n        | \"system_channel_id\"\n        | \"system_channel_flags\"\n      >,\n      \"roles\"\n    >\n    & {\n      roles: (\n        & Omit<\n          PickPartial<\n            DiscordRole,\n            \"name\" | \"color\" | \"hoist\" | \"mentionable\" | \"permissions\" | \"icon\" | \"unicode_emoji\"\n          >,\n          \"id\"\n        >\n        & { id: number }\n      )[];\n    };\n  /** Whether the template has un-synced changes */\n  is_dirty: boolean | null;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-member-add */\nexport interface DiscordGuildMemberAdd extends DiscordMemberWithUser {\n  /** id of the guild */\n  guild_id: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#message-delete */\nexport interface DiscordMessageDelete {\n  /** The id of the message */\n  id: string;\n  /** The id of the channel */\n  channel_id: string;\n  /** The id of the guild */\n  guild_id?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#thread-members-update-thread-members-update-event-fields */\nexport interface DiscordThreadMembersUpdate {\n  /** The id of the thread */\n  id: string;\n  /** The id of the guild */\n  guild_id: string;\n  /** The users who were added to the thread */\n  added_members?: DiscordThreadMember[];\n  /** The id of the users who were removed from the thread */\n  removed_member_ids?: string[];\n  /** the approximate number of members in the thread, capped at 50 */\n  member_count: number;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#thread-member-update */\nexport interface DiscordThreadMemberUpdate {\n  /** The id of the thread */\n  id: string;\n  /** The id of the guild */\n  guild_id: string;\n  /** The timestamp when the bot joined this thread. */\n  joined_at: string;\n  /** The flags this user has for this thread. Not useful for bots. */\n  flags: number;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-role-create */\nexport interface DiscordGuildRoleCreate {\n  /** The id of the guild */\n  guild_id: string;\n  /** The role created */\n  role: DiscordRole;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-emojis-update */\nexport interface DiscordGuildEmojisUpdate {\n  /** id of the guild */\n  guild_id: string;\n  /** Array of emojis */\n  emojis: DiscordEmoji[];\n}\n\nexport interface DiscordAddGuildDiscoverySubcategory {\n  /** The guild Id of the subcategory was added to */\n  guild_id: string;\n  /** The Id of the subcategory added */\n  category_id: number;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-ban-add */\nexport interface DiscordGuildBanAddRemove {\n  /** id of the guild */\n  guild_id: string;\n  /** The banned user */\n  user: DiscordUser;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-member-update */\nexport interface DiscordGuildMemberUpdate {\n  /** The id of the guild */\n  guild_id: string;\n  /** User role ids */\n  roles: string[];\n  /** The user */\n  user: DiscordUser;\n  /** Nickname of the user in the guild */\n  nick?: string | null;\n  /** the member's [guild avatar hash](https://discord.com/developers/docs/reference#image-formatting) */\n  avatar: string;\n  /** When the user joined the guild */\n  joined_at: string;\n  /** When the user starting boosting the guild */\n  premium_since?: string | null;\n  /** whether the user is deafened in voice channels */\n  deaf?: boolean;\n  /** whether the user is muted in voice channels */\n  mute?: boolean;\n  /** Whether the user has not yet passed the guild's Membership Screening requirements */\n  pending?: boolean;\n  /** when the user's [timeout](https://support.discord.com/hc/en-us/articles/4413305239191-Time-Out-FAQ) will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out. Will throw a 403 error if the user has the ADMINISTRATOR permission or is the owner of the guild */\n  communication_disabled_until?: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#message-reaction-remove-all */\nexport interface DiscordMessageReactionRemoveAll\n  extends Pick<DiscordMessageReactionAdd, \"channel_id\" | \"message_id\" | \"guild_id\"> {}\n\n// TODO: add docs link\nexport interface DiscordValidateDiscoverySearchTerm {\n  /** Whether the provided term is valid */\n  valid: boolean;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#guild-role-update */\nexport interface DiscordGuildRoleUpdate {\n  /** The id of the guild */\n  guild_id: string;\n  /** The role updated */\n  role: DiscordRole;\n}\n\nexport interface DiscordScheduledEventUserAdd {\n  /** id of the guild scheduled event  */\n  guild_scheduled_event_id: string;\n  /** id of the user                   */\n  user_id: string;\n  /** id of the guild */\n  guild_id: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#message-reaction-remove-emoji */\nexport type DiscordMessageReactionRemoveEmoji = Pick<\n  DiscordMessageReactionAdd,\n  \"channel_id\" | \"guild_id\" | \"message_id\" | \"emoji\"\n>;\n\n/** https://discord.com/developers/docs/topics/gateway#guild-member-remove */\nexport interface DiscordGuildMemberRemove {\n  /** The id of the guild */\n  guild_id: string;\n  /** The user who was removed */\n  user: DiscordUser;\n}\n\n/** https://discord.com/developers/docs/resources/guild#ban-object */\nexport interface DiscordBan {\n  /** The reason for the ban */\n  reason: string | null;\n  /** The banned user */\n  user: DiscordUser;\n}\n\nexport interface DiscordScheduledEventUserRemove {\n  /** id of the guild scheduled event */\n  guild_scheduled_event_id: string;\n  /** id of the user */\n  user_id: string;\n  /** id of the guild */\n  guild_id: string;\n}\n\n/** https://discord.com/developers/docs/topics/gateway#invite-delete */\nexport interface DiscordInviteDelete {\n  /** The channel of the invite */\n  channel_id: string;\n  /** The guild of the invite */\n  guild_id?: string;\n  /** The unique invite code */\n  code: string;\n}\n\n/** https://discord.com/developers/docs/resources/voice#voice-region-object-voice-region-structure */\nexport interface DiscordVoiceRegion {\n  /** Unique Id for the region */\n  id: string;\n  /** Name of the region */\n  name: string;\n  /** true for a single server that is closest to the current user's client */\n  optimal: boolean;\n  /** Whether this is a deprecated voice region (avoid switching to these) */\n  deprecated: boolean;\n  /** Whether this is a custom voice region (used for events/etc) */\n  custom: boolean;\n}\n\nexport interface DiscordGuildWidgetSettings {\n  /** whether the widget is enabled */\n  enabled: boolean;\n  /** the widget channel id */\n  channel_id: string | null;\n}\n\nexport interface DiscordInstallParams {\n  /** he scopes to add the application to the server with */\n  scopes: string[];\n  /** the permissions to request for the bot role */\n  permissions: string;\n}\n"]}