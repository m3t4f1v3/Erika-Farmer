import { delay } from "./utils.ts";
export function createLeakyBucket({ max, refillInterval, refillAmount, tokens, waiting, ...rest }) {
    return {
        max,
        refillInterval,
        refillAmount: refillAmount > max ? max : refillAmount,
        lastRefill: performance.now(),
        allowAcquire: true,
        nextRefill: function () {
            return nextRefill(this);
        },
        tokens: function () {
            return updateTokens(this);
        },
        acquire: async function (amount, highPriority) {
            return await acquire(this, amount, highPriority);
        },
        tokensState: tokens ?? max,
        waiting: waiting ?? [],
        ...rest,
    };
}
function updateTokens(bucket) {
    const timePassed = performance.now() - bucket.lastRefill;
    const missedRefills = Math.floor(timePassed / bucket.refillInterval);
    bucket.tokensState = Math.min(bucket.tokensState + (bucket.refillAmount * missedRefills), bucket.max);
    bucket.lastRefill += bucket.refillInterval * missedRefills;
    return bucket.tokensState;
}
function nextRefill(bucket) {
    updateTokens(bucket);
    return (performance.now() - bucket.lastRefill) + bucket.refillInterval;
}
async function acquire(bucket, amount, highPriority = false) {
    if (!bucket.allowAcquire) {
        await new Promise((resolve) => {
            if (highPriority) {
                bucket.waiting.unshift(resolve);
            }
            else {
                bucket.waiting.push(resolve);
            }
        });
        if (!bucket.allowAcquire) {
            return await acquire(bucket, amount);
        }
    }
    bucket.allowAcquire = false;
    let currentTokens = updateTokens(bucket);
    if (currentTokens < amount) {
        const tokensNeeded = amount - currentTokens;
        let refillsNeeded = Math.ceil(tokensNeeded / bucket.refillAmount);
        const waitTime = bucket.refillInterval * refillsNeeded;
        await delay(waitTime);
        updateTokens(bucket);
    }
    const toSubtract = (amount % bucket.refillAmount) || amount;
    bucket.tokensState -= toSubtract;
    bucket.allowAcquire = true;
    bucket.waiting.shift()?.();
}
//# sourceMappingURL=data:application/json;base64,