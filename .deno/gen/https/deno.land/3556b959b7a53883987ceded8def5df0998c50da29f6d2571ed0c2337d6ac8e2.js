import { requireBotChannelPermissions } from "../permissions.ts";
export function deleteMessage(bot) {
    const deleteMessageOld = bot.helpers.deleteMessage;
    bot.helpers.deleteMessage = async function(channelId, messageId, reason, milliseconds) {
        const message = bot.messages.get(messageId);
        // DELETING SELF MESSAGES IS ALWAYS ALLOWED
        if (message?.authorId === bot.id) {
            return deleteMessageOld(channelId, messageId, reason, milliseconds);
        }
        const channel = bot.channels.get(channelId);
        if (channel?.guildId) {
            requireBotChannelPermissions(bot, channel, [
                "MANAGE_MESSAGES", 
            ]);
        } else {
            throw new Error(`You can only delete messages in a channel which has a guild id. Channel ID: ${channelId} Message Id: ${messageId}`);
        }
        return await deleteMessageOld(channelId, messageId, reason, milliseconds);
    };
}
export function deleteMessages(bot) {
    const deleteMessagesOld = bot.helpers.deleteMessages;
    bot.helpers.deleteMessages = async function(channelId, ids, reason) {
        const channel = bot.channels.get(channelId);
        if (!channel?.guildId) {
            throw new Error(`Bulk deleting messages is only allowed in channels which has a guild id. Channel ID: ${channelId} IDS: ${ids.join(" ")}`);
        }
        // 2 WEEKS
        const oldestAllowed = Date.now() - 1209600000;
        ids = ids.filter((id)=>{
            const createdAt = Number(id / 4194304n + 1420070400000n);
            // IF MESSAGE IS OLDER THAN 2 WEEKS
            if (createdAt > oldestAllowed) return true;
            console.log(`[Permission Plugin] Skipping bulk message delete of ID ${id} because it is older than 2 weeks.`);
            return false;
        });
        if (ids.length < 2) {
            throw new Error("Bulk message delete requires at least 2 messages.");
        }
        requireBotChannelPermissions(bot, channel, [
            "MANAGE_MESSAGES", 
        ]);
        return await deleteMessagesOld(channelId, ids, reason);
    };
}
export default function setupDeleteMessagePermChecks(bot) {
    deleteMessage(bot);
    deleteMessages(bot);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3RXaXRoQ2FjaGUgfSBmcm9tIFwiLi4vLi4vZGVwcy50c1wiO1xuaW1wb3J0IHsgcmVxdWlyZUJvdENoYW5uZWxQZXJtaXNzaW9ucyB9IGZyb20gXCIuLi9wZXJtaXNzaW9ucy50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlTWVzc2FnZShib3Q6IEJvdFdpdGhDYWNoZSkge1xuICBjb25zdCBkZWxldGVNZXNzYWdlT2xkID0gYm90LmhlbHBlcnMuZGVsZXRlTWVzc2FnZTtcblxuICBib3QuaGVscGVycy5kZWxldGVNZXNzYWdlID0gYXN5bmMgZnVuY3Rpb24gKFxuICAgIGNoYW5uZWxJZCxcbiAgICBtZXNzYWdlSWQsXG4gICAgcmVhc29uLFxuICAgIG1pbGxpc2Vjb25kcyxcbiAgKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGJvdC5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKTtcbiAgICAvLyBERUxFVElORyBTRUxGIE1FU1NBR0VTIElTIEFMV0FZUyBBTExPV0VEXG4gICAgaWYgKG1lc3NhZ2U/LmF1dGhvcklkID09PSBib3QuaWQpIHtcbiAgICAgIHJldHVybiBkZWxldGVNZXNzYWdlT2xkKGNoYW5uZWxJZCwgbWVzc2FnZUlkLCByZWFzb24sIG1pbGxpc2Vjb25kcyk7XG4gICAgfVxuXG4gICAgY29uc3QgY2hhbm5lbCA9IGJvdC5jaGFubmVscy5nZXQoY2hhbm5lbElkKTtcbiAgICBpZiAoY2hhbm5lbD8uZ3VpbGRJZCkge1xuICAgICAgcmVxdWlyZUJvdENoYW5uZWxQZXJtaXNzaW9ucyhib3QsIGNoYW5uZWwsIFtcbiAgICAgICAgXCJNQU5BR0VfTUVTU0FHRVNcIixcbiAgICAgIF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBZb3UgY2FuIG9ubHkgZGVsZXRlIG1lc3NhZ2VzIGluIGEgY2hhbm5lbCB3aGljaCBoYXMgYSBndWlsZCBpZC4gQ2hhbm5lbCBJRDogJHtjaGFubmVsSWR9IE1lc3NhZ2UgSWQ6ICR7bWVzc2FnZUlkfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBkZWxldGVNZXNzYWdlT2xkKGNoYW5uZWxJZCwgbWVzc2FnZUlkLCByZWFzb24sIG1pbGxpc2Vjb25kcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVNZXNzYWdlcyhib3Q6IEJvdFdpdGhDYWNoZSkge1xuICBjb25zdCBkZWxldGVNZXNzYWdlc09sZCA9IGJvdC5oZWxwZXJzLmRlbGV0ZU1lc3NhZ2VzO1xuXG4gIGJvdC5oZWxwZXJzLmRlbGV0ZU1lc3NhZ2VzID0gYXN5bmMgZnVuY3Rpb24gKFxuICAgIGNoYW5uZWxJZCxcbiAgICBpZHMsXG4gICAgcmVhc29uLFxuICApIHtcbiAgICBjb25zdCBjaGFubmVsID0gYm90LmNoYW5uZWxzLmdldChjaGFubmVsSWQpO1xuICAgIGlmICghY2hhbm5lbD8uZ3VpbGRJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQnVsayBkZWxldGluZyBtZXNzYWdlcyBpcyBvbmx5IGFsbG93ZWQgaW4gY2hhbm5lbHMgd2hpY2ggaGFzIGEgZ3VpbGQgaWQuIENoYW5uZWwgSUQ6ICR7Y2hhbm5lbElkfSBJRFM6ICR7XG4gICAgICAgICAgaWRzLmpvaW4oXCIgXCIpXG4gICAgICAgIH1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyAyIFdFRUtTXG4gICAgY29uc3Qgb2xkZXN0QWxsb3dlZCA9IERhdGUubm93KCkgLSAxMjA5NjAwMDAwO1xuXG4gICAgaWRzID0gaWRzLmZpbHRlcigoaWQpID0+IHtcbiAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IE51bWJlcihpZCAvIDQxOTQzMDRuICsgMTQyMDA3MDQwMDAwMG4pO1xuICAgICAgLy8gSUYgTUVTU0FHRSBJUyBPTERFUiBUSEFOIDIgV0VFS1NcbiAgICAgIGlmIChjcmVhdGVkQXQgPiBvbGRlc3RBbGxvd2VkKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGBbUGVybWlzc2lvbiBQbHVnaW5dIFNraXBwaW5nIGJ1bGsgbWVzc2FnZSBkZWxldGUgb2YgSUQgJHtpZH0gYmVjYXVzZSBpdCBpcyBvbGRlciB0aGFuIDIgd2Vla3MuYCxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBpZiAoaWRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkJ1bGsgbWVzc2FnZSBkZWxldGUgcmVxdWlyZXMgYXQgbGVhc3QgMiBtZXNzYWdlcy5cIik7XG4gICAgfVxuXG4gICAgcmVxdWlyZUJvdENoYW5uZWxQZXJtaXNzaW9ucyhib3QsIGNoYW5uZWwsIFtcbiAgICAgIFwiTUFOQUdFX01FU1NBR0VTXCIsXG4gICAgXSk7XG5cbiAgICByZXR1cm4gYXdhaXQgZGVsZXRlTWVzc2FnZXNPbGQoY2hhbm5lbElkLCBpZHMsIHJlYXNvbik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHVwRGVsZXRlTWVzc2FnZVBlcm1DaGVja3MoYm90OiBCb3RXaXRoQ2FjaGUpIHtcbiAgZGVsZXRlTWVzc2FnZShib3QpO1xuICBkZWxldGVNZXNzYWdlcyhib3QpO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsNEJBQTRCLFFBQVEsbUJBQW1CLENBQUM7QUFFakUsT0FBTyxTQUFTLGFBQWEsQ0FBQyxHQUFpQixFQUFFO0lBQy9DLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEFBQUM7SUFFbkQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsZUFDMUIsU0FBUyxFQUNULFNBQVMsRUFDVCxNQUFNLEVBQ04sWUFBWSxFQUNaO1FBQ0EsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEFBQUM7UUFDNUMsMkNBQTJDO1FBQzND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