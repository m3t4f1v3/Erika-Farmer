import { createLeakyBucket } from "../../util/bucket.ts";
export function prepareBuckets(gateway) {
    for(let i = 0; i < gateway.gatewayBot.sessionStartLimit.maxConcurrency; ++i){
        gateway.buckets.set(i, {
            workers: [],
            leak: createLeakyBucket({
                max: 1,
                refillAmount: 1,
                // special number which is proven to be working dont change
                refillInterval: gateway.spawnShardDelay
            })
        });
    }
    // ORGANIZE ALL SHARDS INTO THEIR OWN BUCKETS
    for(let shardId = gateway.firstShardId; shardId <= gateway.lastShardId; ++shardId){
        // gateway.debug("GW DEBUG", `1. Running for loop in spawnShards function for shardId ${i}.`);
        if (shardId >= gateway.manager.totalShards) {
            throw new Error(`Shard (id: ${shardId}) is bigger or equal to the used amount of used shards which is ${gateway.manager.totalShards}`);
        }
        const bucketId = shardId % gateway.gatewayBot.sessionStartLimit.maxConcurrency;
        const bucket = gateway.buckets.get(bucketId);
        if (!bucket) {
            throw new Error(`Shard (id: ${shardId}) got assigned to an illegal bucket id: ${bucketId}, expected a bucket id between 0 and ${gateway.gatewayBot.sessionStartLimit.maxConcurrency - 1}`);
        }
        // FIND A QUEUE IN THIS BUCKET THAT HAS SPACE
        // const worker = bucket.workers.find((w) => w.queue.length < gateway.shardsPerWorker);
        const workerId = gateway.calculateWorkerId(shardId);
        const worker = bucket.workers.find((w)=>w.id === workerId
        );
        if (worker) {
            // IF THE QUEUE HAS SPACE JUST ADD IT TO THIS QUEUE
            worker.queue.push(shardId);
        } else {
            bucket.workers.push({
                id: workerId,
                queue: [
                    shardId
                ]
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMZWFreUJ1Y2tldCB9IGZyb20gXCIuLi8uLi91dGlsL2J1Y2tldC50c1wiO1xuaW1wb3J0IHsgR2F0ZXdheU1hbmFnZXIgfSBmcm9tIFwiLi9nYXRld2F5TWFuYWdlci50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZUJ1Y2tldHMoZ2F0ZXdheTogR2F0ZXdheU1hbmFnZXIpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYXRld2F5LmdhdGV3YXlCb3Quc2Vzc2lvblN0YXJ0TGltaXQubWF4Q29uY3VycmVuY3k7ICsraSkge1xuICAgIGdhdGV3YXkuYnVja2V0cy5zZXQoaSwge1xuICAgICAgd29ya2VyczogW10sXG4gICAgICBsZWFrOiBjcmVhdGVMZWFreUJ1Y2tldCh7XG4gICAgICAgIG1heDogMSxcbiAgICAgICAgcmVmaWxsQW1vdW50OiAxLFxuICAgICAgICAvLyBzcGVjaWFsIG51bWJlciB3aGljaCBpcyBwcm92ZW4gdG8gYmUgd29ya2luZyBkb250IGNoYW5nZVxuICAgICAgICByZWZpbGxJbnRlcnZhbDogZ2F0ZXdheS5zcGF3blNoYXJkRGVsYXksXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE9SR0FOSVpFIEFMTCBTSEFSRFMgSU5UTyBUSEVJUiBPV04gQlVDS0VUU1xuICBmb3IgKGxldCBzaGFyZElkID0gZ2F0ZXdheS5maXJzdFNoYXJkSWQ7IHNoYXJkSWQgPD0gZ2F0ZXdheS5sYXN0U2hhcmRJZDsgKytzaGFyZElkKSB7XG4gICAgLy8gZ2F0ZXdheS5kZWJ1ZyhcIkdXIERFQlVHXCIsIGAxLiBSdW5uaW5nIGZvciBsb29wIGluIHNwYXduU2hhcmRzIGZ1bmN0aW9uIGZvciBzaGFyZElkICR7aX0uYCk7XG4gICAgaWYgKHNoYXJkSWQgPj0gZ2F0ZXdheS5tYW5hZ2VyLnRvdGFsU2hhcmRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBTaGFyZCAoaWQ6ICR7c2hhcmRJZH0pIGlzIGJpZ2dlciBvciBlcXVhbCB0byB0aGUgdXNlZCBhbW91bnQgb2YgdXNlZCBzaGFyZHMgd2hpY2ggaXMgJHtnYXRld2F5Lm1hbmFnZXIudG90YWxTaGFyZHN9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgYnVja2V0SWQgPSBzaGFyZElkICUgZ2F0ZXdheS5nYXRld2F5Qm90LnNlc3Npb25TdGFydExpbWl0Lm1heENvbmN1cnJlbmN5O1xuICAgIGNvbnN0IGJ1Y2tldCA9IGdhdGV3YXkuYnVja2V0cy5nZXQoYnVja2V0SWQpO1xuICAgIGlmICghYnVja2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBTaGFyZCAoaWQ6ICR7c2hhcmRJZH0pIGdvdCBhc3NpZ25lZCB0byBhbiBpbGxlZ2FsIGJ1Y2tldCBpZDogJHtidWNrZXRJZH0sIGV4cGVjdGVkIGEgYnVja2V0IGlkIGJldHdlZW4gMCBhbmQgJHtcbiAgICAgICAgICBnYXRld2F5LmdhdGV3YXlCb3Quc2Vzc2lvblN0YXJ0TGltaXQubWF4Q29uY3VycmVuY3kgLSAxXG4gICAgICAgIH1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGSU5EIEEgUVVFVUUgSU4gVEhJUyBCVUNLRVQgVEhBVCBIQVMgU1BBQ0VcbiAgICAvLyBjb25zdCB3b3JrZXIgPSBidWNrZXQud29ya2Vycy5maW5kKCh3KSA9PiB3LnF1ZXVlLmxlbmd0aCA8IGdhdGV3YXkuc2hhcmRzUGVyV29ya2VyKTtcbiAgICBjb25zdCB3b3JrZXJJZCA9IGdhdGV3YXkuY2FsY3VsYXRlV29ya2VySWQoc2hhcmRJZCk7XG4gICAgY29uc3Qgd29ya2VyID0gYnVja2V0LndvcmtlcnMuZmluZCgodykgPT4gdy5pZCA9PT0gd29ya2VySWQpO1xuICAgIGlmICh3b3JrZXIpIHtcbiAgICAgIC8vIElGIFRIRSBRVUVVRSBIQVMgU1BBQ0UgSlVTVCBBREQgSVQgVE8gVEhJUyBRVUVVRVxuICAgICAgd29ya2VyLnF1ZXVlLnB1c2goc2hhcmRJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Y2tldC53b3JrZXJzLnB1c2goeyBpZDogd29ya2VySWQsIHF1ZXVlOiBbc2hhcmRJZF0gfSk7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IlNBQVMsaUJBQWlCLFFBQVEsc0JBQXNCLENBQUM7QUFHekQsT0FBTyxTQUFTLGNBQWMsQ0FBQyxPQUF1QixFQUFFO0lBQ3RELElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBRTtRQUM1RSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDckIsT0FBTyxFQUFFLEVBQUU7WUFDWCxJQUFJLEVBQUUsaUJBQWlCLENBQUM7Z0JBQ3RCLEdBQUcsRUFBRSxDQUFDO2dCQUNOLFlBQVksRUFBRSxDQUFDO2dCQUNmLDJEQUEyRDtnQkFDM0QsY0FBYyxFQUFFLE9BQU8sQ0FBQyxlQUFlO2FBQ3hDLENBQUM7U0FDSCxDQUFDLENBQUM7S0FDSjtJQUVELDZDQUE2QztJQUM3QyxJQUFLLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxPQUFPLENBQUU7UUFDbEYsOEZBQThGO1FBQzlGLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQzFDLE1BQU0sSUFBSSxLQUFLLENBQ2IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLGdFQUFnRSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FDdEgsQ0FBQztTQUNIO1FBRUQsTUFBTSxRQUFRLEdBQUcsT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsY0FBYyxBQUFDO1FBQy9FLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxBQUFDO1FBQzdDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLElBQUksS0FBSyxDQUNiLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyx3Q0FBd0MsRUFBRSxRQUFRLENBQUMscUNBQXFDLEVBQzVHLE9BQU8sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FDeEQsQ0FBQyxDQUNILENBQUM7U0FDSDtRQUVELDZDQUE2QztRQUM3Qyx1RkFBdUY7UUFDdkYsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxBQUFDO1FBQ3BELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssUUFBUTtRQUFBLENBQUMsQUFBQztRQUM3RCxJQUFJLE1BQU0sRUFBRTtZQUNWLG1EQUFtRDtZQUNuRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QixNQUFNO1lBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQUUsRUFBRSxFQUFFLFFBQVE7Z0JBQUUsS0FBSyxFQUFFO29CQUFDLE9BQU87aUJBQUM7YUFBRSxDQUFDLENBQUM7U0FDekQ7S0FDRjtDQUNGIn0=