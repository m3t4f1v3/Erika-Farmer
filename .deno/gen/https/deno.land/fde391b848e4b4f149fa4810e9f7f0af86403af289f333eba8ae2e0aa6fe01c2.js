import { createLeakyBucket } from "../../util/bucket.ts";
export function prepareBuckets(gateway) {
    for (let i = 0; i < gateway.gatewayBot.sessionStartLimit.maxConcurrency; ++i) {
        gateway.buckets.set(i, {
            workers: [],
            leak: createLeakyBucket({
                max: 1,
                refillAmount: 1,
                refillInterval: gateway.spawnShardDelay,
            }),
        });
    }
    for (let shardId = gateway.firstShardId; shardId <= gateway.lastShardId; ++shardId) {
        if (shardId >= gateway.manager.totalShards) {
            throw new Error(`Shard (id: ${shardId}) is bigger or equal to the used amount of used shards which is ${gateway.manager.totalShards}`);
        }
        const bucketId = shardId % gateway.gatewayBot.sessionStartLimit.maxConcurrency;
        const bucket = gateway.buckets.get(bucketId);
        if (!bucket) {
            throw new Error(`Shard (id: ${shardId}) got assigned to an illegal bucket id: ${bucketId}, expected a bucket id between 0 and ${gateway.gatewayBot.sessionStartLimit.maxConcurrency - 1}`);
        }
        const workerId = gateway.calculateWorkerId(shardId);
        const worker = bucket.workers.find((w) => w.id === workerId);
        if (worker) {
            worker.queue.push(shardId);
        }
        else {
            bucket.workers.push({ id: workerId, queue: [shardId] });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcGFyZUJ1Y2tldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcmVwYXJlQnVja2V0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUd6RCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQXVCO0lBQ3BELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUM1RSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDckIsT0FBTyxFQUFFLEVBQUU7WUFDWCxJQUFJLEVBQUUsaUJBQWlCLENBQUM7Z0JBQ3RCLEdBQUcsRUFBRSxDQUFDO2dCQUNOLFlBQVksRUFBRSxDQUFDO2dCQUVmLGNBQWMsRUFBRSxPQUFPLENBQUMsZUFBZTthQUN4QyxDQUFDO1NBQ0gsQ0FBQyxDQUFDO0tBQ0o7SUFHRCxLQUFLLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUU7UUFFbEYsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FDYixjQUFjLE9BQU8sbUVBQW1FLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQ3RILENBQUM7U0FDSDtRQUVELE1BQU0sUUFBUSxHQUFHLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQztRQUMvRSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FDYixjQUFjLE9BQU8sMkNBQTJDLFFBQVEsd0NBQ3RFLE9BQU8sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsY0FBYyxHQUFHLENBQ3hELEVBQUUsQ0FDSCxDQUFDO1NBQ0g7UUFJRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUM7UUFDN0QsSUFBSSxNQUFNLEVBQUU7WUFFVixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN6RDtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUxlYWt5QnVja2V0IH0gZnJvbSBcIi4uLy4uL3V0aWwvYnVja2V0LnRzXCI7XG5pbXBvcnQgeyBHYXRld2F5TWFuYWdlciB9IGZyb20gXCIuL2dhdGV3YXlNYW5hZ2VyLnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlQnVja2V0cyhnYXRld2F5OiBHYXRld2F5TWFuYWdlcikge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGdhdGV3YXkuZ2F0ZXdheUJvdC5zZXNzaW9uU3RhcnRMaW1pdC5tYXhDb25jdXJyZW5jeTsgKytpKSB7XG4gICAgZ2F0ZXdheS5idWNrZXRzLnNldChpLCB7XG4gICAgICB3b3JrZXJzOiBbXSxcbiAgICAgIGxlYWs6IGNyZWF0ZUxlYWt5QnVja2V0KHtcbiAgICAgICAgbWF4OiAxLFxuICAgICAgICByZWZpbGxBbW91bnQ6IDEsXG4gICAgICAgIC8vIHNwZWNpYWwgbnVtYmVyIHdoaWNoIGlzIHByb3ZlbiB0byBiZSB3b3JraW5nIGRvbnQgY2hhbmdlXG4gICAgICAgIHJlZmlsbEludGVydmFsOiBnYXRld2F5LnNwYXduU2hhcmREZWxheSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gT1JHQU5JWkUgQUxMIFNIQVJEUyBJTlRPIFRIRUlSIE9XTiBCVUNLRVRTXG4gIGZvciAobGV0IHNoYXJkSWQgPSBnYXRld2F5LmZpcnN0U2hhcmRJZDsgc2hhcmRJZCA8PSBnYXRld2F5Lmxhc3RTaGFyZElkOyArK3NoYXJkSWQpIHtcbiAgICAvLyBnYXRld2F5LmRlYnVnKFwiR1cgREVCVUdcIiwgYDEuIFJ1bm5pbmcgZm9yIGxvb3AgaW4gc3Bhd25TaGFyZHMgZnVuY3Rpb24gZm9yIHNoYXJkSWQgJHtpfS5gKTtcbiAgICBpZiAoc2hhcmRJZCA+PSBnYXRld2F5Lm1hbmFnZXIudG90YWxTaGFyZHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFNoYXJkIChpZDogJHtzaGFyZElkfSkgaXMgYmlnZ2VyIG9yIGVxdWFsIHRvIHRoZSB1c2VkIGFtb3VudCBvZiB1c2VkIHNoYXJkcyB3aGljaCBpcyAke2dhdGV3YXkubWFuYWdlci50b3RhbFNoYXJkc31gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBidWNrZXRJZCA9IHNoYXJkSWQgJSBnYXRld2F5LmdhdGV3YXlCb3Quc2Vzc2lvblN0YXJ0TGltaXQubWF4Q29uY3VycmVuY3k7XG4gICAgY29uc3QgYnVja2V0ID0gZ2F0ZXdheS5idWNrZXRzLmdldChidWNrZXRJZCk7XG4gICAgaWYgKCFidWNrZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFNoYXJkIChpZDogJHtzaGFyZElkfSkgZ290IGFzc2lnbmVkIHRvIGFuIGlsbGVnYWwgYnVja2V0IGlkOiAke2J1Y2tldElkfSwgZXhwZWN0ZWQgYSBidWNrZXQgaWQgYmV0d2VlbiAwIGFuZCAke1xuICAgICAgICAgIGdhdGV3YXkuZ2F0ZXdheUJvdC5zZXNzaW9uU3RhcnRMaW1pdC5tYXhDb25jdXJyZW5jeSAtIDFcbiAgICAgICAgfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEZJTkQgQSBRVUVVRSBJTiBUSElTIEJVQ0tFVCBUSEFUIEhBUyBTUEFDRVxuICAgIC8vIGNvbnN0IHdvcmtlciA9IGJ1Y2tldC53b3JrZXJzLmZpbmQoKHcpID0+IHcucXVldWUubGVuZ3RoIDwgZ2F0ZXdheS5zaGFyZHNQZXJXb3JrZXIpO1xuICAgIGNvbnN0IHdvcmtlcklkID0gZ2F0ZXdheS5jYWxjdWxhdGVXb3JrZXJJZChzaGFyZElkKTtcbiAgICBjb25zdCB3b3JrZXIgPSBidWNrZXQud29ya2Vycy5maW5kKCh3KSA9PiB3LmlkID09PSB3b3JrZXJJZCk7XG4gICAgaWYgKHdvcmtlcikge1xuICAgICAgLy8gSUYgVEhFIFFVRVVFIEhBUyBTUEFDRSBKVVNUIEFERCBJVCBUTyBUSElTIFFVRVVFXG4gICAgICB3b3JrZXIucXVldWUucHVzaChzaGFyZElkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVja2V0LndvcmtlcnMucHVzaCh7IGlkOiB3b3JrZXJJZCwgcXVldWU6IFtzaGFyZElkXSB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==