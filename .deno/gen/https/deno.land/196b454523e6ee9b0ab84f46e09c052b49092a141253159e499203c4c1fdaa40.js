import { BASE_URL } from "../util/constants.ts";
export function processRequest(rest, request, payload) {
    const route = request.url.substring(request.url.indexOf("api/"));
    const parts = route.split("/");
    parts.shift();
    if (parts[0]?.startsWith("v"))
        parts.shift();
    request.url = `${BASE_URL}/v${rest.version}/${parts.join("/")}`;
    parts.shift();
    const url = rest.simplifyUrl(request.url, request.method);
    const queue = rest.pathQueues.get(url);
    if (queue) {
        queue.requests.push({ request, payload });
    }
    else {
        rest.pathQueues.set(url, {
            isWaiting: false,
            requests: [
                {
                    request,
                    payload,
                },
            ],
        });
        rest.processQueue(rest, url);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc1JlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9jZXNzUmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJaEQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxJQUFpQixFQUFFLE9BQW9CLEVBQUUsT0FBb0I7SUFDMUYsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRS9CLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVkLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFN0MsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsS0FBSyxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUVoRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFZCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTFELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksS0FBSyxFQUFFO1FBQ1QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUMzQztTQUFNO1FBRUwsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ3ZCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFFBQVEsRUFBRTtnQkFDUjtvQkFDRSxPQUFPO29CQUNQLE9BQU87aUJBQ1I7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQzlCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3RNYW5hZ2VyIH0gZnJvbSBcIi4uL2JvdC50c1wiO1xuaW1wb3J0IHsgQkFTRV9VUkwgfSBmcm9tIFwiLi4vdXRpbC9jb25zdGFudHMudHNcIjtcbmltcG9ydCB7IFJlc3RQYXlsb2FkLCBSZXN0UmVxdWVzdCB9IGZyb20gXCIuL3Jlc3QudHNcIjtcblxuLyoqIFByb2Nlc3NlcyBhIHJlcXVlc3QgYW5kIGFzc2lnbnMgaXQgdG8gYSBxdWV1ZSBvciBjcmVhdGVzIGEgcXVldWUgaWYgbm9uZSBleGlzdHMgZm9yIGl0LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NSZXF1ZXN0KHJlc3Q6IFJlc3RNYW5hZ2VyLCByZXF1ZXN0OiBSZXN0UmVxdWVzdCwgcGF5bG9hZDogUmVzdFBheWxvYWQpIHtcbiAgY29uc3Qgcm91dGUgPSByZXF1ZXN0LnVybC5zdWJzdHJpbmcocmVxdWVzdC51cmwuaW5kZXhPZihcImFwaS9cIikpO1xuICBjb25zdCBwYXJ0cyA9IHJvdXRlLnNwbGl0KFwiL1wiKTtcbiAgLy8gUkVNT1ZFIFRIRSBBUElcbiAgcGFydHMuc2hpZnQoKTtcbiAgLy8gUkVNT1ZFUyBUSEUgVkVSU0lPTiBOVU1CRVJcbiAgaWYgKHBhcnRzWzBdPy5zdGFydHNXaXRoKFwidlwiKSkgcGFydHMuc2hpZnQoKTtcbiAgLy8gU0VUIFRIRSBORVcgUkVRVUVTVCBVUkxcbiAgcmVxdWVzdC51cmwgPSBgJHtCQVNFX1VSTH0vdiR7cmVzdC52ZXJzaW9ufS8ke3BhcnRzLmpvaW4oXCIvXCIpfWA7XG4gIC8vIFJFTU9WRSBUSEUgTUFKT1IgUEFSQU1cbiAgcGFydHMuc2hpZnQoKTtcblxuICBjb25zdCB1cmwgPSByZXN0LnNpbXBsaWZ5VXJsKHJlcXVlc3QudXJsLCByZXF1ZXN0Lm1ldGhvZCk7XG5cbiAgY29uc3QgcXVldWUgPSByZXN0LnBhdGhRdWV1ZXMuZ2V0KHVybCk7XG4gIGlmIChxdWV1ZSkge1xuICAgIHF1ZXVlLnJlcXVlc3RzLnB1c2goeyByZXF1ZXN0LCBwYXlsb2FkIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIENSRUFURVMgQSBORVcgUVVFVUVcbiAgICByZXN0LnBhdGhRdWV1ZXMuc2V0KHVybCwge1xuICAgICAgaXNXYWl0aW5nOiBmYWxzZSxcbiAgICAgIHJlcXVlc3RzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICAgIHJlc3QucHJvY2Vzc1F1ZXVlKHJlc3QsIHVybCk7XG4gIH1cbn1cbiJdfQ==