export async function sendWebhook(bot, webhookId, webhookToken, options) {
    const allowedMentions = options.allowedMentions
        ? {
            parse: options.allowedMentions.parse,
            replied_user: options.allowedMentions.repliedUser,
            users: options.allowedMentions.users?.map((id) => id.toString()),
            roles: options.allowedMentions.roles?.map((id) => id.toString()),
        }
        : { parse: [] };
    const result = await bot.rest.runMethod(bot.rest, "POST", bot.constants.routes.WEBHOOK(webhookId, webhookToken, options), {
        wait: options.wait,
        thread_id: options.threadId,
        content: options.content,
        username: options.username,
        avatar_url: options.avatarUrl,
        tts: options.tts,
        file: options.file,
        embeds: options.embeds?.map((embed) => bot.transformers.reverse.embed(bot, embed)),
        allowed_mentions: allowedMentions,
        components: options.components?.map((component) => bot.transformers.reverse.component(bot, component)),
    });
    if (!options.wait)
        return;
    return bot.transformers.message(bot, result);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZFdlYmhvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZW5kV2ViaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FBQyxHQUFRLEVBQUUsU0FBaUIsRUFBRSxZQUFvQixFQUFFLE9BQXVCO0lBQzFHLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxlQUFlO1FBQzdDLENBQUMsQ0FBQztZQUNBLEtBQUssRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUs7WUFDcEMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsV0FBVztZQUNqRCxLQUFLLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDaEUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pFO1FBQ0QsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBRWxCLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQ3JDLEdBQUcsQ0FBQyxJQUFJLEVBQ1IsTUFBTSxFQUNOLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxFQUM5RDtRQUNFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixTQUFTLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDM0IsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3hCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUMxQixVQUFVLEVBQUUsT0FBTyxDQUFDLFNBQVM7UUFDN0IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO1FBQ2hCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEYsZ0JBQWdCLEVBQUUsZUFBZTtRQUNqQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDdkcsQ0FDRixDQUFDO0lBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJO1FBQUUsT0FBTztJQUUxQixPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCb3QgfSBmcm9tIFwiLi4vLi4vYm90LnRzXCI7XG5pbXBvcnQgeyBFbWJlZCB9IGZyb20gXCIuLi8uLi90cmFuc2Zvcm1lcnMvZW1iZWQudHNcIjtcbmltcG9ydCB7IERpc2NvcmRNZXNzYWdlIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IEFsbG93ZWRNZW50aW9ucywgRmlsZUNvbnRlbnQsIE1lc3NhZ2VDb21wb25lbnRzIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Rpc2NvcmRlbm8udHNcIjtcblxuLyoqIFNlbmQgYSB3ZWJob29rIHdpdGggd2ViaG9vayBJZCBhbmQgd2ViaG9vayB0b2tlbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRXZWJob29rKGJvdDogQm90LCB3ZWJob29rSWQ6IGJpZ2ludCwgd2ViaG9va1Rva2VuOiBzdHJpbmcsIG9wdGlvbnM6IEV4ZWN1dGVXZWJob29rKSB7XG4gIGNvbnN0IGFsbG93ZWRNZW50aW9ucyA9IG9wdGlvbnMuYWxsb3dlZE1lbnRpb25zXG4gICAgPyB7XG4gICAgICBwYXJzZTogb3B0aW9ucy5hbGxvd2VkTWVudGlvbnMucGFyc2UsXG4gICAgICByZXBsaWVkX3VzZXI6IG9wdGlvbnMuYWxsb3dlZE1lbnRpb25zLnJlcGxpZWRVc2VyLFxuICAgICAgdXNlcnM6IG9wdGlvbnMuYWxsb3dlZE1lbnRpb25zLnVzZXJzPy5tYXAoKGlkKSA9PiBpZC50b1N0cmluZygpKSxcbiAgICAgIHJvbGVzOiBvcHRpb25zLmFsbG93ZWRNZW50aW9ucy5yb2xlcz8ubWFwKChpZCkgPT4gaWQudG9TdHJpbmcoKSksXG4gICAgfVxuICAgIDogeyBwYXJzZTogW10gfTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBib3QucmVzdC5ydW5NZXRob2Q8RGlzY29yZE1lc3NhZ2U+KFxuICAgIGJvdC5yZXN0LFxuICAgIFwiUE9TVFwiLFxuICAgIGJvdC5jb25zdGFudHMucm91dGVzLldFQkhPT0sod2ViaG9va0lkLCB3ZWJob29rVG9rZW4sIG9wdGlvbnMpLFxuICAgIHtcbiAgICAgIHdhaXQ6IG9wdGlvbnMud2FpdCxcbiAgICAgIHRocmVhZF9pZDogb3B0aW9ucy50aHJlYWRJZCxcbiAgICAgIGNvbnRlbnQ6IG9wdGlvbnMuY29udGVudCxcbiAgICAgIHVzZXJuYW1lOiBvcHRpb25zLnVzZXJuYW1lLFxuICAgICAgYXZhdGFyX3VybDogb3B0aW9ucy5hdmF0YXJVcmwsXG4gICAgICB0dHM6IG9wdGlvbnMudHRzLFxuICAgICAgZmlsZTogb3B0aW9ucy5maWxlLFxuICAgICAgZW1iZWRzOiBvcHRpb25zLmVtYmVkcz8ubWFwKChlbWJlZCkgPT4gYm90LnRyYW5zZm9ybWVycy5yZXZlcnNlLmVtYmVkKGJvdCwgZW1iZWQpKSxcbiAgICAgIGFsbG93ZWRfbWVudGlvbnM6IGFsbG93ZWRNZW50aW9ucyxcbiAgICAgIGNvbXBvbmVudHM6IG9wdGlvbnMuY29tcG9uZW50cz8ubWFwKChjb21wb25lbnQpID0+IGJvdC50cmFuc2Zvcm1lcnMucmV2ZXJzZS5jb21wb25lbnQoYm90LCBjb21wb25lbnQpKSxcbiAgICB9LFxuICApO1xuICBpZiAoIW9wdGlvbnMud2FpdCkgcmV0dXJuO1xuXG4gIHJldHVybiBib3QudHJhbnNmb3JtZXJzLm1lc3NhZ2UoYm90LCByZXN1bHQpO1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL3dlYmhvb2sjZXhlY3V0ZS13ZWJob29rICovXG5leHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGVXZWJob29rIHtcbiAgLyoqIFdhaXRzIGZvciBzZXJ2ZXIgY29uZmlybWF0aW9uIG9mIG1lc3NhZ2Ugc2VuZCBiZWZvcmUgcmVzcG9uc2UsIGFuZCByZXR1cm5zIHRoZSBjcmVhdGVkIG1lc3NhZ2UgYm9keSAoZGVmYXVsdHMgdG8gYGZhbHNlYDsgd2hlbiBgZmFsc2VgIGEgbWVzc2FnZSB0aGF0IGlzIG5vdCBzYXZlZCBkb2VzIG5vdCByZXR1cm4gYW4gZXJyb3IpICovXG4gIHdhaXQ/OiBib29sZWFuO1xuICAvKiogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIHNwZWNpZmllZCB0aHJlYWQgd2l0aGluIGEgd2ViaG9vaydzIGNoYW5uZWwuIFRoZSB0aHJlYWQgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHVuYXJjaGl2ZWQuICovXG4gIHRocmVhZElkPzogYmlnaW50O1xuICAvKiogVGhlIG1lc3NhZ2UgY29udGVudHMgKHVwIHRvIDIwMDAgY2hhcmFjdGVycykgKi9cbiAgY29udGVudD86IHN0cmluZztcbiAgLyoqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHVzZXJuYW1lIG9mIHRoZSB3ZWJob29rICovXG4gIHVzZXJuYW1lPzogc3RyaW5nO1xuICAvKiogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYXZhdGFyIG9mIHRoZSB3ZWJob29rICovXG4gIGF2YXRhclVybD86IHN0cmluZztcbiAgLyoqIFRydWUgaWYgdGhpcyBpcyBhIFRUUyBtZXNzYWdlICovXG4gIHR0cz86IGJvb2xlYW47XG4gIC8qKiBUaGUgY29udGVudHMgb2YgdGhlIGZpbGUgYmVpbmcgc2VudCAqL1xuICBmaWxlPzogRmlsZUNvbnRlbnQgfCBGaWxlQ29udGVudFtdO1xuICAvKiogRW1iZWRkZWQgYHJpY2hgIGNvbnRlbnQgKi9cbiAgZW1iZWRzPzogRW1iZWRbXTtcbiAgLyoqIEFsbG93ZWQgbWVudGlvbnMgZm9yIHRoZSBtZXNzYWdlICovXG4gIGFsbG93ZWRNZW50aW9ucz86IEFsbG93ZWRNZW50aW9ucztcbiAgLyoqIHRoZSBjb21wb25lbnRzIHRvIGluY2x1ZGUgd2l0aCB0aGUgbWVzc2FnZSAqL1xuICBjb21wb25lbnRzPzogTWVzc2FnZUNvbXBvbmVudHM7XG59XG4iXX0=