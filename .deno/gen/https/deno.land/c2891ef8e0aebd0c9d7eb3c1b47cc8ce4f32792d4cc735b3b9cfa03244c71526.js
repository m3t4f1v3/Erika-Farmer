import { Collection } from "../../../util/collection.ts";
export async function getArchivedThreads(bot, channelId, options) {
    let url = options?.type === "privateJoinedThreads"
        ? bot.constants.routes.THREAD_ARCHIVED_PRIVATE_JOINED(channelId, options)
        : options?.type === "private"
            ? bot.constants.routes.THREAD_ARCHIVED_PRIVATE(channelId, options)
            : bot.constants.routes.THREAD_ARCHIVED_PUBLIC(channelId, options);
    const result = (await bot.rest.runMethod(bot.rest, "GET", url));
    return {
        threads: new Collection(result.threads.map((t) => {
            const thread = bot.transformers.channel(bot, { channel: t });
            return [thread.id, thread];
        })),
        members: new Collection(result.members.map((m) => {
            const member = bot.transformers.threadMember(bot, m);
            return [member.id, member];
        })),
        hasMore: result.has_more,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QXJjaGl2ZWRUaHJlYWRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0QXJjaGl2ZWRUaHJlYWRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUt6RCxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUN0QyxHQUFRLEVBQ1IsU0FBaUIsRUFDakIsT0FFQztJQUVELElBQUksR0FBRyxHQUFHLE9BQU8sRUFBRSxJQUFJLEtBQUssc0JBQXNCO1FBQ2hELENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLFNBQVM7WUFDN0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUM7WUFDbEUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVwRSxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQ3RDLEdBQUcsQ0FBQyxJQUFJLEVBQ1IsS0FBSyxFQUNMLEdBQUcsQ0FDSixDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUksVUFBVSxDQUNyQixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdELE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUNIO1FBQ0QsT0FBTyxFQUFFLElBQUksVUFBVSxDQUNyQixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyRCxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FDSDtRQUNELE9BQU8sRUFBRSxNQUFNLENBQUMsUUFBUTtLQUN6QixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbC9jb2xsZWN0aW9uLnRzXCI7XG5pbXBvcnQgdHlwZSB7IEJvdCB9IGZyb20gXCIuLi8uLi8uLi9ib3QudHNcIjtcbmltcG9ydCB7IERpc2NvcmRMaXN0QXJjaGl2ZWRUaHJlYWRzIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcblxuLyoqIEdldCB0aGUgYXJjaGl2ZWQgdGhyZWFkcyBmb3IgdGhpcyBjaGFubmVsLCBkZWZhdWx0cyB0byBwdWJsaWMgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBcmNoaXZlZFRocmVhZHMoXG4gIGJvdDogQm90LFxuICBjaGFubmVsSWQ6IGJpZ2ludCxcbiAgb3B0aW9ucz86IExpc3RBcmNoaXZlZFRocmVhZHMgJiB7XG4gICAgdHlwZT86IFwicHVibGljXCIgfCBcInByaXZhdGVcIiB8IFwicHJpdmF0ZUpvaW5lZFRocmVhZHNcIjtcbiAgfSxcbikge1xuICBsZXQgdXJsID0gb3B0aW9ucz8udHlwZSA9PT0gXCJwcml2YXRlSm9pbmVkVGhyZWFkc1wiXG4gICAgPyBib3QuY29uc3RhbnRzLnJvdXRlcy5USFJFQURfQVJDSElWRURfUFJJVkFURV9KT0lORUQoY2hhbm5lbElkLCBvcHRpb25zKVxuICAgIDogb3B0aW9ucz8udHlwZSA9PT0gXCJwcml2YXRlXCJcbiAgICA/IGJvdC5jb25zdGFudHMucm91dGVzLlRIUkVBRF9BUkNISVZFRF9QUklWQVRFKGNoYW5uZWxJZCwgb3B0aW9ucylcbiAgICA6IGJvdC5jb25zdGFudHMucm91dGVzLlRIUkVBRF9BUkNISVZFRF9QVUJMSUMoY2hhbm5lbElkLCBvcHRpb25zKTtcblxuICBjb25zdCByZXN1bHQgPSAoYXdhaXQgYm90LnJlc3QucnVuTWV0aG9kPERpc2NvcmRMaXN0QXJjaGl2ZWRUaHJlYWRzPihcbiAgICBib3QucmVzdCxcbiAgICBcIkdFVFwiLFxuICAgIHVybCxcbiAgKSk7XG5cbiAgcmV0dXJuIHtcbiAgICB0aHJlYWRzOiBuZXcgQ29sbGVjdGlvbihcbiAgICAgIHJlc3VsdC50aHJlYWRzLm1hcCgodCkgPT4ge1xuICAgICAgICBjb25zdCB0aHJlYWQgPSBib3QudHJhbnNmb3JtZXJzLmNoYW5uZWwoYm90LCB7IGNoYW5uZWw6IHQgfSk7XG4gICAgICAgIHJldHVybiBbdGhyZWFkLmlkLCB0aHJlYWRdO1xuICAgICAgfSksXG4gICAgKSxcbiAgICBtZW1iZXJzOiBuZXcgQ29sbGVjdGlvbihcbiAgICAgIHJlc3VsdC5tZW1iZXJzLm1hcCgobSkgPT4ge1xuICAgICAgICBjb25zdCBtZW1iZXIgPSBib3QudHJhbnNmb3JtZXJzLnRocmVhZE1lbWJlcihib3QsIG0pO1xuICAgICAgICByZXR1cm4gW21lbWJlci5pZCwgbWVtYmVyXTtcbiAgICAgIH0pLFxuICAgICksXG4gICAgaGFzTW9yZTogcmVzdWx0Lmhhc19tb3JlLFxuICB9O1xufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL2NoYW5uZWwjbGlzdC1wdWJsaWMtYXJjaGl2ZWQtdGhyZWFkcy1xdWVyeS1zdHJpbmctcGFyYW1zICovXG5leHBvcnQgaW50ZXJmYWNlIExpc3RBcmNoaXZlZFRocmVhZHMge1xuICAvKiogUmV0dXJucyB0aHJlYWRzIGJlZm9yZSB0aGlzIHRpbWVzdGFtcCAqL1xuICBiZWZvcmU/OiBudW1iZXI7XG4gIC8qKiBPcHRpb25hbCBtYXhpbXVtIG51bWJlciBvZiB0aHJlYWRzIHRvIHJldHVybiAqL1xuICBsaW1pdD86IG51bWJlcjtcbn1cbiJdfQ==