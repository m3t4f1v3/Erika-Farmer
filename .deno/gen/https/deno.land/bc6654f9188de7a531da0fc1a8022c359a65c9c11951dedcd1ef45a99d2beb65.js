/** This will create a infinite loop running in 1 seconds using tail recursion to keep rate limits clean. When a rate limit resets, this will remove it so the queue can proceed. */ export function processRateLimitedPaths(rest) {
    const now = Date.now();
    for (const [key, value] of rest.rateLimitedPaths.entries()){
        rest.debug(`[REST - processRateLimitedPaths] Running for of loop. ${value.resetTimestamp - now}`);
        // IF THE TIME HAS NOT REACHED CANCEL
        if (value.resetTimestamp > now) continue;
        // RATE LIMIT IS OVER, DELETE THE RATE LIMITER
        rest.rateLimitedPaths.delete(key);
        // IF IT WAS GLOBAL ALSO MARK THE GLOBAL VALUE AS FALSE
        if (key === "global") rest.globallyRateLimited = false;
    }
    // ALL PATHS ARE CLEARED CAN CANCEL OUT!
    if (!rest.rateLimitedPaths.size) {
        rest.processingRateLimitedPaths = false;
    } else {
        rest.processingRateLimitedPaths = true;
        // RECHECK IN 1 SECOND
        setTimeout(()=>{
            rest.debug(`[REST - processRateLimitedPaths] Running setTimeout.`);
            rest.processRateLimitedPaths(rest);
        }, 1000);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN0TWFuYWdlciB9IGZyb20gXCIuLi9ib3QudHNcIjtcblxuLyoqIFRoaXMgd2lsbCBjcmVhdGUgYSBpbmZpbml0ZSBsb29wIHJ1bm5pbmcgaW4gMSBzZWNvbmRzIHVzaW5nIHRhaWwgcmVjdXJzaW9uIHRvIGtlZXAgcmF0ZSBsaW1pdHMgY2xlYW4uIFdoZW4gYSByYXRlIGxpbWl0IHJlc2V0cywgdGhpcyB3aWxsIHJlbW92ZSBpdCBzbyB0aGUgcXVldWUgY2FuIHByb2NlZWQuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMocmVzdDogUmVzdE1hbmFnZXIpIHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByZXN0LnJhdGVMaW1pdGVkUGF0aHMuZW50cmllcygpKSB7XG4gICAgcmVzdC5kZWJ1ZyhgW1JFU1QgLSBwcm9jZXNzUmF0ZUxpbWl0ZWRQYXRoc10gUnVubmluZyBmb3Igb2YgbG9vcC4gJHt2YWx1ZS5yZXNldFRpbWVzdGFtcCAtIG5vd31gKTtcbiAgICAvLyBJRiBUSEUgVElNRSBIQVMgTk9UIFJFQUNIRUQgQ0FOQ0VMXG4gICAgaWYgKHZhbHVlLnJlc2V0VGltZXN0YW1wID4gbm93KSBjb250aW51ZTtcblxuICAgIC8vIFJBVEUgTElNSVQgSVMgT1ZFUiwgREVMRVRFIFRIRSBSQVRFIExJTUlURVJcbiAgICByZXN0LnJhdGVMaW1pdGVkUGF0aHMuZGVsZXRlKGtleSk7XG4gICAgLy8gSUYgSVQgV0FTIEdMT0JBTCBBTFNPIE1BUksgVEhFIEdMT0JBTCBWQUxVRSBBUyBGQUxTRVxuICAgIGlmIChrZXkgPT09IFwiZ2xvYmFsXCIpIHJlc3QuZ2xvYmFsbHlSYXRlTGltaXRlZCA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQUxMIFBBVEhTIEFSRSBDTEVBUkVEIENBTiBDQU5DRUwgT1VUIVxuICBpZiAoIXJlc3QucmF0ZUxpbWl0ZWRQYXRocy5zaXplKSB7XG4gICAgcmVzdC5wcm9jZXNzaW5nUmF0ZUxpbWl0ZWRQYXRocyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJlc3QucHJvY2Vzc2luZ1JhdGVMaW1pdGVkUGF0aHMgPSB0cnVlO1xuICAgIC8vIFJFQ0hFQ0sgSU4gMSBTRUNPTkRcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc3QuZGVidWcoYFtSRVNUIC0gcHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHNdIFJ1bm5pbmcgc2V0VGltZW91dC5gKTtcbiAgICAgIHJlc3QucHJvY2Vzc1JhdGVMaW1pdGVkUGF0aHMocmVzdCk7XG4gICAgfSwgMTAwMCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxvTEFBb0wsQ0FDcEwsT0FBTyxTQUFTLHVCQUF1QixDQUFDLElBQWlCLEVBQUU7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxBQUFDO0lBRXZCLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUU7UUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xHLHFDQUFxQztRQUNyQyxJQUFJLEtBQUssQ0FBQyxjQUFjLEdBQUcsR0FBRyxFQUFFLFNBQVM7UUFFekMsOENBQThDO1FBQzlDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsdURBQXVEO1FBQ3ZELElBQUksR0FBRyxLQUFLLFFBQVEsRUFBRSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDO0tBQ3hEO0lBRUQsd0NBQXdDO0lBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1FBQy9CLElBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFLLENBQUM7S0FDekMsTUFBTTtRQUNMLElBQUksQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUM7UUFDdkMsc0JBQXNCO1FBQ3RCLFVBQVUsQ0FBQyxJQUFNO1lBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLG9EQUFvRCxDQUFDLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNWO0NBQ0YifQ==