import { GatewayOpcodes } from "../../types/shared.ts";
import { createLeakyBucket } from "../../util/bucket.ts";
import { delay } from "../../util/utils.ts";
import { decompressWith } from "./deps.ts";
import { GATEWAY_RATE_LIMIT_RESET_INTERVAL, ShardState } from "./types.ts";
const decoder = new TextDecoder();
export async function handleMessage(shard, message) {
    message = message.data;
    if (shard.gatewayConfig.compress && message instanceof Blob) {
        message = decompressWith(new Uint8Array(await message.arrayBuffer()), 0, (slice) => decoder.decode(slice));
    }
    if (typeof message !== "string")
        return;
    const messageData = JSON.parse(message);
    switch (messageData.op) {
        case GatewayOpcodes.Heartbeat: {
            if (!shard.isOpen())
                return;
            shard.heart.lastBeat = Date.now();
            shard.socket?.send(JSON.stringify({
                op: GatewayOpcodes.Heartbeat,
                d: shard.previousSequenceNumber,
            }));
            shard.events.heartbeat?.(shard);
            break;
        }
        case GatewayOpcodes.Hello: {
            const interval = messageData.d.heartbeat_interval;
            shard.startHeartbeating(interval);
            if (shard.state !== ShardState.Resuming) {
                shard.bucket = createLeakyBucket({
                    max: shard.calculateSafeRequests(),
                    refillInterval: GATEWAY_RATE_LIMIT_RESET_INTERVAL,
                    refillAmount: shard.calculateSafeRequests(),
                    waiting: shard.bucket.waiting,
                });
            }
            shard.events.hello?.(shard);
            break;
        }
        case GatewayOpcodes.HeartbeatACK: {
            shard.heart.acknowledged = true;
            shard.heart.lastAck = Date.now();
            if (shard.heart.lastBeat) {
                shard.heart.rtt = shard.heart.lastAck - shard.heart.lastBeat;
            }
            shard.events.heartbeatAck?.(shard);
            break;
        }
        case GatewayOpcodes.Reconnect: {
            shard.events.requestedReconnect?.(shard);
            await shard.resume();
            break;
        }
        case GatewayOpcodes.InvalidSession: {
            const resumable = messageData.d;
            shard.events.invalidSession?.(shard, resumable);
            await delay(Math.floor((Math.random() * 4 + 1) * 1000));
            shard.resolves.get("INVALID_SESSION")?.(messageData);
            shard.resolves.delete("INVALID_SESSION");
            if (!resumable) {
                await shard.identify();
                break;
            }
            await shard.resume();
            break;
        }
    }
    if (messageData.t === "RESUMED") {
        shard.state = ShardState.Connected;
        shard.events.resumed?.(shard);
        shard.offlineSendQueue.map((resolve) => resolve());
        shard.resolves.get("RESUMED")?.(messageData);
        shard.resolves.delete("RESUMED");
    }
    else if (messageData.t === "READY") {
        const payload = messageData.d;
        shard.sessionId = payload.session_id;
        shard.state = ShardState.Connected;
        shard.offlineSendQueue.map((resolve) => resolve());
        shard.resolves.get("READY")?.(messageData);
        shard.resolves.delete("READY");
    }
    if (messageData.s !== null) {
        shard.previousSequenceNumber = messageData.s;
    }
    shard.events.message?.(shard, messageData);
}
//# sourceMappingURL=data:application/json;base64,