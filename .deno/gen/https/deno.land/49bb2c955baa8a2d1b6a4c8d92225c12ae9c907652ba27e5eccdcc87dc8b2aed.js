import { statusTypes } from "../../transformers/presence.ts";
export async function handleGuildMembersChunk(bot, data) {
    const payload = data.d;
    const guildId = bot.transformers.snowflake(payload.guild_id);
    if (payload.nonce && payload.chunk_index >= payload.chunk_count - 1) {
        bot.cache.fetchAllMembersProcessingRequests.get(payload.nonce)?.(`Member fetching complete. Nonce: ${payload.nonce}`);
    }
    return {
        guildId,
        members: payload.members.map((m) => bot.transformers.member(bot, m, guildId, bot.transformers.snowflake(m.user.id))),
        chunkIndex: payload.chunk_index,
        chunkCount: payload.chunk_count,
        notFound: payload.not_found?.map((id) => bot.transformers.snowflake(id)),
        presences: payload.presences?.map((presence) => ({
            user: bot.transformers.user(bot, presence.user),
            guildId,
            status: statusTypes[presence.status],
            activities: presence.activities.map((activity) => bot.transformers.activity(bot, activity)),
            clientStatus: {
                desktop: presence.client_status.desktop,
                mobile: presence.client_status.mobile,
                web: presence.client_status.web,
            },
        })),
        nonce: payload.nonce,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR1VJTERfTUVNQkVSU19DSFVOSy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdVSUxEX01FTUJFUlNfQ0hVTksudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzdELE1BQU0sQ0FBQyxLQUFLLFVBQVUsdUJBQXVCLENBQUMsR0FBUSxFQUFFLElBQTJCO0lBQ2pGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUE2QixDQUFDO0lBRW5ELE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU3RCxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRTtRQUNuRSxHQUFHLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDOUQsb0NBQW9DLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FDcEQsQ0FBQztLQUNIO0lBRUQsT0FBTztRQUNMLE9BQU87UUFDUCxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNqQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ2hGO1FBQ0QsVUFBVSxFQUFFLE9BQU8sQ0FBQyxXQUFXO1FBQy9CLFVBQVUsRUFBRSxPQUFPLENBQUMsV0FBVztRQUMvQixRQUFRLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMvQyxJQUFJLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDL0MsT0FBTztZQUNQLE1BQU0sRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNwQyxVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzRixZQUFZLEVBQUU7Z0JBQ1osT0FBTyxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTztnQkFDdkMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTTtnQkFDckMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRzthQUNoQztTQUNGLENBQUMsQ0FBQztRQUNILEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztLQUNyQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvdCB9IGZyb20gXCIuLi8uLi9ib3QudHNcIjtcbmltcG9ydCB7IHN0YXR1c1R5cGVzIH0gZnJvbSBcIi4uLy4uL3RyYW5zZm9ybWVycy9wcmVzZW5jZS50c1wiO1xuaW1wb3J0IHsgRGlzY29yZEdhdGV3YXlQYXlsb2FkLCBEaXNjb3JkR3VpbGRNZW1iZXJzQ2h1bmsgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZGlzY29yZC50c1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlR3VpbGRNZW1iZXJzQ2h1bmsoYm90OiBCb3QsIGRhdGE6IERpc2NvcmRHYXRld2F5UGF5bG9hZCkge1xuICBjb25zdCBwYXlsb2FkID0gZGF0YS5kIGFzIERpc2NvcmRHdWlsZE1lbWJlcnNDaHVuaztcblxuICBjb25zdCBndWlsZElkID0gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5ndWlsZF9pZCk7XG5cbiAgaWYgKHBheWxvYWQubm9uY2UgJiYgcGF5bG9hZC5jaHVua19pbmRleCA+PSBwYXlsb2FkLmNodW5rX2NvdW50IC0gMSkge1xuICAgIGJvdC5jYWNoZS5mZXRjaEFsbE1lbWJlcnNQcm9jZXNzaW5nUmVxdWVzdHMuZ2V0KHBheWxvYWQubm9uY2UpPy4oXG4gICAgICBgTWVtYmVyIGZldGNoaW5nIGNvbXBsZXRlLiBOb25jZTogJHtwYXlsb2FkLm5vbmNlfWAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ3VpbGRJZCxcbiAgICBtZW1iZXJzOiBwYXlsb2FkLm1lbWJlcnMubWFwKChtKSA9PlxuICAgICAgYm90LnRyYW5zZm9ybWVycy5tZW1iZXIoYm90LCBtLCBndWlsZElkLCBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShtLnVzZXIuaWQpKVxuICAgICksXG4gICAgY2h1bmtJbmRleDogcGF5bG9hZC5jaHVua19pbmRleCxcbiAgICBjaHVua0NvdW50OiBwYXlsb2FkLmNodW5rX2NvdW50LFxuICAgIG5vdEZvdW5kOiBwYXlsb2FkLm5vdF9mb3VuZD8ubWFwKChpZCkgPT4gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UoaWQpKSxcbiAgICBwcmVzZW5jZXM6IHBheWxvYWQucHJlc2VuY2VzPy5tYXAoKHByZXNlbmNlKSA9PiAoe1xuICAgICAgdXNlcjogYm90LnRyYW5zZm9ybWVycy51c2VyKGJvdCwgcHJlc2VuY2UudXNlciksXG4gICAgICBndWlsZElkLFxuICAgICAgc3RhdHVzOiBzdGF0dXNUeXBlc1twcmVzZW5jZS5zdGF0dXNdLFxuICAgICAgYWN0aXZpdGllczogcHJlc2VuY2UuYWN0aXZpdGllcy5tYXAoKGFjdGl2aXR5KSA9PiBib3QudHJhbnNmb3JtZXJzLmFjdGl2aXR5KGJvdCwgYWN0aXZpdHkpKSxcbiAgICAgIGNsaWVudFN0YXR1czoge1xuICAgICAgICBkZXNrdG9wOiBwcmVzZW5jZS5jbGllbnRfc3RhdHVzLmRlc2t0b3AsXG4gICAgICAgIG1vYmlsZTogcHJlc2VuY2UuY2xpZW50X3N0YXR1cy5tb2JpbGUsXG4gICAgICAgIHdlYjogcHJlc2VuY2UuY2xpZW50X3N0YXR1cy53ZWIsXG4gICAgICB9LFxuICAgIH0pKSxcbiAgICBub25jZTogcGF5bG9hZC5ub25jZSxcbiAgfTtcbn1cbiJdfQ==