import { Collection } from "./deps.ts";
import { setupCacheRemovals } from "./src/setupCacheRemovals.ts";
import { addCacheCollections } from "./src/addCacheCollections.ts";
import { setupCacheEdits } from "./src/setupCacheEdits.ts";
export function enableCachePlugin(rawBot) {
    rawBot.enabledPlugins.add("CACHE");
    const bot = addCacheCollections(rawBot);
    const { guild, user, member, channel, message, presence, role } = bot.transformers;
    bot.transformers.guild = function (_, payload) {
        const result = guild(bot, payload);
        if (result) {
            bot.guilds.set(result.id, result);
            const channels = payload.guild.channels || [];
            channels.forEach((channel) => {
                bot.transformers.channel(bot, { channel, guildId: result.id });
            });
        }
        return result;
    };
    bot.transformers.user = function (...args) {
        const result = user(...args);
        if (result) {
            bot.users.set(result.id, result);
        }
        return result;
    };
    bot.transformers.member = function (...args) {
        const result = member(...args);
        if (result) {
            bot.members.set(bot.transformers.snowflake(`${result.id}${result.guildId}`), result);
        }
        return result;
    };
    bot.transformers.channel = function (...args) {
        const result = channel(...args);
        if (result) {
            bot.channels.set(result.id, result);
        }
        return result;
    };
    bot.transformers.message = function (_, payload) {
        const result = message(bot, payload);
        if (result) {
            bot.messages.set(result.id, result);
            const user = bot.transformers.user(bot, payload.author);
            bot.users.set(user.id, user);
            if (payload.guild_id && payload.member) {
                const guildId = bot.transformers.snowflake(payload.guild_id);
                bot.members.set(bot.transformers.snowflake(`${payload.author.id}${payload.guild_id}`), bot.transformers.member(bot, payload.member, guildId, user.id));
            }
        }
        return result;
    };
    bot.transformers.presence = function (...args) {
        const result = presence(...args);
        if (result) {
            bot.presences.set(result.user.id, result);
        }
        return result;
    };
    bot.transformers.role = function (...args) {
        const result = role(...args);
        if (result) {
            bot.guilds.get(result.guildId)?.roles.set(result.id, result);
        }
        return result;
    };
    const { GUILD_EMOJIS_UPDATE } = bot.handlers;
    bot.handlers.GUILD_EMOJIS_UPDATE = function (_, data, shardId) {
        const payload = data.d;
        const guild = bot.guilds.get(bot.transformers.snowflake(payload.guild_id));
        if (guild) {
            guild.emojis = new Collection(payload.emojis.map((e) => {
                const emoji = bot.transformers.emoji(bot, e);
                return [emoji.id, emoji];
            }));
        }
        GUILD_EMOJIS_UPDATE(bot, data, shardId);
    };
    setupCacheRemovals(bot);
    setupCacheEdits(bot);
    return bot;
}
export default enableCachePlugin;
export * from "./src/addCacheCollections.ts";
export * from "./src/dispatchRequirements.ts";
export * from "./src/setupCacheEdits.ts";
export * from "./src/setupCacheRemovals.ts";
export * from "./src/sweepers.ts";
//# sourceMappingURL=data:application/json;base64,