import { msgpack } from "./deps.ts";
export class KwikTable {
    tableName;
    kwik;
    constructor(kwik, tableName) {
        this.kwik = kwik;
        this.tableName = tableName;
        this.kwik.tables.set(tableName, this);
    }
    async saveFile(id, data) {
        return await Deno.writeFile(`${this.kwik.directoryPath}${this.tableName}/${id}.kwik`, msgpack.encode(data, { extensionCodec: this.kwik.msgpackExtensionCodec }));
    }
    async create(id, data = {}) {
        if (await this.has(id)) {
            return this.kwik.error(`[Kwik: create] Cannot create already existing file file://${this.kwik.directoryPath}${this.tableName}/${id}.kwik`);
        }
        return await this.saveFile(id, data);
    }
    async has(id) {
        try {
            const info = await Deno.lstat(`${this.kwik.directoryPath}${this.tableName}/${id}.kwik`);
            return info.isFile;
        }
        catch (err) {
            if (err instanceof Deno.errors.NotFound) {
                return false;
            }
            throw err;
        }
    }
    async get(id) {
        try {
            const data = await Deno.readFile(`${this.kwik.directoryPath}${this.tableName}/${id}.kwik`);
            return msgpack.decode(data, {
                extensionCodec: this.kwik.msgpackExtensionCodec,
            });
        }
        catch (error) {
            await this.kwik.error(`[Kwik: get] Unable to read file file://${this.kwik.directoryPath}${this.tableName}/${id}.kwik`, error);
        }
    }
    async getAll() {
        const data = new Map();
        for await (const file of Deno.readDir(Deno.realPathSync(`${this.kwik.directoryPath}${this.tableName}`))) {
            if (!file.name || !file.isFile)
                continue;
            try {
                const name = file.name.substring(0, file.name.lastIndexOf("."));
                const decodedData = await this.get(name);
                if (decodedData) {
                    data.set(name, decodedData);
                }
            }
            catch (error) {
                await this.kwik.error(`[Kwik: getAll]: Unable to read file ${this.kwik.directoryPath}${this.tableName}/${file.name}`, error);
            }
        }
        return data;
    }
    async findMany(filter, returnArray = false) {
        const data = new Map();
        for await (const file of Deno.readDir(Deno.realPathSync(`${this.kwik.directoryPath}${this.tableName}`))) {
            if (!file.name || !file.isFile)
                continue;
            try {
                const name = file.name.substring(0, file.name.lastIndexOf("."));
                const decodedData = await this.get(name);
                if (decodedData) {
                    if (typeof filter === "function") {
                        if (filter(decodedData))
                            data.set(name, decodedData);
                    }
                    else {
                        const invalid = Object.keys(filter).find((key) => decodedData[key] !==
                            filter[key]);
                        if (!invalid)
                            data.set(name, decodedData);
                    }
                }
            }
            catch (error) {
                await this.kwik.error(`[Kwik Error: findMany]: Unable to read file ${this.kwik.directoryPath}${this.tableName}/${file.name}`, error);
            }
        }
        return returnArray ? [...data.values()] : data;
    }
    async findOne(filter) {
        for await (const file of Deno.readDir(Deno.realPathSync(`${this.kwik.directoryPath}${this.tableName}`))) {
            if (!file.name || !file.isFile)
                continue;
            try {
                const name = file.name.substring(0, file.name.lastIndexOf("."));
                const decodedData = await this.get(name);
                if (decodedData) {
                    if (typeof filter === "function") {
                        if (filter(decodedData))
                            return decodedData;
                    }
                    else {
                        const invalid = Object.keys(filter).find((key) => decodedData[key] !==
                            filter[key]);
                        if (!invalid)
                            return decodedData;
                    }
                }
            }
            catch (error) {
                await this.kwik.error(`[Kwik Error: findOne]: Unable to read file ${this.kwik.directoryPath}${this.tableName}/${file.name}`, error);
            }
        }
    }
    async set(id, data = {}) {
        return await this.saveFile(id, data);
    }
    async update(id, data = {}) {
        const existing = await this.get(id) || {};
        return this.set(id, existing ? { ...existing, ...data } : data);
    }
    async updateOne(filter, data) {
        for await (const file of Deno.readDir(Deno.realPathSync(`${this.kwik.directoryPath}${this.tableName}`))) {
            if (!file.name || !file.isFile)
                continue;
            try {
                const name = file.name.substring(0, file.name.lastIndexOf("."));
                const decodedData = await this.get(name);
                if (decodedData) {
                    if (typeof filter === "function") {
                        if (filter(decodedData))
                            return this.update(name, data);
                    }
                    else {
                        const invalid = Object.keys(filter).find((key) => decodedData[key] !==
                            filter[key]);
                        if (!invalid)
                            return this.update(name, data);
                    }
                }
            }
            catch (error) {
                await this.kwik.error(`[Kwik Error: updateOne]: Unable to read file ${this.kwik.directoryPath}${this.tableName}/${file.name}`, error);
            }
        }
    }
    async delete(id) {
        try {
            await Deno.remove(`${this.kwik.directoryPath}${this.tableName}/${id}.kwik`);
            return true;
        }
        catch (error) {
            await this.kwik.error(`[Kwik: delete]: Unable to delete file ${this.kwik.directoryPath}${this.tableName}/${id}.json`, error);
            return false;
        }
    }
    async deleteOne(filter) {
        const files = Deno.readDirSync(Deno.realPathSync(`${this.kwik.directoryPath}${this.tableName}`));
        for (const file of files) {
            if (!file.name || !file.isFile)
                continue;
            try {
                const name = file.name.substring(0, file.name.lastIndexOf("."));
                const decodedData = await this.get(name);
                if (decodedData) {
                    if (typeof filter === "function") {
                        return this.delete(name);
                    }
                    else {
                        const invalid = Object.keys(filter).find((key) => decodedData[key] !==
                            filter[key]);
                        if (!invalid)
                            return this.delete(name);
                    }
                }
            }
            catch (error) {
                await this.kwik.error(`[Kwik Error: deleteMany]: Unable to read file ${this.kwik.directoryPath}${this.tableName}/${file.name}`, error);
            }
        }
    }
    async deleteMany(filter) {
        const files = Deno.readDirSync(Deno.realPathSync(`${this.kwik.directoryPath}${this.tableName}`));
        for (const file of files) {
            if (!file.name || !file.isFile)
                continue;
            try {
                const name = file.name.substring(0, file.name.lastIndexOf("."));
                const decodedData = await this.get(name);
                if (decodedData) {
                    if (typeof filter === "function") {
                        await this.delete(name);
                    }
                    else {
                        const invalid = Object.keys(filter).find((key) => decodedData[key] !==
                            filter[key]);
                        if (!invalid)
                            await this.delete(name);
                    }
                }
            }
            catch (error) {
                await this.kwik.error(`[Kwik Error: deleteMany]: Unable to read file ${this.kwik.directoryPath}${this.tableName}/${file.name}`, error);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR3BDLE1BQU0sT0FBTyxTQUFTO0lBQ0gsU0FBUyxDQUFTO0lBQzNCLElBQUksQ0FBTztJQUVuQixZQUFZLElBQVUsRUFBRSxTQUFpQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUUzQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFHTyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQVUsRUFBRSxJQUFnQjtRQUNqRCxPQUFPLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FDekIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsT0FBTyxFQUN4RCxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FDMUUsQ0FBQztJQUNKLENBQUM7SUFHRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQVUsRUFBRSxPQUFtQixFQUFFO1FBRTVDLElBQUksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ3BCLDZEQUE2RCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsT0FBTyxDQUNuSCxDQUFDO1NBQ0g7UUFDRCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7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QUFJLENBQUMsS0FBSyxDQUNuQixpREFBaUQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ3hHLEtBQUssQ0FDTixDQUFDO2FBQ0g7U0FDRjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1zZ3BhY2sgfSBmcm9tIFwiLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBLd2lrIH0gZnJvbSBcIi4va3dpay50c1wiO1xuXG5leHBvcnQgY2xhc3MgS3dpa1RhYmxlPFQ+IHtcbiAgcHJpdmF0ZSByZWFkb25seSB0YWJsZU5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBrd2lrOiBLd2lrO1xuXG4gIGNvbnN0cnVjdG9yKGt3aWs6IEt3aWssIHRhYmxlTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5rd2lrID0ga3dpaztcbiAgICB0aGlzLnRhYmxlTmFtZSA9IHRhYmxlTmFtZTtcblxuICAgIHRoaXMua3dpay50YWJsZXMuc2V0KHRhYmxlTmFtZSwgdGhpcyk7XG4gIH1cblxuICAvKiogU2F2ZXMgdGhlIHByb3ZpZGVkIGRvY3VtZW50IGFzIGEgZmlsZSAqL1xuICBwcml2YXRlIGFzeW5jIHNhdmVGaWxlKGlkOiBzdHJpbmcsIGRhdGE6IFBhcnRpYWw8VD4pIHtcbiAgICByZXR1cm4gYXdhaXQgRGVuby53cml0ZUZpbGUoXG4gICAgICBgJHt0aGlzLmt3aWsuZGlyZWN0b3J5UGF0aH0ke3RoaXMudGFibGVOYW1lfS8ke2lkfS5rd2lrYCxcbiAgICAgIG1zZ3BhY2suZW5jb2RlKGRhdGEsIHsgZXh0ZW5zaW9uQ29kZWM6IHRoaXMua3dpay5tc2dwYWNrRXh0ZW5zaW9uQ29kZWMgfSksXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBDcmVhdGUgYSBkb2N1bWVudCB3aXRoIHRoZSBwcm92aWRlZCBkYXRhICovXG4gIGFzeW5jIGNyZWF0ZShpZDogc3RyaW5nLCBkYXRhOiBQYXJ0aWFsPFQ+ID0ge30pIHtcbiAgICAvLyBEZW5vIGRvZXNuJ3QgcHJvdmlkZSBhbnkgd29ya2Fyb3VuZCBmb3IgdGhpcy5cbiAgICBpZiAoYXdhaXQgdGhpcy5oYXMoaWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5rd2lrLmVycm9yKFxuICAgICAgICBgW0t3aWs6IGNyZWF0ZV0gQ2Fubm90IGNyZWF0ZSBhbHJlYWR5IGV4aXN0aW5nIGZpbGUgZmlsZTovLyR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX0vJHtpZH0ua3dpa2AsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zYXZlRmlsZShpZCwgZGF0YSk7XG4gIH1cblxuICAvKiogQ2hlY2sgaWYgYSBkb2N1bWVudCBleGlzdHNcbiAgICogQHJlbWFya3MgVGhpcyBtZXRob2Qgb25seSBjaGVja3MgZm9yIHRoZSBleGlzdGVuY2Ugb2YgdGhlIGZpbGUsIGFuZCBjYW4gcHJvdm9rZSBhIHJhY2UgY29uZGl0aW9uLiBJZiB5b3UgY2FuLCBydW4gdGhlIGFjdHVhbCBvcGVyYXRpb24gaW5zdGVhZCwgYW5kIGNhdGNoIGZvciBhbiBlcnJvci5cbiAgICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhlIGRvY3VtZW50IGV4aXN0cy5cbiAgICovXG4gIGFzeW5jIGhhcyhpZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBEZW5vLmxzdGF0KFxuICAgICAgICAgIGAke3RoaXMua3dpay5kaXJlY3RvcnlQYXRofSR7dGhpcy50YWJsZU5hbWV9LyR7aWR9Lmt3aWtgLFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIGluZm8uaXNGaWxlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIERlbm8uZXJyb3JzLk5vdEZvdW5kKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBHZXQgYSBkb2N1bWVudCBmcm9tIHRoZSB0YWJsZS5cbiAgICogQHJldHVybnMgVGhlIGRvY3VtZW50IGRhdGEgb3IgdW5kZWZpbmVkIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBhc3luYyBnZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8VCB8IHVuZGVmaW5lZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgRGVuby5yZWFkRmlsZShcbiAgICAgICAgYCR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX0vJHtpZH0ua3dpa2AsXG4gICAgICApO1xuICAgICAgcmV0dXJuIG1zZ3BhY2suZGVjb2RlKGRhdGEsIHtcbiAgICAgICAgZXh0ZW5zaW9uQ29kZWM6IHRoaXMua3dpay5tc2dwYWNrRXh0ZW5zaW9uQ29kZWMsXG4gICAgICB9KSBhcyBUO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhd2FpdCB0aGlzLmt3aWsuZXJyb3IoXG4gICAgICAgIGBbS3dpazogZ2V0XSBVbmFibGUgdG8gcmVhZCBmaWxlIGZpbGU6Ly8ke3RoaXMua3dpay5kaXJlY3RvcnlQYXRofSR7dGhpcy50YWJsZU5hbWV9LyR7aWR9Lmt3aWtgLFxuICAgICAgICBlcnJvcixcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEdldCBhbGwgZG9jdW1lbnRzIG9mIHRoZSB0YWJsZS5cbiAgICogQHJldHVybnMgQSBtYXAgb2YgYWxsIGRvY3VtZW50cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmcgZGF0YS5cbiAgICovXG4gIGFzeW5jIGdldEFsbCgpOiBQcm9taXNlPE1hcDxzdHJpbmcsIFQ+PiB7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBNYXA8c3RyaW5nLCBUPigpO1xuXG4gICAgZm9yIGF3YWl0IChcbiAgICAgIGNvbnN0IGZpbGUgb2YgRGVuby5yZWFkRGlyKFxuICAgICAgICBEZW5vLnJlYWxQYXRoU3luYyhgJHt0aGlzLmt3aWsuZGlyZWN0b3J5UGF0aH0ke3RoaXMudGFibGVOYW1lfWApLFxuICAgICAgKVxuICAgICkge1xuICAgICAgaWYgKCFmaWxlLm5hbWUgfHwgIWZpbGUuaXNGaWxlKSBjb250aW51ZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGZpbGUubmFtZS5zdWJzdHJpbmcoMCwgZmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgIGNvbnN0IGRlY29kZWREYXRhID0gYXdhaXQgdGhpcy5nZXQobmFtZSk7XG4gICAgICAgIGlmIChkZWNvZGVkRGF0YSkge1xuICAgICAgICAgIGRhdGEuc2V0KG5hbWUsIGRlY29kZWREYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5rd2lrLmVycm9yKFxuICAgICAgICAgIGBbS3dpazogZ2V0QWxsXTogVW5hYmxlIHRvIHJlYWQgZmlsZSAke3RoaXMua3dpay5kaXJlY3RvcnlQYXRofSR7dGhpcy50YWJsZU5hbWV9LyR7ZmlsZS5uYW1lfWAsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICAvKiogR2V0IGFsbCBkb2N1bWVudHMgZnJvbSBhIHRhYmxlIHRoYXQgbWF0Y2ggYSBmaWx0ZXIgKi9cbiAgYXN5bmMgZmluZE1hbnkoXG4gICAgZmlsdGVyOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8ICgodmFsdWU6IFQpID0+IGJvb2xlYW4pLFxuICAgIHJldHVybkFycmF5PzogZmFsc2UsXG4gICk6IFByb21pc2U8TWFwPHN0cmluZywgVD4+O1xuICBhc3luYyBmaW5kTWFueShcbiAgICBmaWx0ZXI6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgKCh2YWx1ZTogVCkgPT4gYm9vbGVhbiksXG4gICAgcmV0dXJuQXJyYXk/OiB0cnVlLFxuICApOiBQcm9taXNlPFRbXT47XG4gIGFzeW5jIGZpbmRNYW55KFxuICAgIGZpbHRlcjogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCAoKHZhbHVlOiBUKSA9PiBib29sZWFuKSxcbiAgICByZXR1cm5BcnJheSA9IGZhbHNlLFxuICApIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IE1hcDxzdHJpbmcsIFQ+KCk7XG5cbiAgICBmb3IgYXdhaXQgKFxuICAgICAgY29uc3QgZmlsZSBvZiBEZW5vLnJlYWREaXIoXG4gICAgICAgIERlbm8ucmVhbFBhdGhTeW5jKGAke3RoaXMua3dpay5kaXJlY3RvcnlQYXRofSR7dGhpcy50YWJsZU5hbWV9YCksXG4gICAgICApXG4gICAgKSB7XG4gICAgICBpZiAoIWZpbGUubmFtZSB8fCAhZmlsZS5pc0ZpbGUpIGNvbnRpbnVlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBuYW1lID0gZmlsZS5uYW1lLnN1YnN0cmluZygwLCBmaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZERhdGEgPSBhd2FpdCB0aGlzLmdldChuYW1lKTtcbiAgICAgICAgaWYgKGRlY29kZWREYXRhKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKGZpbHRlcihkZWNvZGVkRGF0YSkpIGRhdGEuc2V0KG5hbWUsIGRlY29kZWREYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaW52YWxpZCA9IE9iamVjdC5rZXlzKGZpbHRlcikuZmluZCgoa2V5KSA9PlxuICAgICAgICAgICAgICAoZGVjb2RlZERhdGEgYXMgdW5rbm93biBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPilba2V5XSAhPT1cbiAgICAgICAgICAgICAgICBmaWx0ZXJba2V5XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghaW52YWxpZCkgZGF0YS5zZXQobmFtZSwgZGVjb2RlZERhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5rd2lrLmVycm9yKFxuICAgICAgICAgIGBbS3dpayBFcnJvcjogZmluZE1hbnldOiBVbmFibGUgdG8gcmVhZCBmaWxlICR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX0vJHtmaWxlLm5hbWV9YCxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dXJuQXJyYXkgPyBbLi4uZGF0YS52YWx1ZXMoKV0gOiBkYXRhO1xuICB9XG5cbiAgLyoqIEdldHMgdGhlIGZpcnN0IGRvY3VtZW50IGZyb20gYSB0YWJsZSB0aGF0IG1hdGNoIGEgZmlsdGVyICovXG4gIGFzeW5jIGZpbmRPbmUoZmlsdGVyOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8ICgodmFsdWU6IFQpID0+IGJvb2xlYW4pKSB7XG4gICAgZm9yIGF3YWl0IChcbiAgICAgIGNvbnN0IGZpbGUgb2YgRGVuby5yZWFkRGlyKFxuICAgICAgICBEZW5vLnJlYWxQYXRoU3luYyhgJHt0aGlzLmt3aWsuZGlyZWN0b3J5UGF0aH0ke3RoaXMudGFibGVOYW1lfWApLFxuICAgICAgKVxuICAgICkge1xuICAgICAgaWYgKCFmaWxlLm5hbWUgfHwgIWZpbGUuaXNGaWxlKSBjb250aW51ZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGZpbGUubmFtZS5zdWJzdHJpbmcoMCwgZmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgIGNvbnN0IGRlY29kZWREYXRhID0gYXdhaXQgdGhpcy5nZXQobmFtZSk7XG4gICAgICAgIGlmIChkZWNvZGVkRGF0YSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIoZGVjb2RlZERhdGEpKSByZXR1cm4gZGVjb2RlZERhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGludmFsaWQgPSBPYmplY3Qua2V5cyhmaWx0ZXIpLmZpbmQoKGtleSkgPT5cbiAgICAgICAgICAgICAgKGRlY29kZWREYXRhIGFzIHVua25vd24gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW2tleV0gIT09XG4gICAgICAgICAgICAgICAgZmlsdGVyW2tleV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIWludmFsaWQpIHJldHVybiBkZWNvZGVkRGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGF3YWl0IHRoaXMua3dpay5lcnJvcihcbiAgICAgICAgICBgW0t3aWsgRXJyb3I6IGZpbmRPbmVdOiBVbmFibGUgdG8gcmVhZCBmaWxlICR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX0vJHtmaWxlLm5hbWV9YCxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogU2V0IGEgZG9jdW1lbnQgZGF0YS4gKi9cbiAgYXN5bmMgc2V0KGlkOiBzdHJpbmcsIGRhdGE6IFBhcnRpYWw8VD4gPSB7fSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNhdmVGaWxlKGlkLCBkYXRhKTtcbiAgfVxuXG4gIC8qKiBVcGRhdGVzIGEgZG9jdW1lbnRzJyBkYXRhLiBJZiB0aGlzIGRvY3VtZW50IGRvZXMgbm90IGV4aXN0LCBpdCB3aWxsIGNyZWF0ZSB0aGUgZG9jdW1lbnQuICovXG4gIGFzeW5jIHVwZGF0ZShpZDogc3RyaW5nLCBkYXRhOiBQYXJ0aWFsPFQ+ID0ge30pIHtcbiAgICBjb25zdCBleGlzdGluZyA9IGF3YWl0IHRoaXMuZ2V0KGlkKSB8fCB7fTtcbiAgICByZXR1cm4gdGhpcy5zZXQoaWQsIGV4aXN0aW5nID8geyAuLi5leGlzdGluZywgLi4uZGF0YSB9IDogZGF0YSk7XG4gIH1cblxuICAvKiogR2V0cyB0aGUgZmlyc3QgZG9jdW1lbnQgZnJvbSBhIHRhYmxlIHRoYXQgbWF0Y2ggYSBmaWx0ZXIgKi9cbiAgYXN5bmMgdXBkYXRlT25lKFxuICAgIGZpbHRlcjogUGFydGlhbDxUPiB8ICgodmFsdWU6IFQpID0+IGJvb2xlYW4pLFxuICAgIGRhdGE6IFBhcnRpYWw8VD4sXG4gICkge1xuICAgIGZvciBhd2FpdCAoXG4gICAgICBjb25zdCBmaWxlIG9mIERlbm8ucmVhZERpcihcbiAgICAgICAgRGVuby5yZWFsUGF0aFN5bmMoYCR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX1gKSxcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGlmICghZmlsZS5uYW1lIHx8ICFmaWxlLmlzRmlsZSkgY29udGludWU7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBmaWxlLm5hbWUuc3Vic3RyaW5nKDAsIGZpbGUubmFtZS5sYXN0SW5kZXhPZihcIi5cIikpO1xuICAgICAgICBjb25zdCBkZWNvZGVkRGF0YSA9IGF3YWl0IHRoaXMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoZGVjb2RlZERhdGEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyKGRlY29kZWREYXRhKSkgcmV0dXJuIHRoaXMudXBkYXRlKG5hbWUsIGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkID0gT2JqZWN0LmtleXMoZmlsdGVyKS5maW5kKChrZXkpID0+XG4gICAgICAgICAgICAgIChkZWNvZGVkRGF0YSBhcyB1bmtub3duIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtrZXldICE9PSAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIChmaWx0ZXIgYXMgYW55KVtrZXldXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpbnZhbGlkKSByZXR1cm4gdGhpcy51cGRhdGUobmFtZSwgZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBhd2FpdCB0aGlzLmt3aWsuZXJyb3IoXG4gICAgICAgICAgYFtLd2lrIEVycm9yOiB1cGRhdGVPbmVdOiBVbmFibGUgdG8gcmVhZCBmaWxlICR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX0vJHtmaWxlLm5hbWV9YCxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogRGVsZXRlcyBhIGRvY3VtZW50IGZyb20gdGhlIHRhYmxlLiAqL1xuICBhc3luYyBkZWxldGUoaWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBEZW5vLnJlbW92ZShcbiAgICAgICAgYCR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX0vJHtpZH0ua3dpa2AsXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGF3YWl0IHRoaXMua3dpay5lcnJvcihcbiAgICAgICAgYFtLd2lrOiBkZWxldGVdOiBVbmFibGUgdG8gZGVsZXRlIGZpbGUgJHt0aGlzLmt3aWsuZGlyZWN0b3J5UGF0aH0ke3RoaXMudGFibGVOYW1lfS8ke2lkfS5qc29uYCxcbiAgICAgICAgZXJyb3IsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBEZWxldGVzIG9uZSBkb2N1bWVudCBpbiBhIHRhYmxlIHRoYXQgbWF0Y2ggYSBmaWx0ZXIgKi9cbiAgYXN5bmMgZGVsZXRlT25lKGZpbHRlcjogUGFydGlhbDxUPiB8ICgodmFsdWU6IFQpID0+IGJvb2xlYW4pKSB7XG4gICAgY29uc3QgZmlsZXMgPSBEZW5vLnJlYWREaXJTeW5jKFxuICAgICAgRGVuby5yZWFsUGF0aFN5bmMoYCR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX1gKSxcbiAgICApO1xuXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICBpZiAoIWZpbGUubmFtZSB8fCAhZmlsZS5pc0ZpbGUpIGNvbnRpbnVlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBuYW1lID0gZmlsZS5uYW1lLnN1YnN0cmluZygwLCBmaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZERhdGEgPSBhd2FpdCB0aGlzLmdldChuYW1lKTtcbiAgICAgICAgaWYgKGRlY29kZWREYXRhKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlKG5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkID0gT2JqZWN0LmtleXMoZmlsdGVyKS5maW5kKChrZXkpID0+XG4gICAgICAgICAgICAgIChkZWNvZGVkRGF0YSBhcyB1bmtub3duIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtrZXldICE9PSAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIChmaWx0ZXIgYXMgYW55KVtrZXldXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpbnZhbGlkKSByZXR1cm4gdGhpcy5kZWxldGUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBhd2FpdCB0aGlzLmt3aWsuZXJyb3IoXG4gICAgICAgICAgYFtLd2lrIEVycm9yOiBkZWxldGVNYW55XTogVW5hYmxlIHRvIHJlYWQgZmlsZSAke3RoaXMua3dpay5kaXJlY3RvcnlQYXRofSR7dGhpcy50YWJsZU5hbWV9LyR7ZmlsZS5uYW1lfWAsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIERlbGV0ZXMgYWxsIGRvY3VtZW50cyBpbiBhIHRhYmxlIHRoYXQgbWF0Y2ggYSBmaWx0ZXIgKi9cbiAgYXN5bmMgZGVsZXRlTWFueShmaWx0ZXI6IFBhcnRpYWw8VD4gfCAoKHZhbHVlOiBUKSA9PiBib29sZWFuKSkge1xuICAgIGNvbnN0IGZpbGVzID0gRGVuby5yZWFkRGlyU3luYyhcbiAgICAgIERlbm8ucmVhbFBhdGhTeW5jKGAke3RoaXMua3dpay5kaXJlY3RvcnlQYXRofSR7dGhpcy50YWJsZU5hbWV9YCksXG4gICAgKTtcblxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgaWYgKCFmaWxlLm5hbWUgfHwgIWZpbGUuaXNGaWxlKSBjb250aW51ZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGZpbGUubmFtZS5zdWJzdHJpbmcoMCwgZmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgIGNvbnN0IGRlY29kZWREYXRhID0gYXdhaXQgdGhpcy5nZXQobmFtZSk7XG4gICAgICAgIGlmIChkZWNvZGVkRGF0YSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlKG5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkID0gT2JqZWN0LmtleXMoZmlsdGVyKS5maW5kKChrZXkpID0+XG4gICAgICAgICAgICAgIChkZWNvZGVkRGF0YSBhcyB1bmtub3duIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtrZXldICE9PSAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIChmaWx0ZXIgYXMgYW55KVtrZXldXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpbnZhbGlkKSBhd2FpdCB0aGlzLmRlbGV0ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGF3YWl0IHRoaXMua3dpay5lcnJvcihcbiAgICAgICAgICBgW0t3aWsgRXJyb3I6IGRlbGV0ZU1hbnldOiBVbmFibGUgdG8gcmVhZCBmaWxlICR7dGhpcy5rd2lrLmRpcmVjdG9yeVBhdGh9JHt0aGlzLnRhYmxlTmFtZX0vJHtmaWxlLm5hbWV9YCxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==