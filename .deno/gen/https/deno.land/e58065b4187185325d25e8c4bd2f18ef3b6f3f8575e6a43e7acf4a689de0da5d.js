export var PremiumTypes;
(function(PremiumTypes) {
    PremiumTypes[PremiumTypes["None"] = 0] = "None";
    PremiumTypes[PremiumTypes["NitroClassic"] = 1] = "NitroClassic";
    PremiumTypes[PremiumTypes["Nitro"] = 2] = "Nitro";
})(PremiumTypes || (PremiumTypes = {}));
export var UserFlags;
(function(UserFlags) {
    UserFlags[UserFlags["DiscordEmployee"] = 1] = "DiscordEmployee";
    UserFlags[UserFlags["PartneredServerOwner"] = 2] = "PartneredServerOwner";
    UserFlags[UserFlags["HypeSquadEventsMember"] = 4] = "HypeSquadEventsMember";
    UserFlags[UserFlags["BugHunterLevel1"] = 8] = "BugHunterLevel1";
    UserFlags[UserFlags["HouseBravery"] = 64] = "HouseBravery";
    UserFlags[UserFlags["HouseBrilliance"] = 128] = "HouseBrilliance";
    UserFlags[UserFlags["HouseBalance"] = 256] = "HouseBalance";
    UserFlags[UserFlags["EarlySupporter"] = 512] = "EarlySupporter";
    UserFlags[UserFlags["TeamUser"] = 1024] = "TeamUser";
    UserFlags[UserFlags["BugHunterLevel2"] = 16384] = "BugHunterLevel2";
    UserFlags[UserFlags["VerifiedBot"] = 65536] = "VerifiedBot";
    UserFlags[UserFlags["EarlyVerifiedBotDeveloper"] = 131072] = "EarlyVerifiedBotDeveloper";
    UserFlags[UserFlags["DiscordCertifiedModerator"] = 262144] = "DiscordCertifiedModerator";
    UserFlags[UserFlags["BotHttpInteractions"] = 524288] = "BotHttpInteractions";
})(UserFlags || (UserFlags = {}));
export var ChannelFlags;
(function(ChannelFlags) {
    ChannelFlags[ChannelFlags["None"] = 0] = "None";
    ChannelFlags[ChannelFlags["Pinned"] = 2] = "Pinned";
})(ChannelFlags || (ChannelFlags = {}));
export var IntegrationExpireBehaviors;
(function(IntegrationExpireBehaviors) {
    IntegrationExpireBehaviors[IntegrationExpireBehaviors["RemoveRole"] = 0] = "RemoveRole";
    IntegrationExpireBehaviors[IntegrationExpireBehaviors["Kick"] = 1] = "Kick";
})(IntegrationExpireBehaviors || (IntegrationExpireBehaviors = {}));
export var VisibilityTypes;
(function(VisibilityTypes) {
    VisibilityTypes[VisibilityTypes[/** Invisible to everyone except the user themselves */ "None"] = 0] = "None";
    VisibilityTypes[VisibilityTypes[/** Visible to everyone */ "Everyone"] = 1] = "Everyone";
})(VisibilityTypes || (VisibilityTypes = {}));
export var TeamMembershipStates;
(function(TeamMembershipStates) {
    TeamMembershipStates[TeamMembershipStates["Invited"] = 1] = "Invited";
    TeamMembershipStates[TeamMembershipStates["Accepted"] = 2] = "Accepted";
})(TeamMembershipStates || (TeamMembershipStates = {}));
export var ApplicationFlags;
(function(ApplicationFlags) {
    ApplicationFlags[ApplicationFlags[/** Intent required for bots in **100 or more servers** to receive [`presence_update` events](#DOCS_TOPICS_GATEWAY/presence-update) */ "GatewayPresence"] = 4096] = "GatewayPresence";
    ApplicationFlags[ApplicationFlags[/** Intent required for bots in under 100 servers to receive [`presence_update` events](#DOCS_TOPICS_GATEWAY/presence-update), found in Bot Settings */ "GatewayPresenceLimited"] = 8192] = "GatewayPresenceLimited";
    ApplicationFlags[ApplicationFlags[/** Intent required for bots in **100 or more servers** to receive member-related events like `guild_member_add`. See list of member-related events [under `GUILD_MEMBERS`](#DOCS_TOPICS_GATEWAY/list-of-intents) */ "GatewayGuildMembers"] = 16384] = "GatewayGuildMembers";
    ApplicationFlags[ApplicationFlags[/** Intent required for bots in under 100 servers to receive member-related events like `guild_member_add`, found in Bot Settings. See list of member-related events [under `GUILD_MEMBERS`](#DOCS_TOPICS_GATEWAY/list-of-intents) */ "GatewayGuildMembersLimited"] = 32768] = "GatewayGuildMembersLimited";
    ApplicationFlags[ApplicationFlags[/** Indicates unusual growth of an app that prevents verification */ "VerificationPendingGuildLimit"] = 65536] = "VerificationPendingGuildLimit";
    ApplicationFlags[ApplicationFlags[/** Indicates if an app is embedded within the Discord client (currently unavailable publicly) */ "Embedded"] = 131072] = "Embedded";
    ApplicationFlags[ApplicationFlags[/** Intent required for bots in **100 or more servers** to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055) */ "GatewayMessageCount"] = 262144] = "GatewayMessageCount";
    ApplicationFlags[ApplicationFlags[/** Intent required for bots in under 100 servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055), found in Bot Settings */ "GatewayMessageContentLimited"] = 524288] = "GatewayMessageContentLimited";
})(ApplicationFlags || (ApplicationFlags = {}));
export var MessageComponentTypes;
(function(MessageComponentTypes) {
    MessageComponentTypes[MessageComponentTypes[/** A container for other components */ "ActionRow"] = 1] = "ActionRow";
    MessageComponentTypes[MessageComponentTypes[/** A button object */ "Button"] = 2] = "Button";
    MessageComponentTypes[MessageComponentTypes[/** A select menu for picking from choices */ "SelectMenu"] = 3] = "SelectMenu";
    MessageComponentTypes[MessageComponentTypes[/** A text input object */ "InputText"] = 4] = "InputText";
})(MessageComponentTypes || (MessageComponentTypes = {}));
export var TextStyles;
(function(TextStyles) {
    TextStyles[TextStyles[/** Intended for short single-line text */ "Short"] = 1] = "Short";
    TextStyles[TextStyles[/** Intended for much longer inputs */ "Paragraph"] = 2] = "Paragraph";
})(TextStyles || (TextStyles = {}));
export var ButtonStyles;
(function(ButtonStyles) {
    ButtonStyles[ButtonStyles[/** A blurple button */ "Primary"] = 1] = "Primary";
    ButtonStyles[ButtonStyles[/** A grey button */ "Secondary"] = 2] = "Secondary";
    ButtonStyles[ButtonStyles[/** A green button */ "Success"] = 3] = "Success";
    ButtonStyles[ButtonStyles[/** A red button */ "Danger"] = 4] = "Danger";
    ButtonStyles[ButtonStyles[/** A button that navigates to a URL */ "Link"] = 5] = "Link";
})(ButtonStyles || (ButtonStyles = {}));
export var AllowedMentionsTypes;
(function(AllowedMentionsTypes) {
    AllowedMentionsTypes[/** Controls role mentions */ "RoleMentions"] = "roles";
    AllowedMentionsTypes[/** Controls user mentions */ "UserMentions"] = "users";
    AllowedMentionsTypes[/** Controls @everyone and @here mentions */ "EveryoneMentions"] = "everyone";
})(AllowedMentionsTypes || (AllowedMentionsTypes = {}));
export var WebhookTypes;
(function(WebhookTypes) {
    WebhookTypes[WebhookTypes[/** Incoming Webhooks can post messages to channels with a generated token */ "Incoming"] = 1] = "Incoming";
    WebhookTypes[WebhookTypes[/** Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels */ "ChannelFollower"] = 2] = "ChannelFollower";
    WebhookTypes[WebhookTypes[/** Application webhooks are webhooks used with Interactions */ "Application"] = 3] = "Application";
})(WebhookTypes || (WebhookTypes = {}));
export var DefaultMessageNotificationLevels;
(function(DefaultMessageNotificationLevels) {
    DefaultMessageNotificationLevels[DefaultMessageNotificationLevels[/** Members will receive notifications for all messages by default */ "AllMessages"] = 0] = "AllMessages";
    DefaultMessageNotificationLevels[DefaultMessageNotificationLevels[/** Members will receive notifications only for messages that @mention them by default */ "OnlyMentions"] = 1] = "OnlyMentions";
})(DefaultMessageNotificationLevels || (DefaultMessageNotificationLevels = {}));
export var ExplicitContentFilterLevels;
(function(ExplicitContentFilterLevels) {
    ExplicitContentFilterLevels[ExplicitContentFilterLevels[/** Media content will not be scanned */ "Disabled"] = 0] = "Disabled";
    ExplicitContentFilterLevels[ExplicitContentFilterLevels[/** Media content sent by members without roles will be scanned */ "MembersWithoutRoles"] = 1] = "MembersWithoutRoles";
    ExplicitContentFilterLevels[ExplicitContentFilterLevels[/** Media content sent by all members will be scanned */ "AllMembers"] = 2] = "AllMembers";
})(ExplicitContentFilterLevels || (ExplicitContentFilterLevels = {}));
export var VerificationLevels;
(function(VerificationLevels) {
    VerificationLevels[VerificationLevels[/** Unrestricted */ "None"] = 0] = "None";
    VerificationLevels[VerificationLevels[/** Must have verified email on account */ "Low"] = 1] = "Low";
    VerificationLevels[VerificationLevels[/** Must be registered on Discord for longer than 5 minutes */ "Medium"] = 2] = "Medium";
    VerificationLevels[VerificationLevels[/** Must be a member of the server for longer than 10 minutes */ "High"] = 3] = "High";
    VerificationLevels[VerificationLevels[/** Must have a verified phone number */ "VeryHigh"] = 4] = "VeryHigh";
})(VerificationLevels || (VerificationLevels = {}));
export var GuildFeatures;
(function(GuildFeatures) {
    GuildFeatures[/** Guild has access to set an invite splash background */ "InviteSplash"] = "INVITE_SPLASH";
    GuildFeatures[/** Guild has access to set 384 kbps bitrate in voice (previously VIP voice servers) */ "VipRegions"] = "VIP_REGIONS";
    GuildFeatures[/** Guild has access to set a vanity URL */ "VanityUrl"] = "VANITY_URL";
    GuildFeatures[/** Guild is verified */ "Verified"] = "VERIFIED";
    GuildFeatures[/** Guild is partnered */ "Partnered"] = "PARTNERED";
    GuildFeatures[/** Guild can enable welcome screen, Membership Screening, stage channels and discovery, and receives community updates */ "Community"] = "COMMUNITY";
    GuildFeatures[/** Guild has access to use commerce features (i.e. create store channels) */ "Commerce"] = "COMMERCE";
    GuildFeatures[/** Guild has access to create news channels */ "News"] = "NEWS";
    GuildFeatures[/** Guild is able to be discovered in the directory */ "Discoverable"] = "DISCOVERABLE";
    GuildFeatures[/** guild cannot be discoverable */ "DiscoverableDisabled"] = "DISCOVERABLE_DISABLED";
    GuildFeatures[/** Guild is able to be featured in the directory */ "Feature"] = "FEATURABLE";
    GuildFeatures[/** Guild has access to set an animated guild icon */ "AnimatedIcon"] = "ANIMATED_ICON";
    GuildFeatures[/** Guild has access to set a guild banner image */ "Banner"] = "BANNER";
    GuildFeatures[/** Guild has enabled the welcome screen */ "WelcomeScreenEnabled"] = "WELCOME_SCREEN_ENABLED";
    GuildFeatures[/** Guild has enabled [Membership Screening](https://discord.com/developers/docs/resources/guild#membership-screening-object) */ "MemberVerificationGateEnabled"] = "MEMBER_VERIFICATION_GATE_ENABLED";
    GuildFeatures[/** Guild can be previewed before joining via Membership Screening or the directory */ "PreviewEnabled"] = "PREVIEW_ENABLED";
    GuildFeatures[/** Guild has enabled ticketed events */ "TicketedEventsEnabled"] = "TICKETED_EVENTS_ENABLED";
    GuildFeatures[/** Guild has enabled monetization */ "MonetizationEnabled"] = "MONETIZATION_ENABLED";
    GuildFeatures[/** Guild has increased custom sticker slots */ "MoreStickers"] = "MORE_STICKERS";
    GuildFeatures[/** Guild has access to create private threads */ "PrivateThreads"] = "PRIVATE_THREADS";
    GuildFeatures[/** Guild is able to set role icons */ "RoleIcons"] = "ROLE_ICONS";
})(GuildFeatures || (GuildFeatures = {}));
export var MfaLevels;
(function(MfaLevels) {
    MfaLevels[MfaLevels[/** Guild has no MFA/2FA requirement for moderation actions */ "None"] = 0] = "None";
    MfaLevels[MfaLevels[/** Guild has a 2FA requirement for moderation actions */ "Elevated"] = 1] = "Elevated";
})(MfaLevels || (MfaLevels = {}));
export var SystemChannelFlags;
(function(SystemChannelFlags) {
    SystemChannelFlags[SystemChannelFlags[/** Suppress member join notifications */ "SuppressJoinNotifications"] = 1] = "SuppressJoinNotifications";
    SystemChannelFlags[SystemChannelFlags[/** Suppress server boost notifications */ "SuppressPremiumSubscriptions"] = 2] = "SuppressPremiumSubscriptions";
    SystemChannelFlags[SystemChannelFlags[/** Suppress server setup tips */ "SuppressGuildReminderNotifications"] = 4] = "SuppressGuildReminderNotifications";
    SystemChannelFlags[SystemChannelFlags[/** Hide member join sticker reply buttons */ "SuppressJoinNotificationReplies"] = 8] = "SuppressJoinNotificationReplies";
})(SystemChannelFlags || (SystemChannelFlags = {}));
export var PremiumTiers;
(function(PremiumTiers) {
    PremiumTiers[PremiumTiers[/** Guild has not unlocked any Server Boost perks */ "None"] = 0] = "None";
    PremiumTiers[PremiumTiers[/** Guild has unlocked Server Boost level 1 perks */ "Tier1"] = 1] = "Tier1";
    PremiumTiers[PremiumTiers[/** Guild has unlocked Server Boost level 2 perks */ "Tier2"] = 2] = "Tier2";
    PremiumTiers[PremiumTiers[/** Guild has unlocked Server Boost level 3 perks */ "Tier3"] = 3] = "Tier3";
})(PremiumTiers || (PremiumTiers = {}));
export var GuildNsfwLevel;
(function(GuildNsfwLevel) {
    GuildNsfwLevel[GuildNsfwLevel["Default"] = 0] = "Default";
    GuildNsfwLevel[GuildNsfwLevel["Explicit"] = 1] = "Explicit";
    GuildNsfwLevel[GuildNsfwLevel["Safe"] = 2] = "Safe";
    GuildNsfwLevel[GuildNsfwLevel["AgeRestricted"] = 3] = "AgeRestricted";
})(GuildNsfwLevel || (GuildNsfwLevel = {}));
export var ChannelTypes;
(function(ChannelTypes) {
    ChannelTypes[ChannelTypes[/** A text channel within a server */ "GuildText"] = 0] = "GuildText";
    ChannelTypes[ChannelTypes[/** A direct message between users */ "DM"] = 1] = "DM";
    ChannelTypes[ChannelTypes[/** A voice channel within a server */ "GuildVoice"] = 2] = "GuildVoice";
    ChannelTypes[ChannelTypes[/** A direct message between multiple users */ "GroupDm"] = 3] = "GroupDm";
    ChannelTypes[ChannelTypes[/** An organizational category that contains up to 50 channels */ "GuildCategory"] = 4] = "GuildCategory";
    ChannelTypes[ChannelTypes[/** A channel that users can follow and crosspost into their own server */ "GuildNews"] = 5] = "GuildNews";
    ChannelTypes[ChannelTypes[/** A temporary sub-channel within a GUILD_NEWS channel */ "GuildNewsThread"] = 10] = "GuildNewsThread";
    ChannelTypes[ChannelTypes[/** A temporary sub-channel within a GUILD_TEXT channel */ "GuildPublicThread"] = 11] = "GuildPublicThread";
    ChannelTypes[ChannelTypes[/** A temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission */ "GuildPrivateThread"] = 12] = "GuildPrivateThread";
    ChannelTypes[ChannelTypes[/** A voice channel for hosting events with an audience */ "GuildStageVoice"] = 13] = "GuildStageVoice";
    ChannelTypes[ChannelTypes[/** A channel in a hub containing the listed servers */ "GuildDirectory"] = 14] = "GuildDirectory";
    ChannelTypes[ChannelTypes[/** A channel which can only contains threads */ "GuildForum"] = 15] = "GuildForum";
})(ChannelTypes || (ChannelTypes = {}));
export var OverwriteTypes;
(function(OverwriteTypes) {
    OverwriteTypes[OverwriteTypes["Role"] = 0] = "Role";
    OverwriteTypes[OverwriteTypes["Member"] = 1] = "Member";
})(OverwriteTypes || (OverwriteTypes = {}));
export var VideoQualityModes;
(function(VideoQualityModes) {
    VideoQualityModes[VideoQualityModes[/** Discord chooses the quality for optimal performance */ "Auto"] = 1] = "Auto";
    VideoQualityModes[VideoQualityModes[/** 720p */ "Full"] = 2] = "Full";
})(VideoQualityModes || (VideoQualityModes = {}));
export var ActivityTypes;
(function(ActivityTypes) {
    ActivityTypes[ActivityTypes["Game"] = 0] = "Game";
    ActivityTypes[ActivityTypes["Streaming"] = 1] = "Streaming";
    ActivityTypes[ActivityTypes["Listening"] = 2] = "Listening";
    ActivityTypes[ActivityTypes["Watching"] = 3] = "Watching";
    ActivityTypes[ActivityTypes["Custom"] = 4] = "Custom";
    ActivityTypes[ActivityTypes["Competing"] = 5] = "Competing";
})(ActivityTypes || (ActivityTypes = {}));
export var MessageTypes;
(function(MessageTypes) {
    MessageTypes[MessageTypes["Default"] = 0] = "Default";
    MessageTypes[MessageTypes["RecipientAdd"] = 1] = "RecipientAdd";
    MessageTypes[MessageTypes["RecipientRemove"] = 2] = "RecipientRemove";
    MessageTypes[MessageTypes["Call"] = 3] = "Call";
    MessageTypes[MessageTypes["ChannelNameChange"] = 4] = "ChannelNameChange";
    MessageTypes[MessageTypes["ChannelIconChange"] = 5] = "ChannelIconChange";
    MessageTypes[MessageTypes["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
    MessageTypes[MessageTypes["GuildMemberJoin"] = 7] = "GuildMemberJoin";
    MessageTypes[MessageTypes["UserPremiumGuildSubscription"] = 8] = "UserPremiumGuildSubscription";
    MessageTypes[MessageTypes["UserPremiumGuildSubscriptionTier1"] = 9] = "UserPremiumGuildSubscriptionTier1";
    MessageTypes[MessageTypes["UserPremiumGuildSubscriptionTier2"] = 10] = "UserPremiumGuildSubscriptionTier2";
    MessageTypes[MessageTypes["UserPremiumGuildSubscriptionTier3"] = 11] = "UserPremiumGuildSubscriptionTier3";
    MessageTypes[MessageTypes["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
    MessageTypes[MessageTypes["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
    MessageTypes[MessageTypes["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
    MessageTypes[MessageTypes["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
    MessageTypes[MessageTypes["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
    MessageTypes[MessageTypes["ThreadCreated"] = 18] = "ThreadCreated";
    MessageTypes[MessageTypes["Reply"] = 19] = "Reply";
    MessageTypes[MessageTypes["ChatInputCommand"] = 20] = "ChatInputCommand";
    MessageTypes[MessageTypes["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
    MessageTypes[MessageTypes["GuildInviteReminder"] = 22] = "GuildInviteReminder";
    MessageTypes[MessageTypes["ContextMenuCommand"] = 23] = "ContextMenuCommand";
})(MessageTypes || (MessageTypes = {}));
export var MessageActivityTypes;
(function(MessageActivityTypes) {
    MessageActivityTypes[MessageActivityTypes["Join"] = 1] = "Join";
    MessageActivityTypes[MessageActivityTypes["Spectate"] = 2] = "Spectate";
    MessageActivityTypes[MessageActivityTypes["Listen"] = 3] = "Listen";
    MessageActivityTypes[MessageActivityTypes["JoinRequest"] = 4] = "JoinRequest";
})(MessageActivityTypes || (MessageActivityTypes = {}));
export var StickerTypes;
(function(StickerTypes) {
    StickerTypes[StickerTypes[/** an official sticker in a pack, part of Nitro or in a removed purchasable pack */ "Standard"] = 1] = "Standard";
    StickerTypes[StickerTypes[/** a sticker uploaded to a Boosted guild for the guild's members */ "Guild"] = 2] = "Guild";
})(StickerTypes || (StickerTypes = {}));
export var StickerFormatTypes;
(function(StickerFormatTypes) {
    StickerFormatTypes[StickerFormatTypes["Png"] = 1] = "Png";
    StickerFormatTypes[StickerFormatTypes["APng"] = 2] = "APng";
    StickerFormatTypes[StickerFormatTypes["Lottie"] = 3] = "Lottie";
})(StickerFormatTypes || (StickerFormatTypes = {}));
export var InteractionTypes;
(function(InteractionTypes) {
    InteractionTypes[InteractionTypes["Ping"] = 1] = "Ping";
    InteractionTypes[InteractionTypes["ApplicationCommand"] = 2] = "ApplicationCommand";
    InteractionTypes[InteractionTypes["MessageComponent"] = 3] = "MessageComponent";
    InteractionTypes[InteractionTypes["ApplicationCommandAutocomplete"] = 4] = "ApplicationCommandAutocomplete";
    InteractionTypes[InteractionTypes["ModalSubmit"] = 5] = "ModalSubmit";
})(InteractionTypes || (InteractionTypes = {}));
export var ApplicationCommandOptionTypes;
(function(ApplicationCommandOptionTypes) {
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["SubCommand"] = 1] = "SubCommand";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["SubCommandGroup"] = 2] = "SubCommandGroup";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["String"] = 3] = "String";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Integer"] = 4] = "Integer";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Boolean"] = 5] = "Boolean";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["User"] = 6] = "User";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Channel"] = 7] = "Channel";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Role"] = 8] = "Role";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Mentionable"] = 9] = "Mentionable";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Number"] = 10] = "Number";
    ApplicationCommandOptionTypes[ApplicationCommandOptionTypes["Attachment"] = 11] = "Attachment";
})(ApplicationCommandOptionTypes || (ApplicationCommandOptionTypes = {}));
export var AuditLogEvents;
(function(AuditLogEvents) {
    AuditLogEvents[AuditLogEvents[/** Server settings were updated */ "GuildUpdate"] = 1] = "GuildUpdate";
    AuditLogEvents[AuditLogEvents[/** Channel was created */ "ChannelCreate"] = 10] = "ChannelCreate";
    AuditLogEvents[AuditLogEvents[/** Channel settings were updated */ "ChannelUpdate"] = 11] = "ChannelUpdate";
    AuditLogEvents[AuditLogEvents[/** Channel was deleted */ "ChannelDelete"] = 12] = "ChannelDelete";
    AuditLogEvents[AuditLogEvents[/** Permission overwrite was added to a channel */ "ChannelOverwriteCreate"] = 13] = "ChannelOverwriteCreate";
    AuditLogEvents[AuditLogEvents[/** Permission overwrite was updated for a channel */ "ChannelOverwriteUpdate"] = 14] = "ChannelOverwriteUpdate";
    AuditLogEvents[AuditLogEvents[/** Permission overwrite was deleted from a channel */ "ChannelOverwriteDelete"] = 15] = "ChannelOverwriteDelete";
    AuditLogEvents[AuditLogEvents[/** Member was removed from server */ "MemberKick"] = 20] = "MemberKick";
    AuditLogEvents[AuditLogEvents[/** Members were pruned from server */ "MemberPrune"] = 21] = "MemberPrune";
    AuditLogEvents[AuditLogEvents[/** Member was banned from server */ "MemberBanAdd"] = 22] = "MemberBanAdd";
    AuditLogEvents[AuditLogEvents[/** Server ban was lifted for a member */ "MemberBanRemove"] = 23] = "MemberBanRemove";
    AuditLogEvents[AuditLogEvents[/** Member was updated in server */ "MemberUpdate"] = 24] = "MemberUpdate";
    AuditLogEvents[AuditLogEvents[/** Member was added or removed from a role */ "MemberRoleUpdate"] = 25] = "MemberRoleUpdate";
    AuditLogEvents[AuditLogEvents[/** Member was moved to a different voice channel */ "MemberMove"] = 26] = "MemberMove";
    AuditLogEvents[AuditLogEvents[/** Member was disconnected from a voice channel */ "MemberDisconnect"] = 27] = "MemberDisconnect";
    AuditLogEvents[AuditLogEvents[/** Bot user was added to server */ "BotAdd"] = 28] = "BotAdd";
    AuditLogEvents[AuditLogEvents[/** Role was created */ "RoleCreate"] = 30] = "RoleCreate";
    AuditLogEvents[AuditLogEvents[/** Role was edited */ "RoleUpdate"] = 31] = "RoleUpdate";
    AuditLogEvents[AuditLogEvents[/** Role was deleted */ "RoleDelete"] = 32] = "RoleDelete";
    AuditLogEvents[AuditLogEvents[/** Server invite was created */ "InviteCreate"] = 40] = "InviteCreate";
    AuditLogEvents[AuditLogEvents[/** Server invite was updated */ "InviteUpdate"] = 41] = "InviteUpdate";
    AuditLogEvents[AuditLogEvents[/** Server invite was deleted */ "InviteDelete"] = 42] = "InviteDelete";
    AuditLogEvents[AuditLogEvents[/** Webhook was created */ "WebhookCreate"] = 50] = "WebhookCreate";
    AuditLogEvents[AuditLogEvents[/** Webhook properties or channel were updated */ "WebhookUpdate"] = 51] = "WebhookUpdate";
    AuditLogEvents[AuditLogEvents[/** Webhook was deleted */ "WebhookDelete"] = 52] = "WebhookDelete";
    AuditLogEvents[AuditLogEvents[/** Emoji was created */ "EmojiCreate"] = 60] = "EmojiCreate";
    AuditLogEvents[AuditLogEvents[/** Emoji name was updated */ "EmojiUpdate"] = 61] = "EmojiUpdate";
    AuditLogEvents[AuditLogEvents[/** Emoji was deleted */ "EmojiDelete"] = 62] = "EmojiDelete";
    AuditLogEvents[AuditLogEvents[/** Single message was deleted */ "MessageDelete"] = 72] = "MessageDelete";
    AuditLogEvents[AuditLogEvents[/** Multiple messages were deleted */ "MessageBulkDelete"] = 73] = "MessageBulkDelete";
    AuditLogEvents[AuditLogEvents[/** Messaged was pinned to a channel */ "MessagePin"] = 74] = "MessagePin";
    AuditLogEvents[AuditLogEvents[/** Message was unpinned from a channel */ "MessageUnpin"] = 75] = "MessageUnpin";
    AuditLogEvents[AuditLogEvents[/** App was added to server */ "IntegrationCreate"] = 80] = "IntegrationCreate";
    AuditLogEvents[AuditLogEvents[/** App was updated (as an example, its scopes were updated) */ "IntegrationUpdate"] = 81] = "IntegrationUpdate";
    AuditLogEvents[AuditLogEvents[/** App was removed from server */ "IntegrationDelete"] = 82] = "IntegrationDelete";
    AuditLogEvents[AuditLogEvents[/** Stage instance was created (stage channel becomes live) */ "StageInstanceCreate"] = 83] = "StageInstanceCreate";
    AuditLogEvents[AuditLogEvents[/** Stage instace details were updated */ "StageInstanceUpdate"] = 84] = "StageInstanceUpdate";
    AuditLogEvents[AuditLogEvents[/** Stage instance was deleted (stage channel no longer live) */ "StageInstanceDelete"] = 85] = "StageInstanceDelete";
    AuditLogEvents[AuditLogEvents[/** Sticker was created */ "StickerCreate"] = 90] = "StickerCreate";
    AuditLogEvents[AuditLogEvents[/** Sticker details were updated */ "StickerUpdate"] = 91] = "StickerUpdate";
    AuditLogEvents[AuditLogEvents[/** Sticker was deleted */ "StickerDelete"] = 92] = "StickerDelete";
    AuditLogEvents[AuditLogEvents[/** Event was created */ "GuildScheduledEventCreate"] = 100] = "GuildScheduledEventCreate";
    AuditLogEvents[AuditLogEvents[/** Event was updated */ "GuildScheduledEventUpdate"] = 101] = "GuildScheduledEventUpdate";
    AuditLogEvents[AuditLogEvents[/** Event was cancelled */ "GuildScheduledEventDelete"] = 102] = "GuildScheduledEventDelete";
    AuditLogEvents[AuditLogEvents[/** Thread was created in a channel */ "ThreadCreate"] = 110] = "ThreadCreate";
    AuditLogEvents[AuditLogEvents[/** Thread was updated */ "ThreadUpdate"] = 111] = "ThreadUpdate";
    AuditLogEvents[AuditLogEvents[/** Thread was deleted */ "ThreadDelete"] = 112] = "ThreadDelete";
    AuditLogEvents[AuditLogEvents[/** Permissions were updated for a command */ "ApplicationCommandPermissionUpdate"] = 121] = "ApplicationCommandPermissionUpdate";
})(AuditLogEvents || (AuditLogEvents = {}));
export var ScheduledEventPrivacyLevel;
(function(ScheduledEventPrivacyLevel) {
    ScheduledEventPrivacyLevel[ScheduledEventPrivacyLevel[/** the scheduled event is public and available in discovery. DISCORD DEVS DISABLED THIS! WILL ERROR IF USED! */ // Public = 1,
    /** the scheduled event is only accessible to guild members */ "GuildOnly"] = 2] = "GuildOnly";
})(ScheduledEventPrivacyLevel || (ScheduledEventPrivacyLevel = {}));
export var ScheduledEventEntityType;
(function(ScheduledEventEntityType) {
    ScheduledEventEntityType[ScheduledEventEntityType["StageInstance"] = 1] = "StageInstance";
    ScheduledEventEntityType[ScheduledEventEntityType["Voice"] = 2] = "Voice";
    ScheduledEventEntityType[ScheduledEventEntityType["External"] = 3] = "External";
})(ScheduledEventEntityType || (ScheduledEventEntityType = {}));
export var ScheduledEventStatus;
(function(ScheduledEventStatus) {
    ScheduledEventStatus[ScheduledEventStatus["Scheduled"] = 1] = "Scheduled";
    ScheduledEventStatus[ScheduledEventStatus["Active"] = 2] = "Active";
    ScheduledEventStatus[ScheduledEventStatus["Completed"] = 3] = "Completed";
    ScheduledEventStatus[ScheduledEventStatus["Canceled"] = 4] = "Canceled";
})(ScheduledEventStatus || (ScheduledEventStatus = {}));
export var TargetTypes;
(function(TargetTypes) {
    TargetTypes[TargetTypes["Stream"] = 1] = "Stream";
    TargetTypes[TargetTypes["EmbeddedApplication"] = 2] = "EmbeddedApplication";
})(TargetTypes || (TargetTypes = {}));
export var ApplicationCommandTypes;
(function(ApplicationCommandTypes) {
    ApplicationCommandTypes[ApplicationCommandTypes[/** A text-based command that shows up when a user types `/` */ "ChatInput"] = 1] = "ChatInput";
    ApplicationCommandTypes[ApplicationCommandTypes[/** A UI-based command that shows up when you right click or tap on a user */ "User"] = 2] = "User";
    ApplicationCommandTypes[ApplicationCommandTypes[/** A UI-based command that shows up when you right click or tap on a message */ "Message"] = 3] = "Message";
})(ApplicationCommandTypes || (ApplicationCommandTypes = {}));
export var ApplicationCommandPermissionTypes;
(function(ApplicationCommandPermissionTypes) {
    ApplicationCommandPermissionTypes[ApplicationCommandPermissionTypes["Role"] = 1] = "Role";
    ApplicationCommandPermissionTypes[ApplicationCommandPermissionTypes["User"] = 2] = "User";
    ApplicationCommandPermissionTypes[ApplicationCommandPermissionTypes["Channel"] = 3] = "Channel";
})(ApplicationCommandPermissionTypes || (ApplicationCommandPermissionTypes = {}));
export var ActivityFlags;
(function(ActivityFlags) {
    ActivityFlags[ActivityFlags["Instance"] = 1] = "Instance";
    ActivityFlags[ActivityFlags["Join"] = 2] = "Join";
    ActivityFlags[ActivityFlags["Spectate"] = 4] = "Spectate";
    ActivityFlags[ActivityFlags["JoinRequest"] = 8] = "JoinRequest";
    ActivityFlags[ActivityFlags["Sync"] = 16] = "Sync";
    ActivityFlags[ActivityFlags["Play"] = 32] = "Play";
    ActivityFlags[ActivityFlags["PartyPrivacyFriends"] = 64] = "PartyPrivacyFriends";
    ActivityFlags[ActivityFlags["PartyPrivacyVoiceChannel"] = 128] = "PartyPrivacyVoiceChannel";
    ActivityFlags[ActivityFlags["Embedded"] = 256] = "Embedded";
})(ActivityFlags || (ActivityFlags = {}));
export var BitwisePermissionFlags;
(function(BitwisePermissionFlags) {
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows creation of instant invites */ "CREATE_INSTANT_INVITE"] = 0x0000000000000001] = "CREATE_INSTANT_INVITE";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows kicking members */ "KICK_MEMBERS"] = 0x0000000000000002] = "KICK_MEMBERS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows banning members */ "BAN_MEMBERS"] = 0x0000000000000004] = "BAN_MEMBERS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows all permissions and bypasses channel permission overwrites */ "ADMINISTRATOR"] = 0x0000000000000008] = "ADMINISTRATOR";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows management and editing of channels */ "MANAGE_CHANNELS"] = 0x0000000000000010] = "MANAGE_CHANNELS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows management and editing of the guild */ "MANAGE_GUILD"] = 0x0000000000000020] = "MANAGE_GUILD";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for the addition of reactions to messages */ "ADD_REACTIONS"] = 0x0000000000000040] = "ADD_REACTIONS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for viewing of audit logs */ "VIEW_AUDIT_LOG"] = 0x0000000000000080] = "VIEW_AUDIT_LOG";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for using priority speaker in a voice channel */ "PRIORITY_SPEAKER"] = 0x0000000000000100] = "PRIORITY_SPEAKER";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows the user to go live */ "STREAM"] = 0x0000000000000200] = "STREAM";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels */ "VIEW_CHANNEL"] = 0x0000000000000400] = "VIEW_CHANNEL";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for sending messages in a channel. (does not allow sending messages in threads) */ "SEND_MESSAGES"] = 0x0000000000000800] = "SEND_MESSAGES";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for sending of /tts messages */ "SEND_TTS_MESSAGES"] = 0x0000000000001000] = "SEND_TTS_MESSAGES";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for deletion of other users messages */ "MANAGE_MESSAGES"] = 0x0000000000002000] = "MANAGE_MESSAGES";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Links sent by users with this permission will be auto-embedded */ "EMBED_LINKS"] = 0x0000000000004000] = "EMBED_LINKS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for uploading images and files */ "ATTACH_FILES"] = 0x0000000000008000] = "ATTACH_FILES";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for reading of message history */ "READ_MESSAGE_HISTORY"] = 0x0000000000010000] = "READ_MESSAGE_HISTORY";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for using the @everyone tag to notify all users in a channel, and the @here tag to notify all online users in a channel */ "MENTION_EVERYONE"] = 0x0000000000020000] = "MENTION_EVERYONE";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows the usage of custom emojis from other servers */ "USE_EXTERNAL_EMOJIS"] = 0x0000000000040000] = "USE_EXTERNAL_EMOJIS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for viewing guild insights */ "VIEW_GUILD_INSIGHTS"] = 0x0000000000080000] = "VIEW_GUILD_INSIGHTS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for joining of a voice channel */ "CONNECT"] = 0x0000000000100000] = "CONNECT";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for speaking in a voice channel */ "SPEAK"] = 0x0000000000200000] = "SPEAK";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for muting members in a voice channel */ "MUTE_MEMBERS"] = 0x0000000000400000] = "MUTE_MEMBERS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for deafening of members in a voice channel */ "DEAFEN_MEMBERS"] = 0x0000000000800000] = "DEAFEN_MEMBERS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for moving of members between voice channels */ "MOVE_MEMBERS"] = 0x0000000001000000] = "MOVE_MEMBERS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for using voice-activity-detection in a voice channel */ "USE_VAD"] = 0x0000000002000000] = "USE_VAD";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for modification of own nickname */ "CHANGE_NICKNAME"] = 0x0000000004000000] = "CHANGE_NICKNAME";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for modification of other users nicknames */ "MANAGE_NICKNAMES"] = 0x0000000008000000] = "MANAGE_NICKNAMES";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows management and editing of roles */ "MANAGE_ROLES"] = 0x0000000010000000] = "MANAGE_ROLES";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows management and editing of webhooks */ "MANAGE_WEBHOOKS"] = 0x0000000020000000] = "MANAGE_WEBHOOKS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows management and editing of emojis */ "MANAGE_EMOJIS"] = 0x0000000040000000] = "MANAGE_EMOJIS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows members to use application commands in text channels */ "USE_SLASH_COMMANDS"] = 0x0000000080000000] = "USE_SLASH_COMMANDS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for requesting to speak in stage channels. */ "REQUEST_TO_SPEAK"] = 0x0000000100000000] = "REQUEST_TO_SPEAK";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for creating, editing, and deleting scheduled events */ "MANAGE_EVENTS"] = 0x0000000200000000] = "MANAGE_EVENTS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for deleting and archiving threads, and viewing all private threads */ "MANAGE_THREADS"] = 0x0000000400000000] = "MANAGE_THREADS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for creating public and announcement threads */ "CREATE_PUBLIC_THREADS"] = 0x0000000800000000] = "CREATE_PUBLIC_THREADS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for creating private threads */ "CREATE_PRIVATE_THREADS"] = 0x0000001000000000] = "CREATE_PRIVATE_THREADS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows the usage of custom stickers from other servers */ "USE_EXTERNAL_STICKERS"] = 0x0000002000000000] = "USE_EXTERNAL_STICKERS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for sending messages in threads */ "SEND_MESSAGES_IN_THREADS"] = 0x0000004000000000] = "SEND_MESSAGES_IN_THREADS";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for launching activities (applications with the `EMBEDDED` flag) in a voice channel. */ "USE_EMBEDDED_ACTIVITIES"] = 0x0000008000000000] = "USE_EMBEDDED_ACTIVITIES";
    BitwisePermissionFlags[BitwisePermissionFlags[/** Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels */ "MODERATE_MEMBERS"] = 0x0000010000000000] = "MODERATE_MEMBERS";
})(BitwisePermissionFlags || (BitwisePermissionFlags = {}));
export var VoiceOpcodes;
(function(VoiceOpcodes) {
    VoiceOpcodes[VoiceOpcodes[/** Begin a voice websocket connection. */ "Identify"] = 0] = "Identify";
    VoiceOpcodes[VoiceOpcodes[/** Select the voice protocol. */ "SelectProtocol"] = 1] = "SelectProtocol";
    VoiceOpcodes[VoiceOpcodes[/** Complete the websocket handshake. */ "Ready"] = 2] = "Ready";
    VoiceOpcodes[VoiceOpcodes[/** Keep the websocket connection alive. */ "Heartbeat"] = 3] = "Heartbeat";
    VoiceOpcodes[VoiceOpcodes[/** Describe the session. */ "SessionDescription"] = 4] = "SessionDescription";
    VoiceOpcodes[VoiceOpcodes[/** Indicate which users are speaking. */ "Speaking"] = 5] = "Speaking";
    VoiceOpcodes[VoiceOpcodes[/** Sent to acknowledge a received client heartbeat. */ "HeartbeatACK"] = 6] = "HeartbeatACK";
    VoiceOpcodes[VoiceOpcodes[/** Resume a connection. */ "Resume"] = 7] = "Resume";
    VoiceOpcodes[VoiceOpcodes[/** Time to wait between sending heartbeats in milliseconds. */ "Hello"] = 8] = "Hello";
    VoiceOpcodes[VoiceOpcodes[/** Acknowledge a successful session resume. */ "Resumed"] = 9] = "Resumed";
    VoiceOpcodes[VoiceOpcodes[/** A client has disconnected from the voice channel */ "ClientDisconnect"] = 13] = "ClientDisconnect";
})(VoiceOpcodes || (VoiceOpcodes = {}));
export var VoiceCloseEventCodes;
(function(VoiceCloseEventCodes) {
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** You sent an invalid [opcode](https://discord.com/developers/docs/topics/opcodes-and-status-codes#voice-voice-opcodes). */ "UnknownOpcode"] = 4001] = "UnknownOpcode";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** You sent a invalid payload in your [identifying](https://discord.com/developers/docs/topics/gateway#identify) to the Gateway. */ "FailedToDecodePayload"] = 4002] = "FailedToDecodePayload";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** You sent a payload before [identifying](https://discord.com/developers/docs/topics/gateway#identify) with the Gateway. */ "NotAuthenticated"] = 4003] = "NotAuthenticated";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** The token you sent in your [identify](https://discord.com/developers/docs/topics/gateway#identify) payload is incorrect. */ "AuthenticationFailed"] = 4004] = "AuthenticationFailed";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** You sent more than one [identify](https://discord.com/developers/docs/topics/gateway#identify) payload. Stahp. */ "AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** Your session is no longer valid. */ "SessionNoLongerValid"] = 4006] = "SessionNoLongerValid";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** Your session has timed out. */ "SessionTimedOut"] = 4009] = "SessionTimedOut";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** We can't find the server you're trying to connect to. */ "ServerNotFound"] = 4011] = "ServerNotFound";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** We didn't recognize the [protocol](https://discord.com/developers/docs/topics/voice-connections#establishing-a-voice-udp-connection-example-select-protocol-payload) you sent. */ "UnknownProtocol"] = 4012] = "UnknownProtocol";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** Channel was deleted, you were kicked, voice server changed, or the main gateway session was dropped. Should not reconnect. */ "Disconnect"] = 4014] = "Disconnect";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** The server crashed. Our bad! Try [resuming](https://discord.com/developers/docs/topics/voice-connections#resuming-voice-connection). */ "VoiceServerCrashed"] = 4015] = "VoiceServerCrashed";
    VoiceCloseEventCodes[VoiceCloseEventCodes[/** We didn't recognize your [encryption](https://discord.com/developers/docs/topics/voice-connections#encrypting-and-sending-voice). */ "UnknownEncryptionMode"] = 4016] = "UnknownEncryptionMode";
})(VoiceCloseEventCodes || (VoiceCloseEventCodes = {}));
export var RpcErrorCodes;
(function(RpcErrorCodes) {
    RpcErrorCodes[RpcErrorCodes[/** An unknown error occurred. */ "UnknownError"] = 1000] = "UnknownError";
    RpcErrorCodes[RpcErrorCodes[/** You sent an invalid payload. */ "InvalidPayload"] = 4000] = "InvalidPayload";
    RpcErrorCodes[RpcErrorCodes[/** Invalid command name specified. */ "InvalidCommand"] = 4002] = "InvalidCommand";
    RpcErrorCodes[RpcErrorCodes[/** Invalid guild ID specified. */ "InvalidGuild"] = 4003] = "InvalidGuild";
    RpcErrorCodes[RpcErrorCodes[/** Invalid event name specified. */ "InvalidEvent"] = 4004] = "InvalidEvent";
    RpcErrorCodes[RpcErrorCodes[/** Invalid channel ID specified. */ "InvalidChannel"] = 4005] = "InvalidChannel";
    RpcErrorCodes[RpcErrorCodes[/** You lack permissions to access the given resource. */ "InvalidPermissions"] = 4006] = "InvalidPermissions";
    RpcErrorCodes[RpcErrorCodes[/** An invalid OAuth2 application ID was used to authorize or authenticate with. */ "InvalidClientId"] = 4007] = "InvalidClientId";
    RpcErrorCodes[RpcErrorCodes[/** An invalid OAuth2 application origin was used to authorize or authenticate with. */ "InvalidOrigin"] = 4008] = "InvalidOrigin";
    RpcErrorCodes[RpcErrorCodes[/** An invalid OAuth2 token was used to authorize or authenticate with. */ "InvalidToken"] = 4009] = "InvalidToken";
    RpcErrorCodes[RpcErrorCodes[/** The specified user ID was invalid. */ "InvalidUser"] = 4010] = "InvalidUser";
    RpcErrorCodes[RpcErrorCodes[/** A standard OAuth2 error occurred; check the data object for the OAuth2 error details. */ "OAuth2Error"] = 5000] = "OAuth2Error";
    RpcErrorCodes[RpcErrorCodes[/** An asynchronous `SELECT_TEXT_CHANNEL`/`SELECT_VOICE_CHANNEL` command timed out. */ "SelectChannelTimedOut"] = 5001] = "SelectChannelTimedOut";
    RpcErrorCodes[RpcErrorCodes[/** An asynchronous `GET_GUILD` command timed out. */ "GetGuildTimedOut"] = 5002] = "GetGuildTimedOut";
    RpcErrorCodes[RpcErrorCodes[/** You tried to join a user to a voice channel but the user was already in one. */ "SelectVoiceForceRequired"] = 5003] = "SelectVoiceForceRequired";
    RpcErrorCodes[RpcErrorCodes[/** You tried to capture more than one shortcut key at once. */ "CaptureShortcutAlreadyListening"] = 5004] = "CaptureShortcutAlreadyListening";
})(RpcErrorCodes || (RpcErrorCodes = {}));
export var RpcCloseEventCodes;
(function(RpcCloseEventCodes) {
    RpcCloseEventCodes[RpcCloseEventCodes[/** You connected to the RPC server with an invalid client ID. */ "InvalidClientId"] = 4000] = "InvalidClientId";
    RpcCloseEventCodes[RpcCloseEventCodes[/** You connected to the RPC server with an invalid origin. */ "InvalidOrigin"] = 4001] = "InvalidOrigin";
    RpcCloseEventCodes[RpcCloseEventCodes[/** You are being rate limited. */ "RateLimited"] = 4002] = "RateLimited";
    RpcCloseEventCodes[RpcCloseEventCodes[/** The OAuth2 token associated with a connection was revoked, get a new one! */ "TokenRevoked"] = 4003] = "TokenRevoked";
    RpcCloseEventCodes[RpcCloseEventCodes[/** The RPC Server version specified in the connection string was not valid. */ "InvalidVersion"] = 4004] = "InvalidVersion";
    RpcCloseEventCodes[RpcCloseEventCodes[/** The encoding specified in the connection string was not valid. */ "InvalidEncoding"] = 4005] = "InvalidEncoding";
})(RpcCloseEventCodes || (RpcCloseEventCodes = {}));
export var JsonErrorCodes;
(function(JsonErrorCodes) {
    JsonErrorCodes[JsonErrorCodes[/** General error (such as a malformed request body, amongst other things) */ "GeneralError"] = 0] = "GeneralError";
    JsonErrorCodes[JsonErrorCodes["UnknownAccount"] = 10001] = "UnknownAccount";
    JsonErrorCodes[JsonErrorCodes["UnknownApplication"] = 10002] = "UnknownApplication";
    JsonErrorCodes[JsonErrorCodes["UnknownChannel"] = 10003] = "UnknownChannel";
    JsonErrorCodes[JsonErrorCodes["UnknownGuild"] = 10004] = "UnknownGuild";
    JsonErrorCodes[JsonErrorCodes["UnknownIntegration"] = 10005] = "UnknownIntegration";
    JsonErrorCodes[JsonErrorCodes["UnknownInvite"] = 10006] = "UnknownInvite";
    JsonErrorCodes[JsonErrorCodes["UnknownMember"] = 10007] = "UnknownMember";
    JsonErrorCodes[JsonErrorCodes["UnknownMessage"] = 10008] = "UnknownMessage";
    JsonErrorCodes[JsonErrorCodes["UnknownPermissionOverwrite"] = 10009] = "UnknownPermissionOverwrite";
    JsonErrorCodes[JsonErrorCodes["UnknownProvider"] = 10010] = "UnknownProvider";
    JsonErrorCodes[JsonErrorCodes["UnknownRole"] = 10011] = "UnknownRole";
    JsonErrorCodes[JsonErrorCodes["UnknownToken"] = 10012] = "UnknownToken";
    JsonErrorCodes[JsonErrorCodes["UnknownUser"] = 10013] = "UnknownUser";
    JsonErrorCodes[JsonErrorCodes["UnknownEmoji"] = 10014] = "UnknownEmoji";
    JsonErrorCodes[JsonErrorCodes["UnknownWebhook"] = 10015] = "UnknownWebhook";
    JsonErrorCodes[JsonErrorCodes["UnknownWebhookService"] = 10016] = "UnknownWebhookService";
    JsonErrorCodes[JsonErrorCodes["UnknownSession"] = 10020] = "UnknownSession";
    JsonErrorCodes[JsonErrorCodes["UnknownBan"] = 10026] = "UnknownBan";
    JsonErrorCodes[JsonErrorCodes["UnknownSKU"] = 10027] = "UnknownSKU";
    JsonErrorCodes[JsonErrorCodes["UnknownStoreListing"] = 10028] = "UnknownStoreListing";
    JsonErrorCodes[JsonErrorCodes["UnknownEntitlement"] = 10029] = "UnknownEntitlement";
    JsonErrorCodes[JsonErrorCodes["UnknownBuild"] = 10030] = "UnknownBuild";
    JsonErrorCodes[JsonErrorCodes["UnknownLobby"] = 10031] = "UnknownLobby";
    JsonErrorCodes[JsonErrorCodes["UnknownBranch"] = 10032] = "UnknownBranch";
    JsonErrorCodes[JsonErrorCodes["UnknownStoreDirectoryLayout"] = 10033] = "UnknownStoreDirectoryLayout";
    JsonErrorCodes[JsonErrorCodes["UnknownRedistributable"] = 10036] = "UnknownRedistributable";
    JsonErrorCodes[JsonErrorCodes["UnknownGiftCode"] = 10038] = "UnknownGiftCode";
    JsonErrorCodes[JsonErrorCodes["UnknownStream"] = 10049] = "UnknownStream";
    JsonErrorCodes[JsonErrorCodes["UnknownPremiumServerSubscribeCooldown"] = 10050] = "UnknownPremiumServerSubscribeCooldown";
    JsonErrorCodes[JsonErrorCodes["UnknownGuildTemplate"] = 10057] = "UnknownGuildTemplate";
    JsonErrorCodes[JsonErrorCodes["UnknownDiscoveryCategory"] = 10059] = "UnknownDiscoveryCategory";
    JsonErrorCodes[JsonErrorCodes["UnknownSticker"] = 10060] = "UnknownSticker";
    JsonErrorCodes[JsonErrorCodes["UnknownInteraction"] = 10062] = "UnknownInteraction";
    JsonErrorCodes[JsonErrorCodes["UnknownApplicationCommand"] = 10063] = "UnknownApplicationCommand";
    JsonErrorCodes[JsonErrorCodes["UnknownVoiceState"] = 10065] = "UnknownVoiceState";
    JsonErrorCodes[JsonErrorCodes["UnknownApplicationCommandPermissions"] = 10066] = "UnknownApplicationCommandPermissions";
    JsonErrorCodes[JsonErrorCodes["UnknownStageInstance"] = 10067] = "UnknownStageInstance";
    JsonErrorCodes[JsonErrorCodes["UnknownGuildMemberVerificationForm"] = 10068] = "UnknownGuildMemberVerificationForm";
    JsonErrorCodes[JsonErrorCodes["UnknownGuildWelcomeScreen"] = 10069] = "UnknownGuildWelcomeScreen";
    JsonErrorCodes[JsonErrorCodes["UnknownGuildScheduledEvent"] = 10070] = "UnknownGuildScheduledEvent";
    JsonErrorCodes[JsonErrorCodes["UnknownGuildScheduledEventUser"] = 10071] = "UnknownGuildScheduledEventUser";
    JsonErrorCodes[JsonErrorCodes["BotsCannotUseThisEndpoint"] = 20001] = "BotsCannotUseThisEndpoint";
    JsonErrorCodes[JsonErrorCodes["OnlyBotsCanUseThisEndpoint"] = 20002] = "OnlyBotsCanUseThisEndpoint";
    JsonErrorCodes[JsonErrorCodes["ExplicitContentCannotBeSentToTheDesiredRecipient"] = 20009] = "ExplicitContentCannotBeSentToTheDesiredRecipient";
    JsonErrorCodes[JsonErrorCodes["YouAreNotAuthorizedToPerformThisActionOnThisApplication"] = 20012] = "YouAreNotAuthorizedToPerformThisActionOnThisApplication";
    JsonErrorCodes[JsonErrorCodes["ThisActionCannotBePerformedDueToSlowmodeRateLimit"] = 20016] = "ThisActionCannotBePerformedDueToSlowmodeRateLimit";
    JsonErrorCodes[JsonErrorCodes["OnlyTheOwnerOfThisAccountCanPerformThisAction"] = 20018] = "OnlyTheOwnerOfThisAccountCanPerformThisAction";
    JsonErrorCodes[JsonErrorCodes["ThisMessageCannotBeEditedDueToAnnouncementRateLimits"] = 20022] = "ThisMessageCannotBeEditedDueToAnnouncementRateLimits";
    JsonErrorCodes[JsonErrorCodes["TheChannelYouAreWritingHasHitTheWriteRateLimit"] = 20028] = "TheChannelYouAreWritingHasHitTheWriteRateLimit";
    JsonErrorCodes[JsonErrorCodes["TheWriteActionYouArePerformingOnTheServerHasHitTheWriteRateLimit"] = 20029] = "TheWriteActionYouArePerformingOnTheServerHasHitTheWriteRateLimit";
    JsonErrorCodes[JsonErrorCodes["YourStageTopicOrServerNameOrServerDescriptionOrChannelNamesContainsWordsThatAreNotAllowedForPublicStages"] = 20031] = "YourStageTopicOrServerNameOrServerDescriptionOrChannelNamesContainsWordsThatAreNotAllowedForPublicStages";
    JsonErrorCodes[JsonErrorCodes["GuildPremiumSubscriptionLevelTooLow"] = 20035] = "GuildPremiumSubscriptionLevelTooLow";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfGuildsReached"] = 30001] = "MaximumNumberOfGuildsReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfFriendsReached"] = 30002] = "MaximumNumberOfFriendsReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfPinsReachedForTheChannel"] = 30003] = "MaximumNumberOfPinsReachedForTheChannel";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfRecipientsReached"] = 30004] = "MaximumNumberOfRecipientsReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfGuildRolesReached"] = 30005] = "MaximumNumberOfGuildRolesReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfWebhooksReached"] = 30007] = "MaximumNumberOfWebhooksReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfEmojisReached"] = 30008] = "MaximumNumberOfEmojisReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfReactionsReached"] = 30010] = "MaximumNumberOfReactionsReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfGuildChannelsReached"] = 30013] = "MaximumNumberOfGuildChannelsReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfAttachmentsInAMessageReached"] = 30015] = "MaximumNumberOfAttachmentsInAMessageReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfInvitesReached"] = 30016] = "MaximumNumberOfInvitesReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfAnimatedEmojisReached"] = 30018] = "MaximumNumberOfAnimatedEmojisReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfServerMembersReached"] = 30019] = "MaximumNumberOfServerMembersReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfServerCategoriesHasBeenReached"] = 30030] = "MaximumNumberOfServerCategoriesHasBeenReached";
    JsonErrorCodes[JsonErrorCodes["GuildAlreadyHasTemplate"] = 30031] = "GuildAlreadyHasTemplate";
    JsonErrorCodes[JsonErrorCodes["MaxNumberOfThreadParticipantsHasBeenReached"] = 30033] = "MaxNumberOfThreadParticipantsHasBeenReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfBansForNonGuildMembersHaveBeenExceeded"] = 30035] = "MaximumNumberOfBansForNonGuildMembersHaveBeenExceeded";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfBansFetchesHasBeenReached"] = 30037] = "MaximumNumberOfBansFetchesHasBeenReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfUncompletedGuildScheduledEventsReached"] = 30038] = "MaximumNumberOfUncompletedGuildScheduledEventsReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfStickersReached"] = 30039] = "MaximumNumberOfStickersReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfPruneRequestsHasBeenReachedTryAgainLater"] = 30040] = "MaximumNumberOfPruneRequestsHasBeenReachedTryAgainLater";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReachedTryAgainLater"] = 30042] = "MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReachedTryAgainLater";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfEditsToMessagesOlderThan1HourReachedTryAgainLater"] = 30046] = "MaximumNumberOfEditsToMessagesOlderThan1HourReachedTryAgainLater";
    JsonErrorCodes[JsonErrorCodes["UnauthorizedProvideAValidTokenAndTryAgain"] = 40001] = "UnauthorizedProvideAValidTokenAndTryAgain";
    JsonErrorCodes[JsonErrorCodes["YouNeedToVerifyYourAccountInOrderToPerformThisAction"] = 40002] = "YouNeedToVerifyYourAccountInOrderToPerformThisAction";
    JsonErrorCodes[JsonErrorCodes["YouAreOpeningDirectMessagesTooFast"] = 40003] = "YouAreOpeningDirectMessagesTooFast";
    JsonErrorCodes[JsonErrorCodes["SendMessagesHasBeenTemporarilyDisabled"] = 40004] = "SendMessagesHasBeenTemporarilyDisabled";
    JsonErrorCodes[JsonErrorCodes["RequestEntityTooLargeTrySendingSomethingSmallerInSize"] = 40005] = "RequestEntityTooLargeTrySendingSomethingSmallerInSize";
    JsonErrorCodes[JsonErrorCodes["ThisFeatureHasBeenTemporarilyDisabledServerSide"] = 40006] = "ThisFeatureHasBeenTemporarilyDisabledServerSide";
    JsonErrorCodes[JsonErrorCodes["ThisUserBannedFromThisGuild"] = 40007] = "ThisUserBannedFromThisGuild";
    JsonErrorCodes[JsonErrorCodes["TargetUserIsNotConnectedToVoice"] = 40032] = "TargetUserIsNotConnectedToVoice";
    JsonErrorCodes[JsonErrorCodes["ThisMessageHasAlreadyBeenCrossposted"] = 40033] = "ThisMessageHasAlreadyBeenCrossposted";
    JsonErrorCodes[JsonErrorCodes["AnApplicationCommandWithThatNameAlreadyExists"] = 40041] = "AnApplicationCommandWithThatNameAlreadyExists";
    JsonErrorCodes[JsonErrorCodes["InteractionHasAlreadyBeenAcknowledged"] = 40060] = "InteractionHasAlreadyBeenAcknowledged";
    JsonErrorCodes[JsonErrorCodes["MissingAccess"] = 50001] = "MissingAccess";
    JsonErrorCodes[JsonErrorCodes["InvalidAccountType"] = 50002] = "InvalidAccountType";
    JsonErrorCodes[JsonErrorCodes["CannotExecuteActionOnADMChannel"] = 50003] = "CannotExecuteActionOnADMChannel";
    JsonErrorCodes[JsonErrorCodes["GuildWidgetDisabled"] = 50004] = "GuildWidgetDisabled";
    JsonErrorCodes[JsonErrorCodes["CannotEditMessageAuthoredByAnotherUser"] = 50005] = "CannotEditMessageAuthoredByAnotherUser";
    JsonErrorCodes[JsonErrorCodes["CannotSendAnEmptyMessage"] = 50006] = "CannotSendAnEmptyMessage";
    JsonErrorCodes[JsonErrorCodes["CannotSendMessagesToThisUser"] = 50007] = "CannotSendMessagesToThisUser";
    JsonErrorCodes[JsonErrorCodes["CannotSendMessagesInANonTextChannel"] = 50008] = "CannotSendMessagesInANonTextChannel";
    JsonErrorCodes[JsonErrorCodes["ChannelVerificationLevelIsTooHighForYouToGainAccess"] = 50009] = "ChannelVerificationLevelIsTooHighForYouToGainAccess";
    JsonErrorCodes[JsonErrorCodes["OAuth2ApplicationDoesNotHaveABot"] = 50010] = "OAuth2ApplicationDoesNotHaveABot";
    JsonErrorCodes[JsonErrorCodes["OAuth2ApplicationLimitReached"] = 50011] = "OAuth2ApplicationLimitReached";
    JsonErrorCodes[JsonErrorCodes["InvalidOAuth2State"] = 50012] = "InvalidOAuth2State";
    JsonErrorCodes[JsonErrorCodes["YouLackPermissionsToPerformThatAction"] = 50013] = "YouLackPermissionsToPerformThatAction";
    JsonErrorCodes[JsonErrorCodes["InvalidAuthenticationTokenProvided"] = 50014] = "InvalidAuthenticationTokenProvided";
    JsonErrorCodes[JsonErrorCodes["NoteWasTooLong"] = 50015] = "NoteWasTooLong";
    JsonErrorCodes[JsonErrorCodes["ProvidedTooFewOrTooManyMessagesToDeleteMustProvideAtLeast2AndFewerThan100MessagesToDelete"] = 50016] = "ProvidedTooFewOrTooManyMessagesToDeleteMustProvideAtLeast2AndFewerThan100MessagesToDelete";
    JsonErrorCodes[JsonErrorCodes["AMessageCanOnlyBePinnedInTheChannelItWasSentIn"] = 50019] = "AMessageCanOnlyBePinnedInTheChannelItWasSentIn";
    JsonErrorCodes[JsonErrorCodes["InviteCodeWasEitherInvalidOrTaken"] = 50020] = "InviteCodeWasEitherInvalidOrTaken";
    JsonErrorCodes[JsonErrorCodes["CannotExecuteActionOnASystemMessage"] = 50021] = "CannotExecuteActionOnASystemMessage";
    JsonErrorCodes[JsonErrorCodes["CannotExecuteActionOnThisChannelType"] = 50024] = "CannotExecuteActionOnThisChannelType";
    JsonErrorCodes[JsonErrorCodes["InvalidOAuth2AccessTokenProvided"] = 50025] = "InvalidOAuth2AccessTokenProvided";
    JsonErrorCodes[JsonErrorCodes["MissingRequiredOAuth2Scope"] = 50026] = "MissingRequiredOAuth2Scope";
    JsonErrorCodes[JsonErrorCodes["InvalidWebhookTokenProvided"] = 50027] = "InvalidWebhookTokenProvided";
    JsonErrorCodes[JsonErrorCodes["InvalidRole"] = 50028] = "InvalidRole";
    JsonErrorCodes[JsonErrorCodes["InvalidRecipients"] = 50033] = "InvalidRecipients";
    JsonErrorCodes[JsonErrorCodes["AMessageProvidedWasTooOldToBulkDelete"] = 50034] = "AMessageProvidedWasTooOldToBulkDelete";
    JsonErrorCodes[JsonErrorCodes[/** Invalid form body (returned for both `application/json` and `multipart/form-data` bodies), or invalid `Content-Type` provided */ "InvalidFormBodyOrContentTypeProvided"] = 50035] = "InvalidFormBodyOrContentTypeProvided";
    JsonErrorCodes[JsonErrorCodes["AnInviteWasAcceptedToAGuildTheApplicationsBotIsNotIn"] = 50036] = "AnInviteWasAcceptedToAGuildTheApplicationsBotIsNotIn";
    JsonErrorCodes[JsonErrorCodes["InvalidApiVersionProvided"] = 50041] = "InvalidApiVersionProvided";
    JsonErrorCodes[JsonErrorCodes["FileUploadedExceedsTheMaximumSize"] = 50045] = "FileUploadedExceedsTheMaximumSize";
    JsonErrorCodes[JsonErrorCodes["InvalidFileUploaded"] = 50046] = "InvalidFileUploaded";
    JsonErrorCodes[JsonErrorCodes["CannotSelfRedeemThisGift"] = 50054] = "CannotSelfRedeemThisGift";
    JsonErrorCodes[JsonErrorCodes["InvalidGuild"] = 50055] = "InvalidGuild";
    JsonErrorCodes[JsonErrorCodes["InvalidMessageType"] = 50068] = "InvalidMessageType";
    JsonErrorCodes[JsonErrorCodes["PaymentSourceRequiredToRedeemGift"] = 50070] = "PaymentSourceRequiredToRedeemGift";
    JsonErrorCodes[JsonErrorCodes["CannotDeleteAChannelRequiredForCommunityGuilds"] = 50074] = "CannotDeleteAChannelRequiredForCommunityGuilds";
    JsonErrorCodes[JsonErrorCodes["CannotEditStickersWithinAMessage"] = 50080] = "CannotEditStickersWithinAMessage";
    JsonErrorCodes[JsonErrorCodes["InvalidStickerSent"] = 50081] = "InvalidStickerSent";
    JsonErrorCodes[JsonErrorCodes["TriedToPerformAnOperationOnAnArchivedThreadSuchAsEditingAMessageOrAddingAUserToTheThread"] = 50083] = "TriedToPerformAnOperationOnAnArchivedThreadSuchAsEditingAMessageOrAddingAUserToTheThread";
    JsonErrorCodes[JsonErrorCodes["InvalidThreadNotificationSettings"] = 50084] = "InvalidThreadNotificationSettings";
    JsonErrorCodes[JsonErrorCodes["BeforeValueIsEarlierThanTheThreadCreationDate"] = 50085] = "BeforeValueIsEarlierThanTheThreadCreationDate";
    JsonErrorCodes[JsonErrorCodes["CommunityServerChannelsMustBeTextChannels"] = 50086] = "CommunityServerChannelsMustBeTextChannels";
    JsonErrorCodes[JsonErrorCodes["ThisServerIsNotAvailableInYourLocation"] = 50095] = "ThisServerIsNotAvailableInYourLocation";
    JsonErrorCodes[JsonErrorCodes["ThisServerNeedsMonetizationEnabledInOrderToPerformThisAction"] = 50097] = "ThisServerNeedsMonetizationEnabledInOrderToPerformThisAction";
    JsonErrorCodes[JsonErrorCodes["ThisServerNeedsMoreBoostsToPerformThisAction"] = 50101] = "ThisServerNeedsMoreBoostsToPerformThisAction";
    JsonErrorCodes[JsonErrorCodes["TheRequestBodyContainsInvalidJSON"] = 50109] = "TheRequestBodyContainsInvalidJSON";
    JsonErrorCodes[JsonErrorCodes["TwoFactorIsRequiredForThisOperation"] = 60003] = "TwoFactorIsRequiredForThisOperation";
    JsonErrorCodes[JsonErrorCodes["NoUsersWithDiscordTagExist"] = 80004] = "NoUsersWithDiscordTagExist";
    JsonErrorCodes[JsonErrorCodes["ReactionWasBlocked"] = 90001] = "ReactionWasBlocked";
    JsonErrorCodes[JsonErrorCodes["ApiResourceIsCurrentlyOverloadedTryAgainALittleLater"] = 130000] = "ApiResourceIsCurrentlyOverloadedTryAgainALittleLater";
    JsonErrorCodes[JsonErrorCodes["TheStageIsAlreadyOpen"] = 150006] = "TheStageIsAlreadyOpen";
    JsonErrorCodes[JsonErrorCodes["CannotReplyWithoutPermissionToReadMessageHistory"] = 160002] = "CannotReplyWithoutPermissionToReadMessageHistory";
    JsonErrorCodes[JsonErrorCodes["AThreadHasAlreadyBeenCreatedForThisMessage"] = 160004] = "AThreadHasAlreadyBeenCreatedForThisMessage";
    JsonErrorCodes[JsonErrorCodes["ThreadIsLocked"] = 160005] = "ThreadIsLocked";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfActiveThreadsReached"] = 160006] = "MaximumNumberOfActiveThreadsReached";
    JsonErrorCodes[JsonErrorCodes["MaximumNumberOfActiveAnnouncementThreadsReached"] = 160007] = "MaximumNumberOfActiveAnnouncementThreadsReached";
    JsonErrorCodes[JsonErrorCodes["InvalidJsonForUploadedLottieFile"] = 170001] = "InvalidJsonForUploadedLottieFile";
    JsonErrorCodes[JsonErrorCodes["UploadedLottiesCannotContainRasterizedImagesSuchAsPngOrJpeg"] = 170002] = "UploadedLottiesCannotContainRasterizedImagesSuchAsPngOrJpeg";
    JsonErrorCodes[JsonErrorCodes["StickerMaximumFramerateExceeded"] = 170003] = "StickerMaximumFramerateExceeded";
    JsonErrorCodes[JsonErrorCodes["StickerFrameCountExceedsMaximumOf1000Frames"] = 170004] = "StickerFrameCountExceedsMaximumOf1000Frames";
    JsonErrorCodes[JsonErrorCodes["LottieAnimationMaximumDimensionsExceeded"] = 170005] = "LottieAnimationMaximumDimensionsExceeded";
    JsonErrorCodes[JsonErrorCodes["StickerFrameRateIsEitherTooSmallOrTooLarge"] = 170006] = "StickerFrameRateIsEitherTooSmallOrTooLarge";
    JsonErrorCodes[JsonErrorCodes["StickerAnimationDurationExceedsMaximumOf5Seconds"] = 170007] = "StickerAnimationDurationExceedsMaximumOf5Seconds";
    JsonErrorCodes[JsonErrorCodes["CannotUpdateAFinishedEvent"] = 180000] = "CannotUpdateAFinishedEvent";
    JsonErrorCodes[JsonErrorCodes["FailedToCreateStageNeededForStageEvent"] = 180002] = "FailedToCreateStageNeededForStageEvent";
})(JsonErrorCodes || (JsonErrorCodes = {}));
export var HTTPResponseCodes;
(function(HTTPResponseCodes) {
    HTTPResponseCodes[HTTPResponseCodes[/** The request completed successfully. */ "Ok"] = 200] = "Ok";
    HTTPResponseCodes[HTTPResponseCodes[/** The entity was created successfully. */ "Created"] = 201] = "Created";
    HTTPResponseCodes[HTTPResponseCodes[/** The request completed successfully but returned no content. */ "NoContent"] = 204] = "NoContent";
    HTTPResponseCodes[HTTPResponseCodes[/** The entity was not modified (no action was taken). */ "NotModified"] = 304] = "NotModified";
    HTTPResponseCodes[HTTPResponseCodes[/** The request was improperly formatted, or the server couldn't understand it. */ "BadRequest"] = 400] = "BadRequest";
    HTTPResponseCodes[HTTPResponseCodes[/** The `Authorization` header was missing or invalid. */ "Unauthorized"] = 401] = "Unauthorized";
    HTTPResponseCodes[HTTPResponseCodes[/** The `Authorization` token you passed did not have permission to the resource. */ "Forbidden"] = 403] = "Forbidden";
    HTTPResponseCodes[HTTPResponseCodes[/** The resource at the location specified doesn't exist. */ "NotFound"] = 404] = "NotFound";
    HTTPResponseCodes[HTTPResponseCodes[/** The HTTP method used is not valid for the location specified. */ "MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HTTPResponseCodes[HTTPResponseCodes[/** You are being rate limited, see [Rate Limits](https://discord.com/developers/docs/topics/rate-limits). */ "TooManyRequests"] = 429] = "TooManyRequests";
    HTTPResponseCodes[HTTPResponseCodes[/** There was not a gateway available to process your request. Wait a bit and retry. */ "GatewayUnavailable"] = 502] = "GatewayUnavailable";
})(HTTPResponseCodes || (HTTPResponseCodes = {}));
export var GatewayCloseEventCodes;
(function(GatewayCloseEventCodes) {
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** A normal closure of the gateway.
   * You may attempt to reconnect.
   */ "NormalClosure"] = 1000] = "NormalClosure";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** We're not sure what went wrong. Try reconnecting? */ "UnknownError"] = 4000] = "UnknownError";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent an invalid [Gateway opcode](https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes) or an invalid payload for an opcode. Don't do that! */ "UnknownOpcode"] = 4001] = "UnknownOpcode";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent an invalid [payload](https://discord.com/developers/docs/topics/gateway#sending-payloads) to us. Don't do that! */ "DecodeError"] = 4002] = "DecodeError";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent us a payload prior to [identifying](https://discord.com/developers/docs/topics/gateway#identify). */ "NotAuthenticated"] = 4003] = "NotAuthenticated";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** The account token sent with your [identify payload](https://discord.com/developers/docs/topics/gateway#identify) is incorrect. */ "AuthenticationFailed"] = 4004] = "AuthenticationFailed";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent more than one identify payload. Don't do that! */ "AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** The sequence sent when [resuming](https://discord.com/developers/docs/topics/gateway#resume) the session was invalid. Reconnect and start a new session. */ "InvalidSeq"] = 4007] = "InvalidSeq";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this. */ "RateLimited"] = 4008] = "RateLimited";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** Your session timed out. Reconnect and start a new one. */ "SessionTimedOut"] = 4009] = "SessionTimedOut";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent us an invalid [shard when identifying](https://discord.com/developers/docs/topics/gateway#sharding). */ "InvalidShard"] = 4010] = "InvalidShard";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** The session would have handled too many guilds - you are required to [shard](https://discord.com/developers/docs/topics/gateway#sharding) your connection in order to connect. */ "ShardingRequired"] = 4011] = "ShardingRequired";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent an invalid version for the gateway. */ "InvalidApiVersion"] = 4012] = "InvalidApiVersion";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent an invalid intent for a [Gateway Intent](https://discord.com/developers/docs/topics/gateway#gateway-intents). You may have incorrectly calculated the bitwise value. */ "InvalidIntents"] = 4013] = "InvalidIntents";
    GatewayCloseEventCodes[GatewayCloseEventCodes[/** You sent a disallowed intent for a [Gateway Intent](https://discord.com/developers/docs/topics/gateway#gateway-intents). You may have tried to specify an intent that you [have not enabled or are not approved for](https://discord.com/developers/docs/topics/gateway#privileged-intents). */ "DisallowedIntents"] = 4014] = "DisallowedIntents";
})(GatewayCloseEventCodes || (GatewayCloseEventCodes = {}));
export var InviteTargetTypes;
(function(InviteTargetTypes) {
    InviteTargetTypes[InviteTargetTypes["Stream"] = 1] = "Stream";
    InviteTargetTypes[InviteTargetTypes["EmbeddedApplication"] = 2] = "EmbeddedApplication";
})(InviteTargetTypes || (InviteTargetTypes = {}));
export var GatewayOpcodes;
(function(GatewayOpcodes) {
    GatewayOpcodes[GatewayOpcodes[/** An event was dispatched. */ "Dispatch"] = 0] = "Dispatch";
    GatewayOpcodes[GatewayOpcodes[/** Fired periodically by the client to keep the connection alive. */ "Heartbeat"] = 1] = "Heartbeat";
    GatewayOpcodes[GatewayOpcodes[/** Starts a new session during the initial handshake. */ "Identify"] = 2] = "Identify";
    GatewayOpcodes[GatewayOpcodes[/** Update the client's presence. */ "PresenceUpdate"] = 3] = "PresenceUpdate";
    GatewayOpcodes[GatewayOpcodes[/** Used to join/leave or move between voice channels. */ "VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
    GatewayOpcodes[GatewayOpcodes[/** Resume a previous session that was disconnected. */ "Resume"] = 6] = "Resume";
    GatewayOpcodes[GatewayOpcodes[/** You should attempt to reconnect and resume immediately. */ "Reconnect"] = 7] = "Reconnect";
    GatewayOpcodes[GatewayOpcodes[/** Request information about offline guild members in a large guild. */ "RequestGuildMembers"] = 8] = "RequestGuildMembers";
    GatewayOpcodes[GatewayOpcodes[/** The session has been invalidated. You should reconnect and identify/resume accordingly. */ "InvalidSession"] = 9] = "InvalidSession";
    GatewayOpcodes[GatewayOpcodes[/** Sent immediately after connecting, contains the `heartbeat_interval` to use. */ "Hello"] = 10] = "Hello";
    GatewayOpcodes[GatewayOpcodes[/** Sent in response to receiving a heartbeat to acknowledge that it has been received. */ "HeartbeatACK"] = 11] = "HeartbeatACK";
})(GatewayOpcodes || (GatewayOpcodes = {}));
export var GatewayIntents;
(function(GatewayIntents) {
    GatewayIntents[GatewayIntents[/**
   * - GUILD_CREATE
   * - GUILD_DELETE
   * - GUILD_ROLE_CREATE
   * - GUILD_ROLE_UPDATE
   * - GUILD_ROLE_DELETE
   * - CHANNEL_CREATE
   * - CHANNEL_UPDATE
   * - CHANNEL_DELETE
   * - CHANNEL_PINS_UPDATE
   * - THREAD_CREATE
   * - THREAD_UPDATE
   * - THREAD_DELETE
   * - THREAD_LIST_SYNC
   * - THREAD_MEMBER_UPDATE
   * - THREAD_MEMBERS_UPDATE
   * - STAGE_INSTANCE_CREATE
   * - STAGE_INSTANCE_UPDATE
   * - STAGE_INSTANCE_DELETE
   */ "Guilds"] = 1] = "Guilds";
    GatewayIntents[GatewayIntents[/**
   * - GUILD_MEMBER_ADD
   * - GUILD_MEMBER_UPDATE
   * - GUILD_MEMBER_REMOVE
   */ "GuildMembers"] = 2] = "GuildMembers";
    GatewayIntents[GatewayIntents[/**
   * - GUILD_BAN_ADD
   * - GUILD_BAN_REMOVE
   */ "GuildBans"] = 4] = "GuildBans";
    GatewayIntents[GatewayIntents[/**
   * - GUILD_EMOJIS_UPDATE
   */ "GuildEmojis"] = 8] = "GuildEmojis";
    GatewayIntents[GatewayIntents[/**
   * - GUILD_INTEGRATIONS_UPDATE
   * - INTEGRATION_CREATE
   * - INTEGRATION_UPDATE
   * - INTEGRATION_DELETE
   */ "GuildIntegrations"] = 16] = "GuildIntegrations";
    GatewayIntents[GatewayIntents[/** Enables the following events:
   * - WEBHOOKS_UPDATE
   */ "GuildWebhooks"] = 32] = "GuildWebhooks";
    GatewayIntents[GatewayIntents[/**
   * - INVITE_CREATE
   * - INVITE_DELETE
   */ "GuildInvites"] = 64] = "GuildInvites";
    GatewayIntents[GatewayIntents[/**
   * - VOICE_STATE_UPDATE
   */ "GuildVoiceStates"] = 128] = "GuildVoiceStates";
    GatewayIntents[GatewayIntents[/**
   * - PRESENCE_UPDATE
   */ "GuildPresences"] = 256] = "GuildPresences";
    GatewayIntents[GatewayIntents[/**
   * - MESSAGE_CREATE
   * - MESSAGE_UPDATE
   * - MESSAGE_DELETE
   */ "GuildMessages"] = 512] = "GuildMessages";
    GatewayIntents[GatewayIntents[/**
   * - MESSAGE_REACTION_ADD
   * - MESSAGE_REACTION_REMOVE
   * - MESSAGE_REACTION_REMOVE_ALL
   * - MESSAGE_REACTION_REMOVE_EMOJI
   */ "GuildMessageReactions"] = 1024] = "GuildMessageReactions";
    GatewayIntents[GatewayIntents[/**
   * - TYPING_START
   */ "GuildMessageTyping"] = 2048] = "GuildMessageTyping";
    GatewayIntents[GatewayIntents[/**
   * - CHANNEL_CREATE
   * - MESSAGE_CREATE
   * - MESSAGE_UPDATE
   * - MESSAGE_DELETE
   * - CHANNEL_PINS_UPDATE
   */ "DirectMessages"] = 4096] = "DirectMessages";
    GatewayIntents[GatewayIntents[/**
   * - MESSAGE_REACTION_ADD
   * - MESSAGE_REACTION_REMOVE
   * - MESSAGE_REACTION_REMOVE_ALL
   * - MESSAGE_REACTION_REMOVE_EMOJI
   */ "DirectMessageReactions"] = 8192] = "DirectMessageReactions";
    GatewayIntents[GatewayIntents[/**
   * - TYPING_START
   */ "DirectMessageTyping"] = 16384] = "DirectMessageTyping";
    GatewayIntents[GatewayIntents[/**
   * This intent will add `content` values to all message objects.
   */ "MessageContent"] = 32768] = "MessageContent";
    GatewayIntents[GatewayIntents[/**
   * - GUILD_SCHEDULED_EVENT_CREATE
   * - GUILD_SCHEDULED_EVENT_UPDATE
   * - GUILD_SCHEDULED_EVENT_DELETE
   * - GUILD_SCHEDULED_EVENT_USER_ADD this is experimental and unstable.
   * - GUILD_SCHEDULED_EVENT_USER_REMOVE this is experimental and unstable.
   */ "GuildScheduledEvents"] = 65536] = "GuildScheduledEvents";
})(GatewayIntents || (GatewayIntents = {}));
// ALIASES JUST FOR BETTER UX IN THIS CASE
/** https://discord.com/developers/docs/topics/gateway#list-of-intents */ export const Intents = GatewayIntents;
export var InteractionResponseTypes;
(function(InteractionResponseTypes) {
    InteractionResponseTypes[InteractionResponseTypes[/** ACK a `Ping` */ "Pong"] = 1] = "Pong";
    InteractionResponseTypes[InteractionResponseTypes[/** Respond to an interaction with a message */ "ChannelMessageWithSource"] = 4] = "ChannelMessageWithSource";
    InteractionResponseTypes[InteractionResponseTypes[/** ACK an interaction and edit a response later, the user sees a loading state */ "DeferredChannelMessageWithSource"] = 5] = "DeferredChannelMessageWithSource";
    InteractionResponseTypes[InteractionResponseTypes[/** For components, ACK an interaction and edit the original message later; the user does not see a loading state */ "DeferredUpdateMessage"] = 6] = "DeferredUpdateMessage";
    InteractionResponseTypes[InteractionResponseTypes[/** For components, edit the message the component was attached to */ "UpdateMessage"] = 7] = "UpdateMessage";
    InteractionResponseTypes[InteractionResponseTypes[/** For Application Command Options, send an autocomplete result */ "ApplicationCommandAutocompleteResult"] = 8] = "ApplicationCommandAutocompleteResult";
    InteractionResponseTypes[InteractionResponseTypes[/** For Command or Component interactions, send a Modal response */ "Modal"] = 9] = "Modal";
})(InteractionResponseTypes || (InteractionResponseTypes = {}));
export var Errors;
(function(Errors) {
    Errors[// Bot Role errors
    "BOTS_HIGHEST_ROLE_TOO_LOW"] = "BOTS_HIGHEST_ROLE_TOO_LOW";
    Errors[// Channel Errors
    "CHANNEL_NOT_FOUND"] = "CHANNEL_NOT_FOUND";
    Errors["CHANNEL_NOT_IN_GUILD"] = "CHANNEL_NOT_IN_GUILD";
    Errors["CHANNEL_NOT_TEXT_BASED"] = "CHANNEL_NOT_TEXT_BASED";
    Errors["CHANNEL_NOT_STAGE_VOICE"] = "CHANNEL_NOT_STAGE_VOICE";
    Errors["MESSAGE_MAX_LENGTH"] = "MESSAGE_MAX_LENGTH";
    Errors["RULES_CHANNEL_CANNOT_BE_DELETED"] = "RULES_CHANNEL_CANNOT_BE_DELETED";
    Errors["UPDATES_CHANNEL_CANNOT_BE_DELETED"] = "UPDATES_CHANNEL_CANNOT_BE_DELETED";
    Errors["INVALID_TOPIC_LENGTH"] = "INVALID_TOPIC_LENGTH";
    Errors[// Guild Errors
    "GUILD_NOT_DISCOVERABLE"] = "GUILD_NOT_DISCOVERABLE";
    Errors["GUILD_WIDGET_NOT_ENABLED"] = "GUILD_WIDGET_NOT_ENABLED";
    Errors["GUILD_NOT_FOUND"] = "GUILD_NOT_FOUND";
    Errors["MEMBER_NOT_FOUND"] = "MEMBER_NOT_FOUND";
    Errors["MEMBER_NOT_IN_VOICE_CHANNEL"] = "MEMBER_NOT_IN_VOICE_CHANNEL";
    Errors["MEMBER_SEARCH_LIMIT_TOO_HIGH"] = "MEMBER_SEARCH_LIMIT_TOO_HIGH";
    Errors["MEMBER_SEARCH_LIMIT_TOO_LOW"] = "MEMBER_SEARCH_LIMIT_TOO_LOW";
    Errors["PRUNE_MAX_DAYS"] = "PRUNE_MAX_DAYS";
    Errors["ROLE_NOT_FOUND"] = "ROLE_NOT_FOUND";
    Errors[// Thread errors
    "INVALID_THREAD_PARENT_CHANNEL_TYPE"] = "INVALID_THREAD_PARENT_CHANNEL_TYPE";
    Errors["GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS"] = "GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS";
    Errors["NOT_A_THREAD_CHANNEL"] = "NOT_A_THREAD_CHANNEL";
    Errors["MISSING_MANAGE_THREADS_AND_NOT_MEMBER"] = "MISSING_MANAGE_THREADS_AND_NOT_MEMBER";
    Errors["CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD"] = "CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD";
    Errors["HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS"] = "HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS";
    Errors[// Message Get Errors
    "INVALID_GET_MESSAGES_LIMIT"] = "INVALID_GET_MESSAGES_LIMIT";
    Errors[// Message Delete Errors
    "DELETE_MESSAGES_MIN"] = "DELETE_MESSAGES_MIN";
    Errors["PRUNE_MIN_DAYS"] = "PRUNE_MIN_DAYS";
    Errors[// Interaction Errors
    "INVALID_SLASH_DESCRIPTION"] = "INVALID_SLASH_DESCRIPTION";
    Errors["INVALID_SLASH_NAME"] = "INVALID_SLASH_NAME";
    Errors["INVALID_SLASH_OPTIONS"] = "INVALID_SLASH_OPTIONS";
    Errors["INVALID_SLASH_OPTIONS_CHOICES"] = "INVALID_SLASH_OPTIONS_CHOICES";
    Errors["TOO_MANY_SLASH_OPTIONS"] = "TOO_MANY_SLASH_OPTIONS";
    Errors["INVALID_SLASH_OPTION_CHOICE_NAME"] = "INVALID_SLASH_OPTION_CHOICE_NAME";
    Errors["INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE"] = "INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE";
    Errors["TOO_MANY_SLASH_OPTION_CHOICES"] = "TOO_MANY_SLASH_OPTION_CHOICES";
    Errors["ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES"] = "ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES";
    Errors["INVALID_SLASH_OPTION_NAME"] = "INVALID_SLASH_OPTION_NAME";
    Errors["INVALID_SLASH_OPTION_DESCRIPTION"] = "INVALID_SLASH_OPTION_DESCRIPTION";
    Errors["INVALID_CONTEXT_MENU_COMMAND_NAME"] = "INVALID_CONTEXT_MENU_COMMAND_NAME";
    Errors["INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION"] = "INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION";
    Errors[// Webhook Errors
    "INVALID_WEBHOOK_NAME"] = "INVALID_WEBHOOK_NAME";
    Errors["INVALID_WEBHOOK_OPTIONS"] = "INVALID_WEBHOOK_OPTIONS";
    Errors[// Permission Errors
    "MISSING_ADD_REACTIONS"] = "MISSING_ADD_REACTIONS";
    Errors["MISSING_ADMINISTRATOR"] = "MISSING_ADMINISTRATOR";
    Errors["MISSING_ATTACH_FILES"] = "MISSING_ATTACH_FILES";
    Errors["MISSING_BAN_MEMBERS"] = "MISSING_BAN_MEMBERS";
    Errors["MISSING_CHANGE_NICKNAME"] = "MISSING_CHANGE_NICKNAME";
    Errors["MISSING_CONNECT"] = "MISSING_CONNECT";
    Errors["MISSING_CREATE_INSTANT_INVITE"] = "MISSING_CREATE_INSTANT_INVITE";
    Errors["MISSING_DEAFEN_MEMBERS"] = "MISSING_DEAFEN_MEMBERS";
    Errors["MISSING_EMBED_LINKS"] = "MISSING_EMBED_LINKS";
    Errors["MISSING_INTENT_GUILD_MEMBERS"] = "MISSING_INTENT_GUILD_MEMBERS";
    Errors["MISSING_KICK_MEMBERS"] = "MISSING_KICK_MEMBERS";
    Errors["MISSING_MANAGE_CHANNELS"] = "MISSING_MANAGE_CHANNELS";
    Errors["MISSING_MANAGE_EMOJIS"] = "MISSING_MANAGE_EMOJIS";
    Errors["MISSING_MANAGE_GUILD"] = "MISSING_MANAGE_GUILD";
    Errors["MISSING_MANAGE_MESSAGES"] = "MISSING_MANAGE_MESSAGES";
    Errors["MISSING_MANAGE_NICKNAMES"] = "MISSING_MANAGE_NICKNAMES";
    Errors["MISSING_MANAGE_ROLES"] = "MISSING_MANAGE_ROLES";
    Errors["MISSING_MANAGE_WEBHOOKS"] = "MISSING_MANAGE_WEBHOOKS";
    Errors["MISSING_MENTION_EVERYONE"] = "MISSING_MENTION_EVERYONE";
    Errors["MISSING_MOVE_MEMBERS"] = "MISSING_MOVE_MEMBERS";
    Errors["MISSING_MUTE_MEMBERS"] = "MISSING_MUTE_MEMBERS";
    Errors["MISSING_PRIORITY_SPEAKER"] = "MISSING_PRIORITY_SPEAKER";
    Errors["MISSING_READ_MESSAGE_HISTORY"] = "MISSING_READ_MESSAGE_HISTORY";
    Errors["MISSING_SEND_MESSAGES"] = "MISSING_SEND_MESSAGES";
    Errors["MISSING_SEND_TTS_MESSAGES"] = "MISSING_SEND_TTS_MESSAGES";
    Errors["MISSING_SPEAK"] = "MISSING_SPEAK";
    Errors["MISSING_STREAM"] = "MISSING_STREAM";
    Errors["MISSING_USE_VAD"] = "MISSING_USE_VAD";
    Errors["MISSING_USE_EXTERNAL_EMOJIS"] = "MISSING_USE_EXTERNAL_EMOJIS";
    Errors["MISSING_VIEW_AUDIT_LOG"] = "MISSING_VIEW_AUDIT_LOG";
    Errors["MISSING_VIEW_CHANNEL"] = "MISSING_VIEW_CHANNEL";
    Errors["MISSING_VIEW_GUILD_INSIGHTS"] = "MISSING_VIEW_GUILD_INSIGHTS";
    Errors[// User Errors
    "NICKNAMES_MAX_LENGTH"] = "NICKNAMES_MAX_LENGTH";
    Errors["USERNAME_INVALID_CHARACTER"] = "USERNAME_INVALID_CHARACTER";
    Errors["USERNAME_INVALID_USERNAME"] = "USERNAME_INVALID_USERNAME";
    Errors["USERNAME_MAX_LENGTH"] = "USERNAME_MAX_LENGTH";
    Errors["USERNAME_MIN_LENGTH"] = "USERNAME_MIN_LENGTH";
    Errors["NONCE_TOO_LONG"] = "NONCE_TOO_LONG";
    Errors["INVITE_MAX_AGE_INVALID"] = "INVITE_MAX_AGE_INVALID";
    Errors["INVITE_MAX_USES_INVALID"] = "INVITE_MAX_USES_INVALID";
    Errors[// API Errors
    "RATE_LIMIT_RETRY_MAXED"] = "RATE_LIMIT_RETRY_MAXED";
    Errors["REQUEST_CLIENT_ERROR"] = "REQUEST_CLIENT_ERROR";
    Errors["REQUEST_SERVER_ERROR"] = "REQUEST_SERVER_ERROR";
    Errors["REQUEST_UNKNOWN_ERROR"] = "REQUEST_UNKNOWN_ERROR";
    Errors[// Component Errors
    "TOO_MANY_COMPONENTS"] = "TOO_MANY_COMPONENTS";
    Errors["TOO_MANY_ACTION_ROWS"] = "TOO_MANY_ACTION_ROWS";
    Errors["LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID"] = "LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID";
    Errors["COMPONENT_LABEL_TOO_BIG"] = "COMPONENT_LABEL_TOO_BIG";
    Errors["COMPONENT_CUSTOM_ID_TOO_BIG"] = "COMPONENT_CUSTOM_ID_TOO_BIG";
    Errors["BUTTON_REQUIRES_CUSTOM_ID"] = "BUTTON_REQUIRES_CUSTOM_ID";
    Errors["COMPONENT_SELECT_MUST_BE_ALONE"] = "COMPONENT_SELECT_MUST_BE_ALONE";
    Errors["COMPONENT_PLACEHOLDER_TOO_BIG"] = "COMPONENT_PLACEHOLDER_TOO_BIG";
    Errors["COMPONENT_SELECT_MIN_VALUE_TOO_LOW"] = "COMPONENT_SELECT_MIN_VALUE_TOO_LOW";
    Errors["COMPONENT_SELECT_MIN_VALUE_TOO_MANY"] = "COMPONENT_SELECT_MIN_VALUE_TOO_MANY";
    Errors["COMPONENT_SELECT_MAX_VALUE_TOO_LOW"] = "COMPONENT_SELECT_MAX_VALUE_TOO_LOW";
    Errors["COMPONENT_SELECT_MAX_VALUE_TOO_MANY"] = "COMPONENT_SELECT_MAX_VALUE_TOO_MANY";
    Errors["COMPONENT_SELECT_OPTIONS_TOO_LOW"] = "COMPONENT_SELECT_OPTIONS_TOO_LOW";
    Errors["COMPONENT_SELECT_OPTIONS_TOO_MANY"] = "COMPONENT_SELECT_OPTIONS_TOO_MANY";
    Errors["SELECT_OPTION_LABEL_TOO_BIG"] = "SELECT_OPTION_LABEL_TOO_BIG";
    Errors["SELECT_OPTION_VALUE_TOO_BIG"] = "SELECT_OPTION_VALUE_TOO_BIG";
    Errors["SELECT_OPTION_TOO_MANY_DEFAULTS"] = "SELECT_OPTION_TOO_MANY_DEFAULTS";
    Errors["COMPONENT_SELECT_MIN_HIGHER_THAN_MAX"] = "COMPONENT_SELECT_MIN_HIGHER_THAN_MAX";
    Errors["CANNOT_ADD_USER_TO_ARCHIVED_THREADS"] = "CANNOT_ADD_USER_TO_ARCHIVED_THREADS";
    Errors["CANNOT_LEAVE_ARCHIVED_THREAD"] = "CANNOT_LEAVE_ARCHIVED_THREAD";
    Errors["CANNOT_REMOVE_FROM_ARCHIVED_THREAD"] = "CANNOT_REMOVE_FROM_ARCHIVED_THREAD";
    Errors["YOU_CAN_NOT_DM_THE_BOT_ITSELF"] = "YOU_CAN_NOT_DM_THE_BOT_ITSELF";
})(Errors || (Errors = {}));
export var Locales;
(function(Locales) {
    Locales["Danish"] = "da";
    Locales["German"] = "de";
    Locales["EnglishUk"] = "en-GB";
    Locales["EnglishUs"] = "en-US";
    Locales["Spanish"] = "es-ES";
    Locales["French"] = "fr";
    Locales["Croatian"] = "hr";
    Locales["Italian"] = "it";
    Locales["Lithuanian"] = "lt";
    Locales["Hungarian"] = "hu";
    Locales["Dutch"] = "nl";
    Locales["Norwegian"] = "no";
    Locales["Polish"] = "pl";
    Locales["PortugueseBrazilian"] = "pt-BR";
    Locales["RomanianRomania"] = "ro";
    Locales["Finnish"] = "fi";
    Locales["Swedish"] = "sv-SE";
    Locales["Vietnamese"] = "vi";
    Locales["Turkish"] = "tr";
    Locales["Czech"] = "cs";
    Locales["Greek"] = "el";
    Locales["Bulgarian"] = "bg";
    Locales["Russian"] = "ru";
    Locales["Ukrainian"] = "uk";
    Locales["Hindi"] = "hi";
    Locales["Thai"] = "th";
    Locales["ChineseChina"] = "zh-CN";
    Locales["Japanese"] = "ja";
    Locales["ChineseTaiwan"] = "zh-TW";
    Locales["Korean"] = "ko";
})(Locales || (Locales = {}));
//# sourceMappingURL=data:application/json;base64,