import { Collection } from "../util/collection.ts";
export function transformInteraction(bot, payload) {
    const guildId = payload.guild_id ? bot.transformers.snowflake(payload.guild_id) : undefined;
    const user = bot.transformers.user(bot, payload.member?.user || payload.user);
    const interaction = {
        type: payload.type,
        token: payload.token,
        version: payload.version,
        locale: payload.locale,
        guildLocale: payload.guild_locale,
        guildId,
        user,
        id: bot.transformers.snowflake(payload.id),
        applicationId: bot.transformers.snowflake(payload.application_id),
        message: payload.message ? bot.transformers.message(bot, payload.message) : undefined,
        channelId: payload.channel_id ? bot.transformers.snowflake(payload.channel_id) : undefined,
        member: payload.member && guildId ? bot.transformers.member(bot, payload.member, guildId, user.id) : undefined,
        data: payload.data
            ? {
                componentType: payload.data.component_type,
                customId: payload.data.custom_id,
                components: payload.data.components?.map((component) => bot.transformers.component(bot, component)),
                values: payload.data.values,
                id: payload.data.id ? bot.transformers.snowflake(payload.data.id) : undefined,
                name: payload.data.name,
                resolved: payload.data.resolved
                    ? transformInteractionDataResolved(bot, payload.data.resolved, guildId)
                    : undefined,
                options: payload.data.options?.map((opt) => bot.transformers.interactionDataOptions(bot, opt)),
                targetId: payload.data.target_id ? bot.transformers.snowflake(payload.data.target_id) : undefined,
                guildId: payload.data.guild_id ? bot.transformers.snowflake(payload.data.guild_id) : undefined,
            }
            : undefined,
    };
    return interaction;
}
export function transformInteractionDataOption(bot, option) {
    const opt = {
        name: option.name,
        type: option.type,
        value: option.value,
        options: option.options,
        focused: option.focused,
    };
    return opt;
}
export function transformInteractionDataResolved(bot, resolved, guildId) {
    const transformed = {};
    if (resolved.messages) {
        transformed.messages = new Collection(Object.entries(resolved.messages).map(([id, value]) => {
            const message = bot.transformers.message(bot, value);
            return [message.id, message];
        }));
    }
    if (resolved.users) {
        transformed.users = new Collection(Object.entries(resolved.users).map(([id, value]) => {
            const user = bot.transformers.user(bot, value);
            return [user.id, user];
        }));
    }
    if (guildId && resolved.members) {
        transformed.members = new Collection(Object.entries(resolved.members).map(([id, value]) => {
            const member = bot.transformers.member(bot, value, guildId, bot.transformers.snowflake(id));
            return [member.id, member];
        }));
    }
    if (guildId && resolved.roles) {
        transformed.roles = new Collection(Object.entries(resolved.roles).map(([id, value]) => {
            const role = bot.transformers.role(bot, { role: value, guildId });
            return [role.id, role];
        }));
    }
    if (resolved.channels) {
        transformed.channels = new Collection(Object.entries(resolved.channels).map(([key, value]) => {
            const id = bot.transformers.snowflake(key);
            const channel = value;
            return [
                id,
                {
                    id,
                    name: channel.name,
                    type: channel.type,
                    permissions: bot.transformers.snowflake(channel.permissions),
                },
            ];
        }));
    }
    if (resolved.attachments) {
        transformed.attachments = new Collection(Object.entries(resolved.attachments).map(([key, value]) => {
            const id = bot.transformers.snowflake(key);
            return [id, bot.transformers.attachment(bot, value)];
        }));
    }
    return transformed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlcmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFPbkQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEdBQVEsRUFBRSxPQUEyQjtJQUN4RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUM1RixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksT0FBTyxDQUFDLElBQUssQ0FBQyxDQUFDO0lBRS9FLE1BQU0sV0FBVyxHQUFHO1FBRWxCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7UUFDcEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3hCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtRQUN0QixXQUFXLEVBQUUsT0FBTyxDQUFDLFlBQVk7UUFHakMsT0FBTztRQUNQLElBQUk7UUFDSixFQUFFLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMxQyxhQUFhLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUNqRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUNyRixTQUFTLEVB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SCxDQUFDO0tBQ0g7SUFFRCxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUU7UUFDeEIsV0FBVyxDQUFDLFdBQVcsR0FBRyxJQUFJLFVBQVUsQ0FDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUN4RCxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUEwQixDQUFDLENBQUMsQ0FBQztRQUM1RSxDQUFDLENBQUMsQ0FDSCxDQUFDO0tBQ0g7SUFFRCxPQUFPLFdBQThDLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvdCB9IGZyb20gXCIuLi9ib3QudHNcIjtcbmltcG9ydCB7XG4gIERpc2NvcmRBdHRhY2htZW50LFxuICBEaXNjb3JkSW50ZXJhY3Rpb24sXG4gIERpc2NvcmRJbnRlcmFjdGlvbkRhdGFPcHRpb24sXG4gIERpc2NvcmRJbnRlcmFjdGlvbkRhdGFSZXNvbHZlZCxcbn0gZnJvbSBcIi4uL3R5cGVzL2Rpc2NvcmQudHNcIjtcbmltcG9ydCB7IENoYW5uZWxUeXBlcyB9IGZyb20gXCIuLi90eXBlcy9zaGFyZWQudHNcIjtcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tIFwiLi4vdXRpbC9jb2xsZWN0aW9uLnRzXCI7XG5pbXBvcnQgeyBBdHRhY2htZW50IH0gZnJvbSBcIi4vYXR0YWNobWVudC50c1wiO1xuaW1wb3J0IHsgTWVtYmVyLCBVc2VyIH0gZnJvbSBcIi4vbWVtYmVyLnRzXCI7XG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4vbWVzc2FnZS50c1wiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuL3JvbGUudHNcIjtcbmltcG9ydCB7IE9wdGlvbmFsaXplIH0gZnJvbSBcIi4uL3R5cGVzL3NoYXJlZC50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtSW50ZXJhY3Rpb24oYm90OiBCb3QsIHBheWxvYWQ6IERpc2NvcmRJbnRlcmFjdGlvbikge1xuICBjb25zdCBndWlsZElkID0gcGF5bG9hZC5ndWlsZF9pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuZ3VpbGRfaWQpIDogdW5kZWZpbmVkO1xuICBjb25zdCB1c2VyID0gYm90LnRyYW5zZm9ybWVycy51c2VyKGJvdCwgcGF5bG9hZC5tZW1iZXI/LnVzZXIgfHwgcGF5bG9hZC51c2VyISk7XG5cbiAgY29uc3QgaW50ZXJhY3Rpb24gPSB7XG4gICAgLy8gVU5UUkFOU0ZPUk1FRCBTVFVGRiBIRVJFXG4gICAgdHlwZTogcGF5bG9hZC50eXBlLFxuICAgIHRva2VuOiBwYXlsb2FkLnRva2VuLFxuICAgIHZlcnNpb246IHBheWxvYWQudmVyc2lvbixcbiAgICBsb2NhbGU6IHBheWxvYWQubG9jYWxlLFxuICAgIGd1aWxkTG9jYWxlOiBwYXlsb2FkLmd1aWxkX2xvY2FsZSxcblxuICAgIC8vIFRSQU5TRk9STUVEIFNUVUZGIEJFTE9XXG4gICAgZ3VpbGRJZCxcbiAgICB1c2VyLFxuICAgIGlkOiBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLmlkKSxcbiAgICBhcHBsaWNhdGlvbklkOiBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLmFwcGxpY2F0aW9uX2lkKSxcbiAgICBtZXNzYWdlOiBwYXlsb2FkLm1lc3NhZ2UgPyBib3QudHJhbnNmb3JtZXJzLm1lc3NhZ2UoYm90LCBwYXlsb2FkLm1lc3NhZ2UpIDogdW5kZWZpbmVkLFxuICAgIGNoYW5uZWxJZDogcGF5bG9hZC5jaGFubmVsX2lkID8gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5jaGFubmVsX2lkKSA6IHVuZGVmaW5lZCxcbiAgICBtZW1iZXI6IHBheWxvYWQubWVtYmVyICYmIGd1aWxkSWQgPyBib3QudHJhbnNmb3JtZXJzLm1lbWJlcihib3QsIHBheWxvYWQubWVtYmVyLCBndWlsZElkLCB1c2VyLmlkKSA6IHVuZGVmaW5lZCxcblxuICAgIGRhdGE6IHBheWxvYWQuZGF0YVxuICAgICAgPyB7XG4gICAgICAgIGNvbXBvbmVudFR5cGU6IHBheWxvYWQuZGF0YS5jb21wb25lbnRfdHlwZSxcbiAgICAgICAgY3VzdG9tSWQ6IHBheWxvYWQuZGF0YS5jdXN0b21faWQsXG4gICAgICAgIGNvbXBvbmVudHM6IHBheWxvYWQuZGF0YS5jb21wb25lbnRzPy5tYXAoKGNvbXBvbmVudCkgPT4gYm90LnRyYW5zZm9ybWVycy5jb21wb25lbnQoYm90LCBjb21wb25lbnQpKSxcbiAgICAgICAgdmFsdWVzOiBwYXlsb2FkLmRhdGEudmFsdWVzLFxuICAgICAgICBpZDogcGF5bG9hZC5kYXRhLmlkID8gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UocGF5bG9hZC5kYXRhLmlkKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmFtZTogcGF5bG9hZC5kYXRhLm5hbWUsXG4gICAgICAgIHJlc29sdmVkOiBwYXlsb2FkLmRhdGEucmVzb2x2ZWRcbiAgICAgICAgICA/IHRyYW5zZm9ybUludGVyYWN0aW9uRGF0YVJlc29sdmVkKGJvdCwgcGF5bG9hZC5kYXRhLnJlc29sdmVkLCBndWlsZElkKVxuICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICBvcHRpb25zOiBwYXlsb2FkLmRhdGEub3B0aW9ucz8ubWFwKChvcHQpID0+IGJvdC50cmFuc2Zvcm1lcnMuaW50ZXJhY3Rpb25EYXRhT3B0aW9ucyhib3QsIG9wdCkpLFxuICAgICAgICB0YXJnZXRJZDogcGF5bG9hZC5kYXRhLnRhcmdldF9pZCA/IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKHBheWxvYWQuZGF0YS50YXJnZXRfaWQpIDogdW5kZWZpbmVkLFxuICAgICAgICBndWlsZElkOiBwYXlsb2FkLmRhdGEuZ3VpbGRfaWQgPyBib3QudHJhbnNmb3JtZXJzLnNub3dmbGFrZShwYXlsb2FkLmRhdGEuZ3VpbGRfaWQpIDogdW5kZWZpbmVkLFxuICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQsXG4gIH07XG5cbiAgcmV0dXJuIGludGVyYWN0aW9uIGFzIE9wdGlvbmFsaXplPHR5cGVvZiBpbnRlcmFjdGlvbj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1JbnRlcmFjdGlvbkRhdGFPcHRpb24oYm90OiBCb3QsIG9wdGlvbjogRGlzY29yZEludGVyYWN0aW9uRGF0YU9wdGlvbikge1xuICBjb25zdCBvcHQgPSB7XG4gICAgbmFtZTogb3B0aW9uLm5hbWUsXG4gICAgdHlwZTogb3B0aW9uLnR5cGUsXG4gICAgdmFsdWU6IG9wdGlvbi52YWx1ZSxcbiAgICBvcHRpb25zOiBvcHRpb24ub3B0aW9ucyxcbiAgICBmb2N1c2VkOiBvcHRpb24uZm9jdXNlZCxcbiAgfTtcblxuICByZXR1cm4gb3B0IGFzIE9wdGlvbmFsaXplPHR5cGVvZiBvcHQ+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtSW50ZXJhY3Rpb25EYXRhUmVzb2x2ZWQoYm90OiBCb3QsIHJlc29sdmVkOiBEaXNjb3JkSW50ZXJhY3Rpb25EYXRhUmVzb2x2ZWQsIGd1aWxkSWQ/OiBiaWdpbnQpIHtcbiAgY29uc3QgdHJhbnNmb3JtZWQ6IHtcbiAgICBtZXNzYWdlcz86IENvbGxlY3Rpb248YmlnaW50LCBNZXNzYWdlPjtcbiAgICB1c2Vycz86IENvbGxlY3Rpb248YmlnaW50LCBVc2VyPjtcbiAgICBtZW1iZXJzPzogQ29sbGVjdGlvbjxiaWdpbnQsIE1lbWJlcj47XG4gICAgcm9sZXM/OiBDb2xsZWN0aW9uPGJpZ2ludCwgUm9sZT47XG4gICAgY2hhbm5lbHM/OiBDb2xsZWN0aW9uPGJpZ2ludCwgeyBpZDogYmlnaW50OyBuYW1lOiBzdHJpbmc7IHR5cGU6IENoYW5uZWxUeXBlczsgcGVybWlzc2lvbnM6IGJpZ2ludCB9PjtcbiAgICBhdHRhY2htZW50cz86IENvbGxlY3Rpb248YmlnaW50LCBBdHRhY2htZW50PjtcbiAgfSA9IHt9O1xuXG4gIGlmIChyZXNvbHZlZC5tZXNzYWdlcykge1xuICAgIHRyYW5zZm9ybWVkLm1lc3NhZ2VzID0gbmV3IENvbGxlY3Rpb24oXG4gICAgICBPYmplY3QuZW50cmllcyhyZXNvbHZlZC5tZXNzYWdlcykubWFwKChbaWQsIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBNZXNzYWdlID0gYm90LnRyYW5zZm9ybWVycy5tZXNzYWdlKGJvdCwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gW21lc3NhZ2UuaWQsIG1lc3NhZ2VdO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGlmIChyZXNvbHZlZC51c2Vycykge1xuICAgIHRyYW5zZm9ybWVkLnVzZXJzID0gbmV3IENvbGxlY3Rpb24oXG4gICAgICBPYmplY3QuZW50cmllcyhyZXNvbHZlZC51c2VycykubWFwKChbaWQsIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyID0gYm90LnRyYW5zZm9ybWVycy51c2VyKGJvdCwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gW3VzZXIuaWQsIHVzZXJdO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGlmIChndWlsZElkICYmIHJlc29sdmVkLm1lbWJlcnMpIHtcbiAgICB0cmFuc2Zvcm1lZC5tZW1iZXJzID0gbmV3IENvbGxlY3Rpb24oXG4gICAgICBPYmplY3QuZW50cmllcyhyZXNvbHZlZC5tZW1iZXJzKS5tYXAoKFtpZCwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lbWJlcjogTWVtYmVyID0gYm90LnRyYW5zZm9ybWVycy5tZW1iZXIoYm90LCB2YWx1ZSwgZ3VpbGRJZCwgYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UoaWQpKTtcbiAgICAgICAgcmV0dXJuIFttZW1iZXIuaWQsIG1lbWJlcl07XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgaWYgKGd1aWxkSWQgJiYgcmVzb2x2ZWQucm9sZXMpIHtcbiAgICB0cmFuc2Zvcm1lZC5yb2xlcyA9IG5ldyBDb2xsZWN0aW9uKFxuICAgICAgT2JqZWN0LmVudHJpZXMocmVzb2x2ZWQucm9sZXMpLm1hcCgoW2lkLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgY29uc3Qgcm9sZSA9IGJvdC50cmFuc2Zvcm1lcnMucm9sZShib3QsIHsgcm9sZTogdmFsdWUsIGd1aWxkSWQgfSk7XG4gICAgICAgIHJldHVybiBbcm9sZS5pZCwgcm9sZV07XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgaWYgKHJlc29sdmVkLmNoYW5uZWxzKSB7XG4gICAgdHJhbnNmb3JtZWQuY2hhbm5lbHMgPSBuZXcgQ29sbGVjdGlvbihcbiAgICAgIE9iamVjdC5lbnRyaWVzKHJlc29sdmVkLmNoYW5uZWxzKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IGJvdC50cmFuc2Zvcm1lcnMuc25vd2ZsYWtlKGtleSk7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB2YWx1ZSBhcyB7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgdHlwZTogQ2hhbm5lbFR5cGVzOyBwZXJtaXNzaW9uczogc3RyaW5nIH07XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgaWQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBuYW1lOiBjaGFubmVsLm5hbWUsXG4gICAgICAgICAgICB0eXBlOiBjaGFubmVsLnR5cGUsXG4gICAgICAgICAgICBwZXJtaXNzaW9uczogYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2UoY2hhbm5lbC5wZXJtaXNzaW9ucyksXG4gICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBpZiAocmVzb2x2ZWQuYXR0YWNobWVudHMpIHtcbiAgICB0cmFuc2Zvcm1lZC5hdHRhY2htZW50cyA9IG5ldyBDb2xsZWN0aW9uKFxuICAgICAgT2JqZWN0LmVudHJpZXMocmVzb2x2ZWQuYXR0YWNobWVudHMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gYm90LnRyYW5zZm9ybWVycy5zbm93Zmxha2Uoa2V5KTtcbiAgICAgICAgcmV0dXJuIFtpZCwgYm90LnRyYW5zZm9ybWVycy5hdHRhY2htZW50KGJvdCwgdmFsdWUgYXMgRGlzY29yZEF0dGFjaG1lbnQpXTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdHJhbnNmb3JtZWQgYXMgT3B0aW9uYWxpemU8dHlwZW9mIHRyYW5zZm9ybWVkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnRlcmFjdGlvbiBleHRlbmRzIFJldHVyblR5cGU8dHlwZW9mIHRyYW5zZm9ybUludGVyYWN0aW9uPiB7fVxuZXhwb3J0IGludGVyZmFjZSBJbnRlcmFjdGlvbkRhdGFSZXNvbHZlZCBleHRlbmRzIFJldHVyblR5cGU8dHlwZW9mIHRyYW5zZm9ybUludGVyYWN0aW9uRGF0YVJlc29sdmVkPiB7fVxuZXhwb3J0IGludGVyZmFjZSBJbnRlcmFjdGlvbkRhdGFPcHRpb24gZXh0ZW5kcyBSZXR1cm5UeXBlPHR5cGVvZiB0cmFuc2Zvcm1JbnRlcmFjdGlvbkRhdGFPcHRpb24+IHt9XG4iXX0=