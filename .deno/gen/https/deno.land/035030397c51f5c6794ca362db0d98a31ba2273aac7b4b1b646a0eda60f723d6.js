import { USER_AGENT } from "../util/constants.ts";
export function createRequestBody(rest, queuedRequest) {
    const headers = {
        authorization: `Bot ${rest.token}`,
        "user-agent": USER_AGENT,
    };
    if (queuedRequest.payload.headers) {
        for (const key in queuedRequest.payload.headers) {
            headers[key] = queuedRequest.payload.headers[key];
        }
    }
    if (queuedRequest.request.method === "GET") {
        queuedRequest.payload.body = undefined;
    }
    if (queuedRequest.payload.body?.reason) {
        headers["X-Audit-Log-Reason"] = encodeURIComponent(queuedRequest.payload.body.reason);
        queuedRequest.payload.body.reason = undefined;
    }
    if (queuedRequest.payload.body?.file) {
        if (!Array.isArray(queuedRequest.payload.body.file)) {
            queuedRequest.payload.body.file = [queuedRequest.payload.body.file];
        }
        const form = new FormData();
        for (let i = 0; i < queuedRequest.payload.body.file.length; i++) {
            form.append(`file${i}`, queuedRequest.payload.body.file[i].blob, queuedRequest.payload.body.file[i].name);
        }
        form.append("payload_json", JSON.stringify({ ...queuedRequest.payload.body, file: undefined }));
        queuedRequest.payload.body.file = form;
    }
    else if (queuedRequest.payload.body && !["GET", "DELETE"].includes(queuedRequest.request.method)) {
        headers["Content-Type"] = "application/json";
    }
    return {
        headers,
        body: (queuedRequest.payload.body?.file ?? JSON.stringify(queuedRequest.payload.body)),
        method: queuedRequest.request.method,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUmVxdWVzdEJvZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmVhdGVSZXF1ZXN0Qm9keS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJbEQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQWlCLEVBQUUsYUFBNkQ7SUFDaEgsTUFBTSxPQUFPLEdBQTJCO1FBQ3RDLGFBQWEsRUFBRSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDbEMsWUFBWSxFQUFFLFVBQVU7S0FDekIsQ0FBQztJQUdGLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDakMsS0FBSyxNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkQ7S0FDRjtJQUdELElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFO1FBQzFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztLQUN4QztJQUdELElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO1FBQ3RDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQWdCLENBQUMsQ0FBQztRQUNoRyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO0tBQy9DO0lBR0QsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7UUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckU7UUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBRTVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBSSxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFzQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsRixJQUFJLENBQUMsTUFBTSxDQUNULE9BQU8sQ0FBQyxFQUFFLEVBQ1QsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQ3pELGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMzRCxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hHLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7S0FDeEM7U0FBTSxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDbEcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO0tBQzlDO0lBRUQsT0FBTztRQUNMLE9BQU87UUFDUCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFzQjtRQUMzRyxNQUFNLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNO0tBQ3JDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdE1hbmFnZXIgfSBmcm9tIFwiLi4vYm90LnRzXCI7XG5pbXBvcnQgeyBGaWxlQ29udGVudCB9IGZyb20gXCIuLi90eXBlcy9kaXNjb3JkZW5vLnRzXCI7XG5pbXBvcnQgeyBVU0VSX0FHRU5UIH0gZnJvbSBcIi4uL3V0aWwvY29uc3RhbnRzLnRzXCI7XG5pbXBvcnQgeyBSZXN0UGF5bG9hZCwgUmVzdFJlcXVlc3QgfSBmcm9tIFwiLi9yZXN0LnRzXCI7XG5cbi8qKiBDcmVhdGVzIHRoZSByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgdGhhdCBhcmUgbmVjZXNzYXJ5IHRvIHNlbmQgYSByZXF1ZXN0LiBXaWxsIGhhbmRsZSBkaWZmZXJlbnQgdHlwZXMgb2YgbWV0aG9kcyBhbmQgZXZlcnl0aGluZyBuZWNlc3NhcnkgZm9yIGRpc2NvcmQuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVxdWVzdEJvZHkocmVzdDogUmVzdE1hbmFnZXIsIHF1ZXVlZFJlcXVlc3Q6IHsgcmVxdWVzdDogUmVzdFJlcXVlc3Q7IHBheWxvYWQ6IFJlc3RQYXlsb2FkIH0pIHtcbiAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICBhdXRob3JpemF0aW9uOiBgQm90ICR7cmVzdC50b2tlbn1gLFxuICAgIFwidXNlci1hZ2VudFwiOiBVU0VSX0FHRU5ULFxuICB9O1xuXG4gIC8vIFNPTUVUSU1FUyBTUEVDSUFMIEhFQURFUlMgKEUuRy4gQ1VTVE9NIEFVVEhPUklaQVRJT04pIE5FRUQgVE8gQkUgVVNFRFxuICBpZiAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmhlYWRlcnMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuaGVhZGVycykge1xuICAgICAgaGVhZGVyc1trZXldID0gcXVldWVkUmVxdWVzdC5wYXlsb2FkLmhlYWRlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICAvLyBHRVQgTUVUSE9EUyBTSE9VTEQgTk9UIEhBVkUgQSBCT0RZXG4gIGlmIChxdWV1ZWRSZXF1ZXN0LnJlcXVlc3QubWV0aG9kID09PSBcIkdFVFwiKSB7XG4gICAgcXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBJRiBBIFJFQVNPTiBJUyBQUk9WSURFRCBFTkNPREUgSVQgSU4gSEVBREVSU1xuICBpZiAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHk/LnJlYXNvbikge1xuICAgIGhlYWRlcnNbXCJYLUF1ZGl0LUxvZy1SZWFzb25cIl0gPSBlbmNvZGVVUklDb21wb25lbnQocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkucmVhc29uIGFzIHN0cmluZyk7XG4gICAgcXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkucmVhc29uID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gSUYgQSBGSUxFL0FUVEFDSE1FTlQgSVMgUFJFU0VOVCBXRSBORUVEIFNQRUNJQUwgSEFORExJTkdcbiAgaWYgKHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5Py5maWxlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LmZpbGUpKSB7XG4gICAgICBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keS5maWxlID0gW3F1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LmZpbGVdO1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LmZpbGUgYXMgRmlsZUNvbnRlbnRbXSkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvcm0uYXBwZW5kKFxuICAgICAgICBgZmlsZSR7aX1gLFxuICAgICAgICAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSBhcyBGaWxlQ29udGVudFtdKVtpXS5ibG9iLFxuICAgICAgICAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSBhcyBGaWxlQ29udGVudFtdKVtpXS5uYW1lLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmb3JtLmFwcGVuZChcInBheWxvYWRfanNvblwiLCBKU09OLnN0cmluZ2lmeSh7IC4uLnF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LCBmaWxlOiB1bmRlZmluZWQgfSkpO1xuICAgIHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LmZpbGUgPSBmb3JtO1xuICB9IGVsc2UgaWYgKHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5ICYmICFbXCJHRVRcIiwgXCJERUxFVEVcIl0uaW5jbHVkZXMocXVldWVkUmVxdWVzdC5yZXF1ZXN0Lm1ldGhvZCkpIHtcbiAgICBoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhlYWRlcnMsXG4gICAgYm9keTogKHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5Py5maWxlID8/IEpTT04uc3RyaW5naWZ5KHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5KSkgYXMgRm9ybURhdGEgfCBzdHJpbmcsXG4gICAgbWV0aG9kOiBxdWV1ZWRSZXF1ZXN0LnJlcXVlc3QubWV0aG9kLFxuICB9O1xufVxuIl19