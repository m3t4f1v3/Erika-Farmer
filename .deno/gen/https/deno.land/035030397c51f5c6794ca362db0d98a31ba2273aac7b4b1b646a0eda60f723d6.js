import { USER_AGENT } from "../util/constants.ts";
/** Creates the request body and headers that are necessary to send a request. Will handle different types of methods and everything necessary for discord. */ export function createRequestBody(rest, queuedRequest) {
    const headers = {
        authorization: `Bot ${rest.token}`,
        "user-agent": USER_AGENT
    };
    // SOMETIMES SPECIAL HEADERS (E.G. CUSTOM AUTHORIZATION) NEED TO BE USED
    if (queuedRequest.payload.headers) {
        for(const key in queuedRequest.payload.headers){
            headers[key] = queuedRequest.payload.headers[key];
        }
    }
    // GET METHODS SHOULD NOT HAVE A BODY
    if (queuedRequest.request.method === "GET") {
        queuedRequest.payload.body = undefined;
    }
    // IF A REASON IS PROVIDED ENCODE IT IN HEADERS
    if (queuedRequest.payload.body?.reason) {
        headers["X-Audit-Log-Reason"] = encodeURIComponent(queuedRequest.payload.body.reason);
        queuedRequest.payload.body.reason = undefined;
    }
    // IF A FILE/ATTACHMENT IS PRESENT WE NEED SPECIAL HANDLING
    if (queuedRequest.payload.body?.file) {
        if (!Array.isArray(queuedRequest.payload.body.file)) {
            queuedRequest.payload.body.file = [
                queuedRequest.payload.body.file
            ];
        }
        const form = new FormData();
        for(let i = 0; i < queuedRequest.payload.body.file.length; i++){
            form.append(`file${i}`, queuedRequest.payload.body.file[i].blob, queuedRequest.payload.body.file[i].name);
        }
        form.append("payload_json", JSON.stringify({
            ...queuedRequest.payload.body,
            file: undefined
        }));
        queuedRequest.payload.body.file = form;
    } else if (queuedRequest.payload.body && ![
        "GET",
        "DELETE"
    ].includes(queuedRequest.request.method)) {
        headers["Content-Type"] = "application/json";
    }
    return {
        headers,
        body: queuedRequest.payload.body?.file ?? JSON.stringify(queuedRequest.payload.body),
        method: queuedRequest.request.method
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN0TWFuYWdlciB9IGZyb20gXCIuLi9ib3QudHNcIjtcbmltcG9ydCB7IEZpbGVDb250ZW50IH0gZnJvbSBcIi4uL3R5cGVzL2Rpc2NvcmRlbm8udHNcIjtcbmltcG9ydCB7IFVTRVJfQUdFTlQgfSBmcm9tIFwiLi4vdXRpbC9jb25zdGFudHMudHNcIjtcbmltcG9ydCB7IFJlc3RQYXlsb2FkLCBSZXN0UmVxdWVzdCB9IGZyb20gXCIuL3Jlc3QudHNcIjtcblxuLyoqIENyZWF0ZXMgdGhlIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyB0aGF0IGFyZSBuZWNlc3NhcnkgdG8gc2VuZCBhIHJlcXVlc3QuIFdpbGwgaGFuZGxlIGRpZmZlcmVudCB0eXBlcyBvZiBtZXRob2RzIGFuZCBldmVyeXRoaW5nIG5lY2Vzc2FyeSBmb3IgZGlzY29yZC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0Qm9keShyZXN0OiBSZXN0TWFuYWdlciwgcXVldWVkUmVxdWVzdDogeyByZXF1ZXN0OiBSZXN0UmVxdWVzdDsgcGF5bG9hZDogUmVzdFBheWxvYWQgfSkge1xuICBjb25zdCBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIGF1dGhvcml6YXRpb246IGBCb3QgJHtyZXN0LnRva2VufWAsXG4gICAgXCJ1c2VyLWFnZW50XCI6IFVTRVJfQUdFTlQsXG4gIH07XG5cbiAgLy8gU09NRVRJTUVTIFNQRUNJQUwgSEVBREVSUyAoRS5HLiBDVVNUT00gQVVUSE9SSVpBVElPTikgTkVFRCBUTyBCRSBVU0VEXG4gIGlmIChxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuaGVhZGVycykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5oZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzW2tleV0gPSBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuaGVhZGVyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdFVCBNRVRIT0RTIFNIT1VMRCBOT1QgSEFWRSBBIEJPRFlcbiAgaWYgKHF1ZXVlZFJlcXVlc3QucmVxdWVzdC5tZXRob2QgPT09IFwiR0VUXCIpIHtcbiAgICBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIElGIEEgUkVBU09OIElTIFBST1ZJREVEIEVOQ09ERSBJVCBJTiBIRUFERVJTXG4gIGlmIChxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keT8ucmVhc29uKSB7XG4gICAgaGVhZGVyc1tcIlgtQXVkaXQtTG9nLVJlYXNvblwiXSA9IGVuY29kZVVSSUNvbXBvbmVudChxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keS5yZWFzb24gYXMgc3RyaW5nKTtcbiAgICBxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keS5yZWFzb24gPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBJRiBBIEZJTEUvQVRUQUNITUVOVCBJUyBQUkVTRU5UIFdFIE5FRUQgU1BFQ0lBTCBIQU5ETElOR1xuICBpZiAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHk/LmZpbGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSkpIHtcbiAgICAgIHF1ZXVlZFJlcXVlc3QucGF5bG9hZC5ib2R5LmZpbGUgPSBbcXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZV07XG4gICAgfVxuXG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSBhcyBGaWxlQ29udGVudFtdKS5sZW5ndGg7IGkrKykge1xuICAgICAgZm9ybS5hcHBlbmQoXG4gICAgICAgIGBmaWxlJHtpfWAsXG4gICAgICAgIChxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keS5maWxlIGFzIEZpbGVDb250ZW50W10pW2ldLmJsb2IsXG4gICAgICAgIChxdWV1ZWRSZXF1ZXN0LnBheWxvYWQuYm9keS5maWxlIGFzIEZpbGVDb250ZW50W10pW2ldLm5hbWUsXG4gICAgICApO1xuICAgIH1cblxuICAgIGZvcm0uYXBwZW5kKFwicGF5bG9hZF9qc29uXCIsIEpTT04uc3RyaW5naWZ5KHsgLi4ucXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHksIGZpbGU6IHVuZGVmaW5lZCB9KSk7XG4gICAgcXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkuZmlsZSA9IGZvcm07XG4gIH0gZWxzZSBpZiAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkgJiYgIVtcIkdFVFwiLCBcIkRFTEVURVwiXS5pbmNsdWRlcyhxdWV1ZWRSZXF1ZXN0LnJlcXVlc3QubWV0aG9kKSkge1xuICAgIGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGVhZGVycyxcbiAgICBib2R5OiAocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHk/LmZpbGUgPz8gSlNPTi5zdHJpbmdpZnkocXVldWVkUmVxdWVzdC5wYXlsb2FkLmJvZHkpKSBhcyBGb3JtRGF0YSB8IHN0cmluZyxcbiAgICBtZXRob2Q6IHF1ZXVlZFJlcXVlc3QucmVxdWVzdC5tZXRob2QsXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxVQUFVLFFBQVEsc0JBQXNCLENBQUM7QUFHbEQsOEpBQThKLENBQzlKLE9BQU8sU0FBUyxpQkFBaUIsQ0FBQyxJQUFpQixFQUFFLGFBQTZELEVBQUU7SUFDbEgsTUFBTSxPQUFPLEdBQTJCO1FBQ3RDLGFBQWEsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsWUFBWSxFQUFFLFVBQVU7S0FDekIsQUFBQztJQUVGLHdFQUF3RTtJQUN4RSxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ2pDLElBQUssTUFB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