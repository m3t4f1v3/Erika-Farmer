import { identify } from "./identify.ts";
import { handleMessage } from "./handleMessage.ts";
import { DEFAULT_HEARTBEAT_INTERVAL, GATEWAY_RATE_LIMIT_RESET_INTERVAL, MAX_GATEWAY_REQUESTS_PER_INTERVAL, ShardState, } from "./types.ts";
import { startHeartbeating } from "./startHeartbeating.ts";
import { stopHeartbeating } from "./stopHeartbeating.ts";
import { resume } from "./resume.ts";
import { createLeakyBucket } from "../../util/bucket.ts";
import { calculateSafeRequests } from "./calculateSafeRequests.ts";
import { send } from "./send.ts";
import { handleClose } from "./handleClose.ts";
import { connect } from "./connect.ts";
import { close } from "./close.ts";
import { shutdown } from "./shutdown.ts";
import { isOpen } from "./isOpen.ts";
import { API_VERSION } from "../../util/constants.ts";
export function createShard(options) {
    const calculateSafeRequestsOverwritten = options.calculateSafeRequests ?? calculateSafeRequests;
    const closeOverwritten = options.close ?? close;
    const connectOverwritten = options.connect ?? connect;
    const identifyOverwritten = options.identify ?? identify;
    const sendOverwritten = options.send ?? send;
    const shutdownOverwritten = options.shutdown ?? shutdown;
    const resumeOverwritten = options.resume ?? resume;
    const handleCloseOverwritten = options.handleClose ?? handleClose;
    const handleMessageOverwritten = options.handleMessage ?? handleMessage;
    const isOpenOverwritten = options.isOpen ?? isOpen;
    const startHeartbeatingOverwritten = options.startHeartbeating ?? startHeartbeating;
    const stopHeartbeatingOverwritten = options.stopHeartbeating ?? stopHeartbeating;
    return {
        gatewayConfig: {
            compress: options.gatewayConfig.compress ?? false,
            intents: options.gatewayConfig.intents ?? 0,
            properties: {
                $os: options.gatewayConfig?.properties?.$os ?? Deno.build.os,
                $browser: options.gatewayConfig?.properties?.$browser ?? "Discordeno",
                $device: options.gatewayConfig?.properties?.$device ?? "Discordeno",
            },
            token: options.gatewayConfig.token,
            url: options.gatewayConfig.url ?? "wss://gateway.discord.gg",
            version: options.gatewayConfig.version ?? API_VERSION,
        },
        heart: {
            acknowledged: false,
            interval: DEFAULT_HEARTBEAT_INTERVAL,
        },
        id: options.id,
        maxRequestsPerRateLimitTick: MAX_GATEWAY_REQUESTS_PER_INTERVAL,
        previousSequenceNumber: options.previousSequenceNumber || null,
        rateLimitResetInterval: GATEWAY_RATE_LIMIT_RESET_INTERVAL,
        sessionId: undefined,
        socket: undefined,
        state: ShardState.Offline,
        totalShards: options.totalShards,
        events: options.events ?? {},
        calculateSafeRequests: function () {
            return calculateSafeRequestsOverwritten(this);
        },
        close: function (code, reason) {
            return closeOverwritten(this, code, reason);
        },
        connect: async function () {
            return await connectOverwritten(this);
        },
        identify: async function () {
            return await identifyOverwritten(this);
        },
        isOpen: function () {
            return isOpenOverwritten(this);
        },
        makePresence: options.makePresence,
        resume: async function () {
            return await resumeOverwritten(this);
        },
        send: async function (message, highPriority = false) {
            return await sendOverwritten(this, message, highPriority);
        },
        shutdown: async function () {
            return await shutdownOverwritten(this);
        },
        bucket: createLeakyBucket({
            max: MAX_GATEWAY_REQUESTS_PER_INTERVAL,
            refillInterval: GATEWAY_RATE_LIMIT_RESET_INTERVAL,
            refillAmount: MAX_GATEWAY_REQUESTS_PER_INTERVAL,
        }),
        handleClose: async function (close) {
            return await handleCloseOverwritten(this, close);
        },
        handleMessage: async function (message) {
            return await handleMessageOverwritten(this, message);
        },
        requestIdentify: async function () {
            return await options.requestIdentify(this.id);
        },
        offlineSendQueue: [],
        resolves: new Map(),
        startHeartbeating: function (interval) {
            return startHeartbeatingOverwritten(this, interval);
        },
        stopHeartbeating: function () {
            return stopHeartbeatingOverwritten(this);
        },
    };
}
//# sourceMappingURL=data:application/json;base64,